/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import moment from 'moment-es6';
import { FormFieldTypes } from './form-field-types';
/**
 * @record
 */
export function FormFieldValidator() { }
if (false) {
    /**
     * @param {?} field
     * @return {?}
     */
    FormFieldValidator.prototype.isSupported = function (field) { };
    /**
     * @param {?} field
     * @return {?}
     */
    FormFieldValidator.prototype.validate = function (field) { };
}
var RequiredFieldValidator = /** @class */ (function () {
    function RequiredFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.TEXT,
            FormFieldTypes.MULTILINE_TEXT,
            FormFieldTypes.NUMBER,
            FormFieldTypes.BOOLEAN,
            FormFieldTypes.TYPEAHEAD,
            FormFieldTypes.DROPDOWN,
            FormFieldTypes.PEOPLE,
            FormFieldTypes.FUNCTIONAL_GROUP,
            FormFieldTypes.RADIO_BUTTONS,
            FormFieldTypes.UPLOAD,
            FormFieldTypes.AMOUNT,
            FormFieldTypes.DYNAMIC_TABLE,
            FormFieldTypes.DATE,
            FormFieldTypes.DATETIME,
            FormFieldTypes.ATTACH_FOLDER
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    RequiredFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field &&
            this.supportedTypes.indexOf(field.type) > -1 &&
            field.required;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    RequiredFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (this.isSupported(field) && field.isVisible) {
            if (field.type === FormFieldTypes.DROPDOWN) {
                if (field.hasEmptyValue && field.emptyOption) {
                    if (field.value === field.emptyOption.id) {
                        return false;
                    }
                }
            }
            if (field.type === FormFieldTypes.RADIO_BUTTONS) {
                /** @type {?} */
                var option = field.options.find((/**
                 * @param {?} opt
                 * @return {?}
                 */
                function (opt) { return opt.id === field.value; }));
                return !!option;
            }
            if (field.type === FormFieldTypes.UPLOAD) {
                return field.value && field.value.length > 0;
            }
            if (field.type === FormFieldTypes.DYNAMIC_TABLE) {
                return field.value && field.value instanceof Array && field.value.length > 0;
            }
            if (field.type === FormFieldTypes.BOOLEAN) {
                return field.value ? true : false;
            }
            if (field.value === null || field.value === undefined || field.value === '') {
                return false;
            }
        }
        return true;
    };
    return RequiredFieldValidator;
}());
export { RequiredFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RequiredFieldValidator.prototype.supportedTypes;
}
var NumberFieldValidator = /** @class */ (function () {
    function NumberFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.NUMBER,
            FormFieldTypes.AMOUNT
        ];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    NumberFieldValidator.isNumber = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === null || value === undefined || value === '') {
            return false;
        }
        return !isNaN(+value);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    NumberFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field && this.supportedTypes.indexOf(field.type) > -1;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    NumberFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (this.isSupported(field) && field.isVisible) {
            if (field.value === null ||
                field.value === undefined ||
                field.value === '') {
                return true;
            }
            /** @type {?} */
            var valueStr = '' + field.value;
            /** @type {?} */
            var pattern = new RegExp(/^-?\d+$/);
            if (field.enableFractions) {
                pattern = new RegExp(/^-?[0-9]+(\.[0-9]{1,2})?$/);
            }
            if (valueStr.match(pattern)) {
                return true;
            }
            field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_NUMBER';
            return false;
        }
        return true;
    };
    return NumberFieldValidator;
}());
export { NumberFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NumberFieldValidator.prototype.supportedTypes;
}
var DateFieldValidator = /** @class */ (function () {
    function DateFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.DATE
        ];
    }
    // Validates that the input string is a valid date formatted as <dateFormat> (default D-M-YYYY)
    // Validates that the input string is a valid date formatted as <dateFormat> (default D-M-YYYY)
    /**
     * @param {?} inputDate
     * @param {?=} dateFormat
     * @return {?}
     */
    DateFieldValidator.isValidDate = 
    // Validates that the input string is a valid date formatted as <dateFormat> (default D-M-YYYY)
    /**
     * @param {?} inputDate
     * @param {?=} dateFormat
     * @return {?}
     */
    function (inputDate, dateFormat) {
        if (dateFormat === void 0) { dateFormat = 'D-M-YYYY'; }
        if (inputDate) {
            /** @type {?} */
            var d = moment(inputDate, dateFormat, true);
            return d.isValid();
        }
        return false;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DateFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field && this.supportedTypes.indexOf(field.type) > -1;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DateFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (this.isSupported(field) && field.value && field.isVisible) {
            if (DateFieldValidator.isValidDate(field.value, field.dateDisplayFormat)) {
                return true;
            }
            field.validationSummary.message = field.dateDisplayFormat;
            return false;
        }
        return true;
    };
    return DateFieldValidator;
}());
export { DateFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DateFieldValidator.prototype.supportedTypes;
}
/**
 * @abstract
 */
var /**
 * @abstract
 */
BoundaryDateFieldValidator = /** @class */ (function () {
    function BoundaryDateFieldValidator() {
        this.DATE_FORMAT_CLOUD = 'YYYY-MM-DD';
        this.DATE_FORMAT = 'DD-MM-YYYY';
        this.supportedTypes = [
            FormFieldTypes.DATE
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    BoundaryDateFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var isValid = true;
        if (this.isSupported(field) && field.value && field.isVisible) {
            /** @type {?} */
            var dateFormat = field.dateDisplayFormat;
            if (!DateFieldValidator.isValidDate(field.value, dateFormat)) {
                field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_DATE';
                isValid = false;
            }
            else {
                isValid = this.checkDate(field, dateFormat);
            }
        }
        return isValid;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    BoundaryDateFieldValidator.prototype.extractDateFormat = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var brokenDownDate = date.split('-');
        return brokenDownDate[0].length === 4 ? this.DATE_FORMAT_CLOUD : this.DATE_FORMAT;
    };
    return BoundaryDateFieldValidator;
}());
/**
 * @abstract
 */
export { BoundaryDateFieldValidator };
if (false) {
    /** @type {?} */
    BoundaryDateFieldValidator.prototype.DATE_FORMAT_CLOUD;
    /** @type {?} */
    BoundaryDateFieldValidator.prototype.DATE_FORMAT;
    /** @type {?} */
    BoundaryDateFieldValidator.prototype.supportedTypes;
    /**
     * @abstract
     * @param {?} field
     * @param {?} dateFormat
     * @return {?}
     */
    BoundaryDateFieldValidator.prototype.checkDate = function (field, dateFormat) { };
    /**
     * @abstract
     * @param {?} field
     * @return {?}
     */
    BoundaryDateFieldValidator.prototype.isSupported = function (field) { };
}
var MinDateFieldValidator = /** @class */ (function (_super) {
    tslib_1.__extends(MinDateFieldValidator, _super);
    function MinDateFieldValidator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} field
     * @param {?} dateFormat
     * @return {?}
     */
    MinDateFieldValidator.prototype.checkDate = /**
     * @param {?} field
     * @param {?} dateFormat
     * @return {?}
     */
    function (field, dateFormat) {
        /** @type {?} */
        var isValid = true;
        // remove time and timezone info
        /** @type {?} */
        var fieldValueData;
        if (typeof field.value === 'string') {
            fieldValueData = moment(field.value.split('T')[0], dateFormat);
        }
        else {
            fieldValueData = field.value;
        }
        /** @type {?} */
        var minValueDateFormat = this.extractDateFormat(field.minValue);
        /** @type {?} */
        var min = moment(field.minValue, minValueDateFormat);
        if (fieldValueData.isBefore(min)) {
            field.validationSummary.message = "FORM.FIELD.VALIDATOR.NOT_LESS_THAN";
            field.validationSummary.attributes.set('minValue', min.format(field.dateDisplayFormat).toLocaleUpperCase());
            isValid = false;
        }
        return isValid;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    MinDateFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field &&
            this.supportedTypes.indexOf(field.type) > -1 && !!field.minValue;
    };
    return MinDateFieldValidator;
}(BoundaryDateFieldValidator));
export { MinDateFieldValidator };
var MaxDateFieldValidator = /** @class */ (function (_super) {
    tslib_1.__extends(MaxDateFieldValidator, _super);
    function MaxDateFieldValidator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} field
     * @param {?} dateFormat
     * @return {?}
     */
    MaxDateFieldValidator.prototype.checkDate = /**
     * @param {?} field
     * @param {?} dateFormat
     * @return {?}
     */
    function (field, dateFormat) {
        /** @type {?} */
        var isValid = true;
        // remove time and timezone info
        /** @type {?} */
        var fieldValueData;
        if (typeof field.value === 'string') {
            fieldValueData = moment(field.value.split('T')[0], dateFormat);
        }
        else {
            fieldValueData = field.value;
        }
        /** @type {?} */
        var maxValueDateFormat = this.extractDateFormat(field.maxValue);
        /** @type {?} */
        var max = moment(field.maxValue, maxValueDateFormat);
        if (fieldValueData.isAfter(max)) {
            field.validationSummary.message = "FORM.FIELD.VALIDATOR.NOT_GREATER_THAN";
            field.validationSummary.attributes.set('maxValue', max.format(field.dateDisplayFormat).toLocaleUpperCase());
            isValid = false;
        }
        return isValid;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    MaxDateFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field &&
            this.supportedTypes.indexOf(field.type) > -1 && !!field.maxValue;
    };
    return MaxDateFieldValidator;
}(BoundaryDateFieldValidator));
export { MaxDateFieldValidator };
var MinDateTimeFieldValidator = /** @class */ (function () {
    function MinDateTimeFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.DATETIME
        ];
        this.MIN_DATETIME_FORMAT = 'YYYY-MM-DD hh:mm AZ';
    }
    /**
     * @param {?} field
     * @return {?}
     */
    MinDateTimeFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field &&
            this.supportedTypes.indexOf(field.type) > -1 && !!field.minValue;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    MinDateTimeFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var isValid = true;
        if (this.isSupported(field) && field.value && field.isVisible) {
            /** @type {?} */
            var dateFormat = field.dateDisplayFormat;
            if (!DateFieldValidator.isValidDate(field.value, dateFormat)) {
                field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_DATE';
                isValid = false;
            }
            else {
                isValid = this.checkDateTime(field, dateFormat);
            }
        }
        return isValid;
    };
    /**
     * @private
     * @param {?} field
     * @param {?} dateFormat
     * @return {?}
     */
    MinDateTimeFieldValidator.prototype.checkDateTime = /**
     * @private
     * @param {?} field
     * @param {?} dateFormat
     * @return {?}
     */
    function (field, dateFormat) {
        /** @type {?} */
        var isValid = true;
        /** @type {?} */
        var fieldValueDate;
        if (typeof field.value === 'string') {
            fieldValueDate = moment(field.value, dateFormat);
        }
        else {
            fieldValueDate = field.value;
        }
        /** @type {?} */
        var min = moment(field.minValue, this.MIN_DATETIME_FORMAT);
        if (fieldValueDate.isBefore(min)) {
            field.validationSummary.message = "FORM.FIELD.VALIDATOR.NOT_LESS_THAN";
            field.validationSummary.attributes.set('minValue', min.format(field.dateDisplayFormat).replace(':', '-'));
            isValid = false;
        }
        return isValid;
    };
    return MinDateTimeFieldValidator;
}());
export { MinDateTimeFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MinDateTimeFieldValidator.prototype.supportedTypes;
    /** @type {?} */
    MinDateTimeFieldValidator.prototype.MIN_DATETIME_FORMAT;
}
var MaxDateTimeFieldValidator = /** @class */ (function () {
    function MaxDateTimeFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.DATETIME
        ];
        this.MAX_DATETIME_FORMAT = 'YYYY-MM-DD hh:mm AZ';
    }
    /**
     * @param {?} field
     * @return {?}
     */
    MaxDateTimeFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field &&
            this.supportedTypes.indexOf(field.type) > -1 && !!field.maxValue;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    MaxDateTimeFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var isValid = true;
        if (this.isSupported(field) && field.value && field.isVisible) {
            /** @type {?} */
            var dateFormat = field.dateDisplayFormat;
            if (!DateFieldValidator.isValidDate(field.value, dateFormat)) {
                field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_DATE';
                isValid = false;
            }
            else {
                isValid = this.checkDateTime(field, dateFormat);
            }
        }
        return isValid;
    };
    /**
     * @private
     * @param {?} field
     * @param {?} dateFormat
     * @return {?}
     */
    MaxDateTimeFieldValidator.prototype.checkDateTime = /**
     * @private
     * @param {?} field
     * @param {?} dateFormat
     * @return {?}
     */
    function (field, dateFormat) {
        /** @type {?} */
        var isValid = true;
        /** @type {?} */
        var fieldValueDate;
        if (typeof field.value === 'string') {
            fieldValueDate = moment(field.value, dateFormat);
        }
        else {
            fieldValueDate = field.value;
        }
        /** @type {?} */
        var max = moment(field.maxValue, this.MAX_DATETIME_FORMAT);
        if (fieldValueDate.isAfter(max)) {
            field.validationSummary.message = "FORM.FIELD.VALIDATOR.NOT_GREATER_THAN";
            field.validationSummary.attributes.set('maxValue', max.format(field.dateDisplayFormat).replace(':', '-'));
            isValid = false;
        }
        return isValid;
    };
    return MaxDateTimeFieldValidator;
}());
export { MaxDateTimeFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MaxDateTimeFieldValidator.prototype.supportedTypes;
    /** @type {?} */
    MaxDateTimeFieldValidator.prototype.MAX_DATETIME_FORMAT;
}
var MinLengthFieldValidator = /** @class */ (function () {
    function MinLengthFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.TEXT,
            FormFieldTypes.MULTILINE_TEXT
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    MinLengthFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field &&
            this.supportedTypes.indexOf(field.type) > -1 &&
            field.minLength > 0;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    MinLengthFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (this.isSupported(field) && field.value && field.isVisible) {
            if (field.value.length >= field.minLength) {
                return true;
            }
            field.validationSummary.message = "FORM.FIELD.VALIDATOR.AT_LEAST_LONG";
            field.validationSummary.attributes.set('minLength', field.minLength.toLocaleString());
            return false;
        }
        return true;
    };
    return MinLengthFieldValidator;
}());
export { MinLengthFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MinLengthFieldValidator.prototype.supportedTypes;
}
var MaxLengthFieldValidator = /** @class */ (function () {
    function MaxLengthFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.TEXT,
            FormFieldTypes.MULTILINE_TEXT
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    MaxLengthFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field &&
            this.supportedTypes.indexOf(field.type) > -1 &&
            field.maxLength > 0;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    MaxLengthFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (this.isSupported(field) && field.value && field.isVisible) {
            if (field.value.length <= field.maxLength) {
                return true;
            }
            field.validationSummary.message = "FORM.FIELD.VALIDATOR.NO_LONGER_THAN";
            field.validationSummary.attributes.set('maxLength', field.maxLength.toLocaleString());
            return false;
        }
        return true;
    };
    return MaxLengthFieldValidator;
}());
export { MaxLengthFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MaxLengthFieldValidator.prototype.supportedTypes;
}
var MinValueFieldValidator = /** @class */ (function () {
    function MinValueFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.NUMBER,
            FormFieldTypes.AMOUNT
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    MinValueFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field &&
            this.supportedTypes.indexOf(field.type) > -1 &&
            NumberFieldValidator.isNumber(field.minValue);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    MinValueFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (this.isSupported(field) && field.value && field.isVisible) {
            /** @type {?} */
            var value = +field.value;
            /** @type {?} */
            var minValue = +field.minValue;
            if (value >= minValue) {
                return true;
            }
            field.validationSummary.message = "FORM.FIELD.VALIDATOR.NOT_LESS_THAN";
            field.validationSummary.attributes.set('minValue', field.minValue.toLocaleString());
            return false;
        }
        return true;
    };
    return MinValueFieldValidator;
}());
export { MinValueFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MinValueFieldValidator.prototype.supportedTypes;
}
var MaxValueFieldValidator = /** @class */ (function () {
    function MaxValueFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.NUMBER,
            FormFieldTypes.AMOUNT
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    MaxValueFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field &&
            this.supportedTypes.indexOf(field.type) > -1 &&
            NumberFieldValidator.isNumber(field.maxValue);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    MaxValueFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (this.isSupported(field) && field.value && field.isVisible) {
            /** @type {?} */
            var value = +field.value;
            /** @type {?} */
            var maxValue = +field.maxValue;
            if (value <= maxValue) {
                return true;
            }
            field.validationSummary.message = "FORM.FIELD.VALIDATOR.NOT_GREATER_THAN";
            field.validationSummary.attributes.set('maxValue', field.maxValue.toLocaleString());
            return false;
        }
        return true;
    };
    return MaxValueFieldValidator;
}());
export { MaxValueFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MaxValueFieldValidator.prototype.supportedTypes;
}
var RegExFieldValidator = /** @class */ (function () {
    function RegExFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.TEXT,
            FormFieldTypes.MULTILINE_TEXT
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    RegExFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field &&
            this.supportedTypes.indexOf(field.type) > -1 && !!field.regexPattern;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    RegExFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (this.isSupported(field) && field.value && field.isVisible) {
            if (field.value.length > 0 && field.value.match(new RegExp('^' + field.regexPattern + '$'))) {
                return true;
            }
            field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_VALUE';
            return false;
        }
        return true;
    };
    return RegExFieldValidator;
}());
export { RegExFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RegExFieldValidator.prototype.supportedTypes;
}
var FixedValueFieldValidator = /** @class */ (function () {
    function FixedValueFieldValidator() {
        this.supportedTypes = [
            FormFieldTypes.TYPEAHEAD
        ];
    }
    /**
     * @param {?} field
     * @return {?}
     */
    FixedValueFieldValidator.prototype.isSupported = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field && this.supportedTypes.indexOf(field.type) > -1;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FixedValueFieldValidator.prototype.hasValidNameOrValidId = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.hasValidName(field) || this.hasValidId(field);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FixedValueFieldValidator.prototype.hasValidName = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field.options.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.name && item.name.toLocaleLowerCase() === field.value.toLocaleLowerCase(); })) ? true : false;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FixedValueFieldValidator.prototype.hasValidId = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field.options.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.id === field.value; })) ? true : false;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FixedValueFieldValidator.prototype.hasStringValue = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field.value && typeof field.value === 'string';
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FixedValueFieldValidator.prototype.hasOptions = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return field.options && field.options.length > 0;
    };
    /**
     * @param {?} field
     * @return {?}
     */
    FixedValueFieldValidator.prototype.validate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (this.isSupported(field) && field.isVisible) {
            if (this.hasStringValue(field) && this.hasOptions(field) && !this.hasValidNameOrValidId(field)) {
                field.validationSummary.message = 'FORM.FIELD.VALIDATOR.INVALID_VALUE';
                return false;
            }
        }
        return true;
    };
    return FixedValueFieldValidator;
}());
export { FixedValueFieldValidator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FixedValueFieldValidator.prototype.supportedTypes;
}
/** @type {?} */
export var FORM_FIELD_VALIDATORS = [
    new RequiredFieldValidator(),
    new NumberFieldValidator(),
    new MinLengthFieldValidator(),
    new MaxLengthFieldValidator(),
    new MinValueFieldValidator(),
    new MaxValueFieldValidator(),
    new RegExFieldValidator(),
    new DateFieldValidator(),
    new MinDateFieldValidator(),
    new MaxDateFieldValidator(),
    new FixedValueFieldValidator(),
    new MinDateTimeFieldValidator(),
    new MaxDateTimeFieldValidator()
];
//# sourceMappingURL=data:application/json;base64,