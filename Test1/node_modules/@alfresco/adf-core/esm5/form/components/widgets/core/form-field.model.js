/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import moment from 'moment-es6';
import { WidgetVisibilityModel } from '../../../models/widget-visibility.model';
import { ContainerColumnModel } from './container-column.model';
import { ErrorMessageModel } from './error-message.model';
import { FormFieldTypes } from './form-field-types';
import { NumberFieldValidator } from './form-field-validator';
import { FormWidgetModel } from './form-widget.model';
// Maps to FormFieldRepresentation
var 
// Maps to FormFieldRepresentation
FormFieldModel = /** @class */ (function (_super) {
    tslib_1.__extends(FormFieldModel, _super);
    function FormFieldModel(form, json) {
        var _this = _super.call(this, form, json) || this;
        _this._readOnly = false;
        _this._isValid = true;
        _this._required = false;
        _this.defaultDateFormat = 'D-M-YYYY';
        _this.defaultDateTimeFormat = 'D-M-YYYY hh:mm A';
        _this.rowspan = 1;
        _this.colspan = 1;
        _this.placeholder = null;
        _this.minLength = 0;
        _this.maxLength = 0;
        _this.options = [];
        _this.params = {};
        _this.isVisible = true;
        _this.visibilityCondition = null;
        _this.enableFractions = false;
        _this.currency = null;
        _this.dateDisplayFormat = _this.defaultDateFormat;
        // container model members
        _this.numberOfColumns = 1;
        _this.fields = [];
        _this.columns = [];
        if (json) {
            _this.fieldType = json.fieldType;
            _this.id = json.id;
            _this.name = json.name;
            _this.type = json.type;
            _this._required = (/** @type {?} */ (json.required));
            _this._readOnly = (/** @type {?} */ (json.readOnly)) || json.type === 'readonly';
            _this.overrideId = (/** @type {?} */ (json.overrideId));
            _this.tab = json.tab;
            _this.restUrl = json.restUrl;
            _this.restResponsePath = json.restResponsePath;
            _this.restIdProperty = json.restIdProperty;
            _this.restLabelProperty = json.restLabelProperty;
            _this.colspan = (/** @type {?} */ (json.colspan));
            _this.minLength = (/** @type {?} */ (json.minLength)) || 0;
            _this.maxLength = (/** @type {?} */ (json.maxLength)) || 0;
            _this.minValue = json.minValue;
            _this.maxValue = json.maxValue;
            _this.regexPattern = json.regexPattern;
            _this.options = (/** @type {?} */ (json.options)) || [];
            _this.hasEmptyValue = (/** @type {?} */ (json.hasEmptyValue));
            _this.className = json.className;
            _this.optionType = json.optionType;
            _this.params = (/** @type {?} */ (json.params)) || {};
            _this.hyperlinkUrl = json.hyperlinkUrl;
            _this.displayText = json.displayText;
            _this.visibilityCondition = json.visibilityCondition ? new WidgetVisibilityModel(json.visibilityCondition) : undefined;
            _this.enableFractions = (/** @type {?} */ (json.enableFractions));
            _this.currency = json.currency;
            _this.dateDisplayFormat = json.dateDisplayFormat || _this.getDefaultDateFormat(json);
            _this._value = _this.parseValue(json);
            _this.validationSummary = new ErrorMessageModel();
            if (json.placeholder && json.placeholder !== '' && json.placeholder !== 'null') {
                _this.placeholder = json.placeholder;
            }
            if (FormFieldTypes.isReadOnlyType(json.type)) {
                if (json.params && json.params.field) {
                    if (form.processVariables) {
                        /** @type {?} */
                        var processVariable = _this.getProcessVariableValue(json.params.field, form);
                        if (processVariable) {
                            _this.value = processVariable;
                        }
                    }
                    else if (json.params.responseVariable && form.json.variables) {
                        /** @type {?} */
                        var formVariable = _this.getVariablesValue(json.params.field.name, form);
                        if (formVariable) {
                            _this.value = formVariable;
                        }
                    }
                }
            }
            if (FormFieldTypes.isContainerType(json.type)) {
                _this.containerFactory(json, form);
            }
        }
        if (_this.hasEmptyValue && _this.options && _this.options.length > 0) {
            _this.emptyOption = _this.options[0];
        }
        _this.updateForm();
        return _this;
    }
    Object.defineProperty(FormFieldModel.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            return this._value;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._value = v;
            this.updateForm();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFieldModel.prototype, "readOnly", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.form && this.form.readOnly) {
                return true;
            }
            return this._readOnly;
        },
        set: /**
         * @param {?} readOnly
         * @return {?}
         */
        function (readOnly) {
            this._readOnly = readOnly;
            this.updateForm();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFieldModel.prototype, "required", {
        get: /**
         * @return {?}
         */
        function () {
            return this._required;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._required = value;
            this.updateForm();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormFieldModel.prototype, "isValid", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isValid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormFieldModel.prototype.markAsInvalid = /**
     * @return {?}
     */
    function () {
        this._isValid = false;
    };
    /**
     * @return {?}
     */
    FormFieldModel.prototype.validate = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        this.validationSummary = new ErrorMessageModel();
        if (!this.readOnly) {
            /** @type {?} */
            var validators = this.form.fieldValidators || [];
            try {
                for (var validators_1 = tslib_1.__values(validators), validators_1_1 = validators_1.next(); !validators_1_1.done; validators_1_1 = validators_1.next()) {
                    var validator = validators_1_1.value;
                    if (!validator.validate(this)) {
                        this._isValid = false;
                        return this._isValid;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (validators_1_1 && !validators_1_1.done && (_a = validators_1.return)) _a.call(validators_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        this._isValid = true;
        return this._isValid;
    };
    /**
     * @private
     * @param {?} jsonField
     * @return {?}
     */
    FormFieldModel.prototype.getDefaultDateFormat = /**
     * @private
     * @param {?} jsonField
     * @return {?}
     */
    function (jsonField) {
        /** @type {?} */
        var originalType = jsonField.type;
        if (FormFieldTypes.isReadOnlyType(jsonField.type) &&
            jsonField.params &&
            jsonField.params.field) {
            originalType = jsonField.params.field.type;
        }
        return originalType === FormFieldTypes.DATETIME ? this.defaultDateTimeFormat : this.defaultDateFormat;
    };
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    FormFieldModel.prototype.isTypeaheadFieldType = /**
     * @private
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return type === 'typeahead' ? true : false;
    };
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    FormFieldModel.prototype.getFieldNameWithLabel = /**
     * @private
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return name += '_LABEL';
    };
    /**
     * @private
     * @param {?} field
     * @param {?} form
     * @return {?}
     */
    FormFieldModel.prototype.getProcessVariableValue = /**
     * @private
     * @param {?} field
     * @param {?} form
     * @return {?}
     */
    function (field, form) {
        /** @type {?} */
        var fieldName = field.name;
        if (this.isTypeaheadFieldType(field.type)) {
            fieldName = this.getFieldNameWithLabel(field.id);
        }
        return this.findProcessVariableValue(fieldName, form);
    };
    /**
     * @private
     * @param {?} variableName
     * @param {?} form
     * @return {?}
     */
    FormFieldModel.prototype.getVariablesValue = /**
     * @private
     * @param {?} variableName
     * @param {?} form
     * @return {?}
     */
    function (variableName, form) {
        /** @type {?} */
        var variable = form.json.variables.find((/**
         * @param {?} currentVariable
         * @return {?}
         */
        function (currentVariable) {
            return currentVariable.name === variableName;
        }));
        if (variable) {
            if (variable.type === 'boolean') {
                return JSON.parse(variable.value);
            }
            return variable.value;
        }
        return null;
    };
    /**
     * @private
     * @param {?} variableName
     * @param {?} form
     * @return {?}
     */
    FormFieldModel.prototype.findProcessVariableValue = /**
     * @private
     * @param {?} variableName
     * @param {?} form
     * @return {?}
     */
    function (variableName, form) {
        if (form.processVariables) {
            /** @type {?} */
            var variable = form.processVariables.find((/**
             * @param {?} currentVariable
             * @return {?}
             */
            function (currentVariable) {
                return currentVariable.name === variableName;
            }));
            if (variable) {
                return variable.type === 'boolean' ? JSON.parse(variable.value) : variable.value;
            }
        }
        return undefined;
    };
    /**
     * @private
     * @param {?} json
     * @param {?} form
     * @return {?}
     */
    FormFieldModel.prototype.containerFactory = /**
     * @private
     * @param {?} json
     * @param {?} form
     * @return {?}
     */
    function (json, form) {
        var _this = this;
        this.numberOfColumns = (/** @type {?} */ (json.numberOfColumns)) || 1;
        this.fields = json.fields;
        this.rowspan = 1;
        this.colspan = 1;
        if (json.fields) {
            for (var currentField in json.fields) {
                if (json.fields.hasOwnProperty(currentField)) {
                    /** @type {?} */
                    var col = new ContainerColumnModel();
                    /** @type {?} */
                    var fields = (json.fields[currentField] || []).map((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return new FormFieldModel(form, f); }));
                    col.fields = fields;
                    col.rowspan = json.fields[currentField].length;
                    col.fields.forEach((/**
                     * @param {?} colFields
                     * @return {?}
                     */
                    function (colFields) {
                        _this.colspan = colFields.colspan > _this.colspan ? colFields.colspan : _this.colspan;
                    }));
                    this.rowspan = this.rowspan < col.rowspan ? col.rowspan : this.rowspan;
                    this.columns.push(col);
                }
            }
        }
    };
    /**
     * @param {?} json
     * @return {?}
     */
    FormFieldModel.prototype.parseValue = /**
     * @param {?} json
     * @return {?}
     */
    function (json) {
        /** @type {?} */
        var value = json.hasOwnProperty('value') ? json.value : null;
        /*
         This is needed due to Activiti issue related to reading dropdown values as value string
         but saving back as object: { id: <id>, name: <name> }
         */
        if (json.type === FormFieldTypes.DROPDOWN) {
            if (json.hasEmptyValue && json.options) {
                /** @type {?} */
                var options = (/** @type {?} */ (json.options)) || [];
                if (options.length > 0) {
                    /** @type {?} */
                    var emptyOption = json.options[0];
                    if (value === '' || value === emptyOption.id || value === emptyOption.name) {
                        value = emptyOption.id;
                    }
                    else if (value.id && value.name) {
                        value = value.id;
                    }
                }
            }
        }
        /*
         This is needed due to Activiti issue related to reading radio button values as value string
         but saving back as object: { id: <id>, name: <name> }
         */
        if (json.type === FormFieldTypes.RADIO_BUTTONS) {
            // Activiti has a bug with default radio button value where initial selection passed as `name` value
            // so try resolving current one with a fallback to first entry via name or id
            // TODO: needs to be reported and fixed at Activiti side
            /** @type {?} */
            var entry = this.options.filter((/**
             * @param {?} opt
             * @return {?}
             */
            function (opt) {
                return opt.id === value || opt.name === value || (value && (opt.id === value.id || opt.name === value.name));
            }));
            if (entry.length > 0) {
                value = entry[0].id;
            }
        }
        /*
         This is needed due to Activiti displaying/editing dates in d-M-YYYY format
         but storing on server in ISO8601 format (i.e. 2013-02-04T22:44:30.652Z)
         */
        if (this.isDateField(json) || this.isDateTimeField(json)) {
            if (value) {
                /** @type {?} */
                var dateValue = void 0;
                if (NumberFieldValidator.isNumber(value)) {
                    dateValue = moment(value);
                }
                else {
                    dateValue = this.isDateTimeField(json) ? moment(value, 'YYYY-MM-DD hh:mm A') : moment(value.split('T')[0], 'YYYY-M-D');
                }
                if (dateValue && dateValue.isValid()) {
                    value = dateValue.format(this.dateDisplayFormat);
                }
            }
        }
        return value;
    };
    /**
     * @return {?}
     */
    FormFieldModel.prototype.updateForm = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.form) {
            return;
        }
        switch (this.type) {
            case FormFieldTypes.DROPDOWN:
                /*
                 This is needed due to Activiti reading dropdown values as string
                 but saving back as object: { id: <id>, name: <name> }
                 */
                if (this.value === 'empty' || this.value === '') {
                    this.form.values[this.id] = {};
                }
                else {
                    /** @type {?} */
                    var entry = this.options.filter((/**
                     * @param {?} opt
                     * @return {?}
                     */
                    function (opt) { return opt.id === _this.value; }));
                    if (entry.length > 0) {
                        this.form.values[this.id] = entry[0];
                    }
                }
                break;
            case FormFieldTypes.RADIO_BUTTONS:
                /*
                                 This is needed due to Activiti issue related to reading radio button values as value string
                                 but saving back as object: { id: <id>, name: <name> }
                                 */
                /** @type {?} */
                var rbEntry = this.options.filter((/**
                 * @param {?} opt
                 * @return {?}
                 */
                function (opt) { return opt.id === _this.value; }));
                if (rbEntry.length > 0) {
                    this.form.values[this.id] = rbEntry[0];
                }
                break;
            case FormFieldTypes.UPLOAD:
                this.form.hasUpload = true;
                if (this.value && this.value.length > 0) {
                    this.form.values[this.id] = Array.isArray(this.value) ? this.value.map((/**
                     * @param {?} elem
                     * @return {?}
                     */
                    function (elem) { return elem.id; })).join(',') : [this.value];
                }
                else {
                    this.form.values[this.id] = null;
                }
                break;
            case FormFieldTypes.TYPEAHEAD:
                /** @type {?} */
                var taEntry = this.options.filter((/**
                 * @param {?} opt
                 * @return {?}
                 */
                function (opt) { return opt.id === _this.value || opt.name === _this.value; }));
                if (taEntry.length > 0) {
                    this.form.values[this.id] = taEntry[0];
                }
                else if (this.options.length > 0) {
                    this.form.values[this.id] = null;
                }
                break;
            case FormFieldTypes.DATE:
                /** @type {?} */
                var dateValue = moment(this.value, this.dateDisplayFormat, true);
                if (dateValue && dateValue.isValid()) {
                    this.form.values[this.id] = dateValue.format('YYYY-MM-DD') + "T00:00:00.000Z";
                }
                else {
                    this.form.values[this.id] = null;
                    this._value = this.value;
                }
                break;
            case FormFieldTypes.DATETIME:
                /** @type {?} */
                var dateTimeValue = moment(this.value, this.dateDisplayFormat, true).utc();
                if (dateTimeValue && dateTimeValue.isValid()) {
                    /* cspell:disable-next-line */
                    this.form.values[this.id] = dateTimeValue.format('YYYY-MM-DDTHH:mm:ssZ');
                }
                else {
                    this.form.values[this.id] = null;
                    this._value = this.value;
                }
                break;
            case FormFieldTypes.NUMBER:
                this.form.values[this.id] = parseInt(this.value, 10);
                break;
            case FormFieldTypes.AMOUNT:
                this.form.values[this.id] = this.enableFractions ? parseFloat(this.value) : parseInt(this.value, 10);
                break;
            case FormFieldTypes.BOOLEAN:
                this.form.values[this.id] = (this.value !== null && this.value !== undefined) ? this.value : false;
                break;
            default:
                if (!FormFieldTypes.isReadOnlyType(this.type) && !this.isInvalidFieldType(this.type)) {
                    this.form.values[this.id] = this.value;
                }
        }
        this.form.onFormFieldChanged(this);
    };
    /**
     * Skip the invalid field type
     * @param type
     */
    /**
     * Skip the invalid field type
     * @param {?} type
     * @return {?}
     */
    FormFieldModel.prototype.isInvalidFieldType = /**
     * Skip the invalid field type
     * @param {?} type
     * @return {?}
     */
    function (type) {
        if (type === 'container') {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @return {?}
     */
    FormFieldModel.prototype.getOptionName = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var option = this.options.find((/**
         * @param {?} opt
         * @return {?}
         */
        function (opt) { return opt.id === _this.value; }));
        return option ? option.name : null;
    };
    /**
     * @return {?}
     */
    FormFieldModel.prototype.hasOptions = /**
     * @return {?}
     */
    function () {
        return this.options && this.options.length > 0;
    };
    /**
     * @private
     * @param {?} json
     * @return {?}
     */
    FormFieldModel.prototype.isDateField = /**
     * @private
     * @param {?} json
     * @return {?}
     */
    function (json) {
        return (json.params &&
            json.params.field &&
            json.params.field.type === FormFieldTypes.DATE) ||
            json.type === FormFieldTypes.DATE;
    };
    /**
     * @private
     * @param {?} json
     * @return {?}
     */
    FormFieldModel.prototype.isDateTimeField = /**
     * @private
     * @param {?} json
     * @return {?}
     */
    function (json) {
        return (json.params &&
            json.params.field &&
            json.params.field.type === FormFieldTypes.DATETIME) ||
            json.type === FormFieldTypes.DATETIME;
    };
    return FormFieldModel;
}(FormWidgetModel));
// Maps to FormFieldRepresentation
export { FormFieldModel };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormFieldModel.prototype._value;
    /**
     * @type {?}
     * @private
     */
    FormFieldModel.prototype._readOnly;
    /**
     * @type {?}
     * @private
     */
    FormFieldModel.prototype._isValid;
    /**
     * @type {?}
     * @private
     */
    FormFieldModel.prototype._required;
    /** @type {?} */
    FormFieldModel.prototype.defaultDateFormat;
    /** @type {?} */
    FormFieldModel.prototype.defaultDateTimeFormat;
    /** @type {?} */
    FormFieldModel.prototype.fieldType;
    /** @type {?} */
    FormFieldModel.prototype.id;
    /** @type {?} */
    FormFieldModel.prototype.name;
    /** @type {?} */
    FormFieldModel.prototype.type;
    /** @type {?} */
    FormFieldModel.prototype.overrideId;
    /** @type {?} */
    FormFieldModel.prototype.tab;
    /** @type {?} */
    FormFieldModel.prototype.rowspan;
    /** @type {?} */
    FormFieldModel.prototype.colspan;
    /** @type {?} */
    FormFieldModel.prototype.placeholder;
    /** @type {?} */
    FormFieldModel.prototype.minLength;
    /** @type {?} */
    FormFieldModel.prototype.maxLength;
    /** @type {?} */
    FormFieldModel.prototype.minValue;
    /** @type {?} */
    FormFieldModel.prototype.maxValue;
    /** @type {?} */
    FormFieldModel.prototype.regexPattern;
    /** @type {?} */
    FormFieldModel.prototype.options;
    /** @type {?} */
    FormFieldModel.prototype.restUrl;
    /** @type {?} */
    FormFieldModel.prototype.restResponsePath;
    /** @type {?} */
    FormFieldModel.prototype.restIdProperty;
    /** @type {?} */
    FormFieldModel.prototype.restLabelProperty;
    /** @type {?} */
    FormFieldModel.prototype.hasEmptyValue;
    /** @type {?} */
    FormFieldModel.prototype.className;
    /** @type {?} */
    FormFieldModel.prototype.optionType;
    /** @type {?} */
    FormFieldModel.prototype.params;
    /** @type {?} */
    FormFieldModel.prototype.hyperlinkUrl;
    /** @type {?} */
    FormFieldModel.prototype.displayText;
    /** @type {?} */
    FormFieldModel.prototype.isVisible;
    /** @type {?} */
    FormFieldModel.prototype.visibilityCondition;
    /** @type {?} */
    FormFieldModel.prototype.enableFractions;
    /** @type {?} */
    FormFieldModel.prototype.currency;
    /** @type {?} */
    FormFieldModel.prototype.dateDisplayFormat;
    /** @type {?} */
    FormFieldModel.prototype.numberOfColumns;
    /** @type {?} */
    FormFieldModel.prototype.fields;
    /** @type {?} */
    FormFieldModel.prototype.columns;
    /** @type {?} */
    FormFieldModel.prototype.emptyOption;
    /** @type {?} */
    FormFieldModel.prototype.validationSummary;
}
//# sourceMappingURL=data:application/json;base64,