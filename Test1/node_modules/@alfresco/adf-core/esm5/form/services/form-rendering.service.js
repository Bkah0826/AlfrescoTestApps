/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DynamicComponentMapper, DynamicComponentResolver } from '../../services/dynamic-component-mapper.service';
import { Injectable } from '@angular/core';
import { AmountWidgetComponent, CheckboxWidgetComponent, ContainerWidgetComponent, DateWidgetComponent, DisplayTextWidgetComponentComponent, DocumentWidgetComponent, DropdownWidgetComponent, DynamicTableWidgetComponent, FunctionalGroupWidgetComponent, HyperlinkWidgetComponent, MultilineTextWidgetComponentComponent, NumberWidgetComponent, PeopleWidgetComponent, RadioButtonsWidgetComponent, TextWidgetComponent, TypeaheadWidgetComponent, UnknownWidgetComponent, UploadWidgetComponent, DateTimeWidgetComponent } from './../components/widgets/index';
import * as i0 from "@angular/core";
var FormRenderingService = /** @class */ (function (_super) {
    tslib_1.__extends(FormRenderingService, _super);
    function FormRenderingService() {
        var _this = _super.call(this) || this;
        _this.defaultValue = UnknownWidgetComponent;
        _this.types = {
            'text': DynamicComponentResolver.fromType(TextWidgetComponent),
            'string': DynamicComponentResolver.fromType(TextWidgetComponent),
            'integer': DynamicComponentResolver.fromType(NumberWidgetComponent),
            'multi-line-text': DynamicComponentResolver.fromType(MultilineTextWidgetComponentComponent),
            'boolean': DynamicComponentResolver.fromType(CheckboxWidgetComponent),
            'dropdown': DynamicComponentResolver.fromType(DropdownWidgetComponent),
            'date': DynamicComponentResolver.fromType(DateWidgetComponent),
            'amount': DynamicComponentResolver.fromType(AmountWidgetComponent),
            'radio-buttons': DynamicComponentResolver.fromType(RadioButtonsWidgetComponent),
            'hyperlink': DynamicComponentResolver.fromType(HyperlinkWidgetComponent),
            'readonly-text': DynamicComponentResolver.fromType(DisplayTextWidgetComponentComponent),
            'readonly': DynamicComponentResolver.fromType(TextWidgetComponent),
            'typeahead': DynamicComponentResolver.fromType(TypeaheadWidgetComponent),
            'people': DynamicComponentResolver.fromType(PeopleWidgetComponent),
            'functional-group': DynamicComponentResolver.fromType(FunctionalGroupWidgetComponent),
            'dynamic-table': DynamicComponentResolver.fromType(DynamicTableWidgetComponent),
            'container': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'group': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'document': DynamicComponentResolver.fromType(DocumentWidgetComponent),
            'upload': DynamicComponentResolver.fromType(UploadWidgetComponent),
            'datetime': DynamicComponentResolver.fromType(DateTimeWidgetComponent)
        };
        return _this;
    }
    FormRenderingService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FormRenderingService.ctorParameters = function () { return []; };
    /** @nocollapse */ FormRenderingService.ngInjectableDef = i0.defineInjectable({ factory: function FormRenderingService_Factory() { return new FormRenderingService(); }, token: FormRenderingService, providedIn: "root" });
    return FormRenderingService;
}(DynamicComponentMapper));
export { FormRenderingService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    FormRenderingService.prototype.defaultValue;
    /**
     * @type {?}
     * @protected
     */
    FormRenderingService.prototype.types;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1yZW5kZXJpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImZvcm0vc2VydmljZXMvZm9ybS1yZW5kZXJpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLHNCQUFzQixFQUFtQyx3QkFBd0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ3BKLE9BQU8sRUFBRSxVQUFVLEVBQVEsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUNILHFCQUFxQixFQUNyQix1QkFBdUIsRUFDdkIsd0JBQXdCLEVBQ3hCLG1CQUFtQixFQUNuQixtQ0FBbUMsRUFDbkMsdUJBQXVCLEVBQ3ZCLHVCQUF1QixFQUN2QiwyQkFBMkIsRUFDM0IsOEJBQThCLEVBQzlCLHdCQUF3QixFQUN4QixxQ0FBcUMsRUFDckMscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUNyQiwyQkFBMkIsRUFDM0IsbUJBQW1CLEVBQ25CLHdCQUF3QixFQUN4QixzQkFBc0IsRUFDdEIscUJBQXFCLEVBQ3JCLHVCQUF1QixFQUMxQixNQUFNLCtCQUErQixDQUFDOztBQUV2QztJQUcwQyxnREFBc0I7SUEyQjVEO1FBQUEsWUFDSSxpQkFBTyxTQUNWO1FBM0JTLGtCQUFZLEdBQWEsc0JBQXNCLENBQUM7UUFDaEQsV0FBSyxHQUF1RDtZQUNsRSxNQUFNLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO1lBQzlELFFBQVEsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7WUFDaEUsU0FBUyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztZQUNuRSxpQkFBaUIsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMscUNBQXFDLENBQUM7WUFDM0YsU0FBUyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztZQUNyRSxVQUFVLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDO1lBQ3RFLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7WUFDOUQsUUFBUSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztZQUNsRSxlQUFlLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDO1lBQy9FLFdBQVcsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUM7WUFDeEUsZUFBZSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxtQ0FBbUMsQ0FBQztZQUN2RixVQUFVLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO1lBQ2xFLFdBQVcsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUM7WUFDeEUsUUFBUSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztZQUNsRSxrQkFBa0IsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsOEJBQThCLENBQUM7WUFDckYsZUFBZSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQztZQUMvRSxXQUFXLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDO1lBQ3hFLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUM7WUFDcEUsVUFBVSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztZQUN0RSxRQUFRLEVBQUcsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ25FLFVBQVUsRUFBRyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUM7U0FDMUUsQ0FBQzs7SUFJRixDQUFDOztnQkFoQ0osVUFBVSxTQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7Ozs7K0JBNUNEO0NBMkVDLEFBakNELENBRzBDLHNCQUFzQixHQThCL0Q7U0E5Qlksb0JBQW9COzs7Ozs7SUFFN0IsNENBQTBEOzs7OztJQUMxRCxxQ0FzQkUiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBEeW5hbWljQ29tcG9uZW50TWFwcGVyLCBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uLCBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9keW5hbWljLWNvbXBvbmVudC1tYXBwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7XG4gICAgQW1vdW50V2lkZ2V0Q29tcG9uZW50LFxuICAgIENoZWNrYm94V2lkZ2V0Q29tcG9uZW50LFxuICAgIENvbnRhaW5lcldpZGdldENvbXBvbmVudCxcbiAgICBEYXRlV2lkZ2V0Q29tcG9uZW50LFxuICAgIERpc3BsYXlUZXh0V2lkZ2V0Q29tcG9uZW50Q29tcG9uZW50LFxuICAgIERvY3VtZW50V2lkZ2V0Q29tcG9uZW50LFxuICAgIERyb3Bkb3duV2lkZ2V0Q29tcG9uZW50LFxuICAgIER5bmFtaWNUYWJsZVdpZGdldENvbXBvbmVudCxcbiAgICBGdW5jdGlvbmFsR3JvdXBXaWRnZXRDb21wb25lbnQsXG4gICAgSHlwZXJsaW5rV2lkZ2V0Q29tcG9uZW50LFxuICAgIE11bHRpbGluZVRleHRXaWRnZXRDb21wb25lbnRDb21wb25lbnQsXG4gICAgTnVtYmVyV2lkZ2V0Q29tcG9uZW50LFxuICAgIFBlb3BsZVdpZGdldENvbXBvbmVudCxcbiAgICBSYWRpb0J1dHRvbnNXaWRnZXRDb21wb25lbnQsXG4gICAgVGV4dFdpZGdldENvbXBvbmVudCxcbiAgICBUeXBlYWhlYWRXaWRnZXRDb21wb25lbnQsXG4gICAgVW5rbm93bldpZGdldENvbXBvbmVudCxcbiAgICBVcGxvYWRXaWRnZXRDb21wb25lbnQsXG4gICAgRGF0ZVRpbWVXaWRnZXRDb21wb25lbnRcbn0gZnJvbSAnLi8uLi9jb21wb25lbnRzL3dpZGdldHMvaW5kZXgnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1SZW5kZXJpbmdTZXJ2aWNlIGV4dGVuZHMgRHluYW1pY0NvbXBvbmVudE1hcHBlciB7XG5cbiAgICBwcm90ZWN0ZWQgZGVmYXVsdFZhbHVlOiBUeXBlPHt9PiA9IFVua25vd25XaWRnZXRDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIHR5cGVzOiB7IFtrZXk6IHN0cmluZ106IER5bmFtaWNDb21wb25lbnRSZXNvbHZlRnVuY3Rpb24gfSA9IHtcbiAgICAgICAgJ3RleHQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoVGV4dFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdzdHJpbmcnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoVGV4dFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdpbnRlZ2VyJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKE51bWJlcldpZGdldENvbXBvbmVudCksXG4gICAgICAgICdtdWx0aS1saW5lLXRleHQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoTXVsdGlsaW5lVGV4dFdpZGdldENvbXBvbmVudENvbXBvbmVudCksXG4gICAgICAgICdib29sZWFuJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENoZWNrYm94V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2Ryb3Bkb3duJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKERyb3Bkb3duV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2RhdGUnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRGF0ZVdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdhbW91bnQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQW1vdW50V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3JhZGlvLWJ1dHRvbnMnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoUmFkaW9CdXR0b25zV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2h5cGVybGluayc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShIeXBlcmxpbmtXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAncmVhZG9ubHktdGV4dCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEaXNwbGF5VGV4dFdpZGdldENvbXBvbmVudENvbXBvbmVudCksXG4gICAgICAgICdyZWFkb25seSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShUZXh0V2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3R5cGVhaGVhZCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShUeXBlYWhlYWRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAncGVvcGxlJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFBlb3BsZVdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdmdW5jdGlvbmFsLWdyb3VwJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKEZ1bmN0aW9uYWxHcm91cFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkeW5hbWljLXRhYmxlJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKER5bmFtaWNUYWJsZVdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdjb250YWluZXInOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoQ29udGFpbmVyV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ2dyb3VwJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENvbnRhaW5lcldpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkb2N1bWVudCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEb2N1bWVudFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICd1cGxvYWQnOiAgRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFVwbG9hZFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkYXRldGltZSc6ICBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRGF0ZVRpbWVXaWRnZXRDb21wb25lbnQpXG4gICAgfTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cbn1cbiJdfQ==