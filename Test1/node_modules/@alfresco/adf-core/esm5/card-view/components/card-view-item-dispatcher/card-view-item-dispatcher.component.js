/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ComponentFactoryResolver, Input, ViewChild } from '@angular/core';
import { CardItemTypeService } from '../../services/card-item-types.service';
import { CardViewContentProxyDirective } from '../../directives/card-view-content-proxy.directive';
var CardViewItemDispatcherComponent = /** @class */ (function () {
    function CardViewItemDispatcherComponent(cardItemTypeService, resolver) {
        var _this = this;
        this.cardItemTypeService = cardItemTypeService;
        this.resolver = resolver;
        this.displayEmpty = true;
        this.displayNoneOption = true;
        this.displayClearAction = true;
        this.loaded = false;
        this.componentReference = null;
        /** @type {?} */
        var dynamicLifeCycleMethods = [
            'ngOnInit',
            'ngDoCheck',
            'ngAfterContentInit',
            'ngAfterContentChecked',
            'ngAfterViewInit',
            'ngAfterViewChecked',
            'ngOnDestroy'
        ];
        dynamicLifeCycleMethods.forEach((/**
         * @param {?} method
         * @return {?}
         */
        function (method) {
            _this[method] = _this.proxy.bind(_this, method);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    CardViewItemDispatcherComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (!this.loaded) {
            this.loadComponent();
            this.loaded = true;
        }
        Object.keys(changes)
            .map((/**
         * @param {?} changeName
         * @return {?}
         */
        function (changeName) { return [changeName, changes[changeName]]; }))
            .forEach((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), inputParamName = _b[0], simpleChange = _b[1];
            _this.componentReference.instance[inputParamName] = simpleChange.currentValue;
        }));
        this.proxy('ngOnChanges', changes);
    };
    /**
     * @private
     * @return {?}
     */
    CardViewItemDispatcherComponent.prototype.loadComponent = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var factoryClass = this.cardItemTypeService.resolveComponentType(this.property);
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(factoryClass);
        this.componentReference = this.content.viewContainerRef.createComponent(factory);
        this.componentReference.instance.editable = this.editable;
        this.componentReference.instance.property = this.property;
        this.componentReference.instance.displayEmpty = this.displayEmpty;
        this.componentReference.instance.displayNoneOption = this.displayNoneOption;
        this.componentReference.instance.displayClearAction = this.displayClearAction;
    };
    /**
     * @private
     * @param {?} methodName
     * @param {...?} args
     * @return {?}
     */
    CardViewItemDispatcherComponent.prototype.proxy = /**
     * @private
     * @param {?} methodName
     * @param {...?} args
     * @return {?}
     */
    function (methodName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.componentReference.instance[methodName]) {
            this.componentReference.instance[methodName].apply(this.componentReference.instance, args);
        }
    };
    CardViewItemDispatcherComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-card-view-item-dispatcher',
                    template: '<ng-template adf-card-view-content-proxy></ng-template>'
                }] }
    ];
    /** @nocollapse */
    CardViewItemDispatcherComponent.ctorParameters = function () { return [
        { type: CardItemTypeService },
        { type: ComponentFactoryResolver }
    ]; };
    CardViewItemDispatcherComponent.propDecorators = {
        property: [{ type: Input }],
        editable: [{ type: Input }],
        displayEmpty: [{ type: Input }],
        displayNoneOption: [{ type: Input }],
        displayClearAction: [{ type: Input }],
        content: [{ type: ViewChild, args: [CardViewContentProxyDirective,] }]
    };
    return CardViewItemDispatcherComponent;
}());
export { CardViewItemDispatcherComponent };
if (false) {
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.property;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.editable;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.displayEmpty;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.displayNoneOption;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.displayClearAction;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.content;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.loaded;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.componentReference;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.ngOnInit;
    /** @type {?} */
    CardViewItemDispatcherComponent.prototype.ngDoCheck;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.cardItemTypeService;
    /**
     * @type {?}
     * @private
     */
    CardViewItemDispatcherComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,