/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:no-input-rename  */
/* tslint:disable:rxjs-no-subject-value */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
import { Pagination } from '@alfresco/js-api';
import { takeUntil } from 'rxjs/operators';
var InfinitePaginationComponent = /** @class */ (function () {
    function InfinitePaginationComponent(cdr, userPreferencesService) {
        this.cdr = cdr;
        this.userPreferencesService = userPreferencesService;
        this.onDestroy$ = new Subject();
        /**
         * Is a new page loading?
         */
        this.isLoading = false;
        /**
         * Emitted when the "Load More" button is clicked.
         */
        this.loadMore = new EventEmitter();
        this.pagination = InfinitePaginationComponent.DEFAULT_PAGINATION;
        this.requestPaginationModel = {
            skipCount: 0,
            merge: true
        };
    }
    Object.defineProperty(InfinitePaginationComponent.prototype, "target", {
        get: /**
         * @return {?}
         */
        function () {
            return this._target;
        },
        /** Component that provides custom pagination support. */
        set: /**
         * Component that provides custom pagination support.
         * @param {?} target
         * @return {?}
         */
        function (target) {
            var _this = this;
            if (target) {
                this._target = target;
                target.pagination
                    .pipe(takeUntil(this.onDestroy$))
                    .subscribe((/**
                 * @param {?} pagination
                 * @return {?}
                 */
                function (pagination) {
                    _this.isLoading = false;
                    _this.pagination = pagination;
                    if (!_this.pagination.hasMoreItems) {
                        _this.pagination.hasMoreItems = false;
                    }
                    _this.cdr.detectChanges();
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.userPreferencesService
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} pageSize
         * @return {?}
         */
        function (pageSize) {
            _this.pageSize = _this.pageSize || pageSize;
            _this.requestPaginationModel.maxItems = _this.pageSize;
        }));
    };
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.onLoadMore = /**
     * @return {?}
     */
    function () {
        this.requestPaginationModel.skipCount = 0;
        this.requestPaginationModel.merge = false;
        this.requestPaginationModel.maxItems += this.pageSize;
        this.loadMore.next(this.requestPaginationModel);
        if (this._target) {
            this.isLoading = true;
            this._target.updatePagination((/** @type {?} */ (this.requestPaginationModel)));
        }
    };
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.reset = /**
     * @return {?}
     */
    function () {
        this.pagination.skipCount = 0;
        this.pagination.maxItems = this.pageSize;
        if (this._target) {
            this._target.updatePagination(this.pagination);
        }
    };
    /**
     * @return {?}
     */
    InfinitePaginationComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    };
    InfinitePaginationComponent.DEFAULT_PAGINATION = new Pagination({
        skipCount: 0,
        maxItems: 25,
        totalItems: 0
    });
    InfinitePaginationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-infinite-pagination',
                    host: { 'class': 'infinite-adf-pagination' },
                    template: "<div *ngIf=\"pagination?.hasMoreItems || isLoading\" class=\"adf-infinite-pagination\">\n\n    <button mat-button\n        *ngIf=\"!isLoading\"\n        class=\"adf-infinite-pagination-load-more\"\n        (click)=\"onLoadMore()\"\n        data-automation-id=\"adf-infinite-pagination-button\">\n            <ng-content></ng-content>\n    </button>\n\n    <mat-progress-bar *ngIf=\"isLoading\"\n        mode=\"indeterminate\"\n        class=\"adf-infinite-pagination-spinner\"\n        data-automation-id=\"adf-infinite-pagination-spinner\"></mat-progress-bar>\n</div>\n",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-infinite-pagination{display:flex;justify-content:space-around;min-height:56px}.adf-infinite-pagination-load-more{margin-bottom:10px;margin-top:10px}"]
                }] }
    ];
    /** @nocollapse */
    InfinitePaginationComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: UserPreferencesService }
    ]; };
    InfinitePaginationComponent.propDecorators = {
        target: [{ type: Input }],
        pageSize: [{ type: Input }],
        isLoading: [{ type: Input, args: ['loading',] }],
        loadMore: [{ type: Output }]
    };
    return InfinitePaginationComponent;
}());
export { InfinitePaginationComponent };
if (false) {
    /** @type {?} */
    InfinitePaginationComponent.DEFAULT_PAGINATION;
    /** @type {?} */
    InfinitePaginationComponent.prototype._target;
    /**
     * @type {?}
     * @private
     */
    InfinitePaginationComponent.prototype.onDestroy$;
    /**
     * Number of items that are added with each "load more" event.
     * @type {?}
     */
    InfinitePaginationComponent.prototype.pageSize;
    /**
     * Is a new page loading?
     * @type {?}
     */
    InfinitePaginationComponent.prototype.isLoading;
    /**
     * Emitted when the "Load More" button is clicked.
     * @type {?}
     */
    InfinitePaginationComponent.prototype.loadMore;
    /** @type {?} */
    InfinitePaginationComponent.prototype.pagination;
    /** @type {?} */
    InfinitePaginationComponent.prototype.requestPaginationModel;
    /**
     * @type {?}
     * @private
     */
    InfinitePaginationComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    InfinitePaginationComponent.prototype.userPreferencesService;
}
//# sourceMappingURL=data:application/json;base64,