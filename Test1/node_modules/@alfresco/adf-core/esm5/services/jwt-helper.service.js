/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var JwtHelperService = /** @class */ (function () {
    function JwtHelperService() {
    }
    /**
     * Decodes a JSON web token into a JS object.
     * @param token Token in encoded form
     * @returns Decoded token data object
     */
    /**
     * Decodes a JSON web token into a JS object.
     * @param {?} token Token in encoded form
     * @return {?} Decoded token data object
     */
    JwtHelperService.prototype.decodeToken = /**
     * Decodes a JSON web token into a JS object.
     * @param {?} token Token in encoded form
     * @return {?} Decoded token data object
     */
    function (token) {
        /** @type {?} */
        var parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        /** @type {?} */
        var decoded = this.urlBase64Decode(parts[1]);
        if (!decoded) {
            throw new Error('Cannot decode the token');
        }
        return JSON.parse(decoded);
    };
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    JwtHelperService.prototype.urlBase64Decode = /**
     * @private
     * @param {?} token
     * @return {?}
     */
    function (token) {
        /** @type {?} */
        var output = token.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0: {
                break;
            }
            case 2: {
                output += '==';
                break;
            }
            case 3: {
                output += '=';
                break;
            }
            default: {
                throw new Error('Illegal base64url string!');
            }
        }
        return decodeURIComponent(escape(window.atob(output)));
    };
    /**
     * Gets a named value from the user access token.
     * @param key Key name of the field to retrieve
     * @returns Value from the token
     */
    /**
     * Gets a named value from the user access token.
     * @template T
     * @param {?} key Key name of the field to retrieve
     * @return {?} Value from the token
     */
    JwtHelperService.prototype.getValueFromLocalAccessToken = /**
     * Gets a named value from the user access token.
     * @template T
     * @param {?} key Key name of the field to retrieve
     * @return {?} Value from the token
     */
    function (key) {
        return this.getValueFromToken(this.getAccessToken(), key);
    };
    /**
     * Gets access token
     * @returns access token
     */
    /**
     * Gets access token
     * @return {?} access token
     */
    JwtHelperService.prototype.getAccessToken = /**
     * Gets access token
     * @return {?} access token
     */
    function () {
        return localStorage.getItem(JwtHelperService.USER_ACCESS_TOKEN);
    };
    /**
     * Gets a named value from the user access token.
     * @param key accessToken
     * @param key Key name of the field to retrieve
     * @returns Value from the token
     */
    /**
     * Gets a named value from the user access token.
     * @template T
     * @param {?} accessToken
     * @param {?} key accessToken
     * @return {?} Value from the token
     */
    JwtHelperService.prototype.getValueFromToken = /**
     * Gets a named value from the user access token.
     * @template T
     * @param {?} accessToken
     * @param {?} key accessToken
     * @return {?} Value from the token
     */
    function (accessToken, key) {
        /** @type {?} */
        var value;
        if (accessToken) {
            /** @type {?} */
            var tokenPayload = this.decodeToken(accessToken);
            value = tokenPayload[key];
        }
        return (/** @type {?} */ (value));
    };
    JwtHelperService.USER_NAME = 'name';
    JwtHelperService.FAMILY_NAME = 'family_name';
    JwtHelperService.GIVEN_NAME = 'given_name';
    JwtHelperService.USER_EMAIL = 'email';
    JwtHelperService.USER_ACCESS_TOKEN = 'access_token';
    JwtHelperService.USER_PREFERRED_USERNAME = 'preferred_username';
    JwtHelperService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JwtHelperService.ctorParameters = function () { return []; };
    /** @nocollapse */ JwtHelperService.ngInjectableDef = i0.defineInjectable({ factory: function JwtHelperService_Factory() { return new JwtHelperService(); }, token: JwtHelperService, providedIn: "root" });
    return JwtHelperService;
}());
export { JwtHelperService };
if (false) {
    /** @type {?} */
    JwtHelperService.USER_NAME;
    /** @type {?} */
    JwtHelperService.FAMILY_NAME;
    /** @type {?} */
    JwtHelperService.GIVEN_NAME;
    /** @type {?} */
    JwtHelperService.USER_EMAIL;
    /** @type {?} */
    JwtHelperService.USER_ACCESS_TOKEN;
    /** @type {?} */
    JwtHelperService.USER_PREFERRED_USERNAME;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWhlbHBlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvand0LWhlbHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBRTNDO0lBWUk7SUFDQSxDQUFDO0lBRUQ7Ozs7T0FJRzs7Ozs7O0lBQ0gsc0NBQVc7Ozs7O0lBQVgsVUFBWSxLQUFLOztZQUNQLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUU5QixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUM1Qzs7WUFFSyxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUM5QztRQUVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFFTywwQ0FBZTs7Ozs7SUFBdkIsVUFBd0IsS0FBSzs7WUFDckIsTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDO1FBQ3hELFFBQVEsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkIsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDSixNQUFNO2FBQ1Q7WUFDRCxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNKLE1BQU0sSUFBSSxJQUFJLENBQUM7Z0JBQ2YsTUFBTTthQUNUO1lBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDSixNQUFNLElBQUksR0FBRyxDQUFDO2dCQUNkLE1BQU07YUFDVDtZQUNELE9BQU8sQ0FBQyxDQUFDO2dCQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQzthQUNoRDtTQUNKO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7SUFDSCx1REFBNEI7Ozs7OztJQUE1QixVQUFnQyxHQUFXO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQ7OztPQUdHOzs7OztJQUNILHlDQUFjOzs7O0lBQWQ7UUFDSSxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7O0lBQ0gsNENBQWlCOzs7Ozs7O0lBQWpCLFVBQXFCLFdBQW1CLEVBQUUsR0FBVzs7WUFDN0MsS0FBSztRQUNULElBQUksV0FBVyxFQUFFOztnQkFDUCxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUM7WUFDbEQsS0FBSyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM3QjtRQUNELE9BQU8sbUJBQUksS0FBSyxFQUFBLENBQUM7SUFDckIsQ0FBQztJQWpGTSwwQkFBUyxHQUFHLE1BQU0sQ0FBQztJQUNuQiw0QkFBVyxHQUFHLGFBQWEsQ0FBQztJQUM1QiwyQkFBVSxHQUFHLFlBQVksQ0FBQztJQUMxQiwyQkFBVSxHQUFHLE9BQU8sQ0FBQztJQUNyQixrQ0FBaUIsR0FBRyxjQUFjLENBQUM7SUFDbkMsd0NBQXVCLEdBQUcsb0JBQW9CLENBQUM7O2dCQVZ6RCxVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7OzsyQkFyQkQ7Q0EwR0MsQUF2RkQsSUF1RkM7U0FwRlksZ0JBQWdCOzs7SUFFekIsMkJBQTBCOztJQUMxQiw2QkFBbUM7O0lBQ25DLDRCQUFpQzs7SUFDakMsNEJBQTRCOztJQUM1QixtQ0FBMEM7O0lBQzFDLHlDQUFzRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBKd3RIZWxwZXJTZXJ2aWNlIHtcblxuICAgIHN0YXRpYyBVU0VSX05BTUUgPSAnbmFtZSc7XG4gICAgc3RhdGljIEZBTUlMWV9OQU1FID0gJ2ZhbWlseV9uYW1lJztcbiAgICBzdGF0aWMgR0lWRU5fTkFNRSA9ICdnaXZlbl9uYW1lJztcbiAgICBzdGF0aWMgVVNFUl9FTUFJTCA9ICdlbWFpbCc7XG4gICAgc3RhdGljIFVTRVJfQUNDRVNTX1RPS0VOID0gJ2FjY2Vzc190b2tlbic7XG4gICAgc3RhdGljIFVTRVJfUFJFRkVSUkVEX1VTRVJOQU1FID0gJ3ByZWZlcnJlZF91c2VybmFtZSc7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgSlNPTiB3ZWIgdG9rZW4gaW50byBhIEpTIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gdG9rZW4gVG9rZW4gaW4gZW5jb2RlZCBmb3JtXG4gICAgICogQHJldHVybnMgRGVjb2RlZCB0b2tlbiBkYXRhIG9iamVjdFxuICAgICAqL1xuICAgIGRlY29kZVRva2VuKHRva2VuKTogT2JqZWN0IHtcbiAgICAgICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xuXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSldUIG11c3QgaGF2ZSAzIHBhcnRzJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWNvZGVkID0gdGhpcy51cmxCYXNlNjREZWNvZGUocGFydHNbMV0pO1xuICAgICAgICBpZiAoIWRlY29kZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRlY29kZSB0aGUgdG9rZW4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRlY29kZWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXJsQmFzZTY0RGVjb2RlKHRva2VuKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IG91dHB1dCA9IHRva2VuLnJlcGxhY2UoLy0vZywgJysnKS5yZXBsYWNlKC9fL2csICcvJyk7XG4gICAgICAgIHN3aXRjaCAob3V0cHV0Lmxlbmd0aCAlIDQpIHtcbiAgICAgICAgICAgIGNhc2UgMDoge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAyOiB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9ICc9PSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gJz0nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBiYXNlNjR1cmwgc3RyaW5nIScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHdpbmRvdy5hdG9iKG91dHB1dCkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgbmFtZWQgdmFsdWUgZnJvbSB0aGUgdXNlciBhY2Nlc3MgdG9rZW4uXG4gICAgICogQHBhcmFtIGtleSBLZXkgbmFtZSBvZiB0aGUgZmllbGQgdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyBWYWx1ZSBmcm9tIHRoZSB0b2tlblxuICAgICAqL1xuICAgIGdldFZhbHVlRnJvbUxvY2FsQWNjZXNzVG9rZW48VD4oa2V5OiBzdHJpbmcpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVGcm9tVG9rZW4odGhpcy5nZXRBY2Nlc3NUb2tlbigpLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWNjZXNzIHRva2VuXG4gICAgICogQHJldHVybnMgYWNjZXNzIHRva2VuXG4gICAgICovXG4gICAgZ2V0QWNjZXNzVG9rZW4oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKEp3dEhlbHBlclNlcnZpY2UuVVNFUl9BQ0NFU1NfVE9LRU4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuYW1lZCB2YWx1ZSBmcm9tIHRoZSB1c2VyIGFjY2VzcyB0b2tlbi5cbiAgICAgKiBAcGFyYW0ga2V5IGFjY2Vzc1Rva2VuXG4gICAgICogQHBhcmFtIGtleSBLZXkgbmFtZSBvZiB0aGUgZmllbGQgdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyBWYWx1ZSBmcm9tIHRoZSB0b2tlblxuICAgICAqL1xuICAgIGdldFZhbHVlRnJvbVRva2VuPFQ+KGFjY2Vzc1Rva2VuOiBzdHJpbmcsIGtleTogc3RyaW5nKTogVCB7XG4gICAgICAgIGxldCB2YWx1ZTtcbiAgICAgICAgaWYgKGFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlblBheWxvYWQgPSB0aGlzLmRlY29kZVRva2VuKGFjY2Vzc1Rva2VuKTtcbiAgICAgICAgICAgIHZhbHVlID0gdG9rZW5QYXlsb2FkW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDxUPiB2YWx1ZTtcbiAgICB9XG59XG4iXX0=