/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { EcmUserService } from '../userinfo/services/ecm-user.service';
import { PeopleProcessService } from '../services/people-process.service';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var CommentListComponent = /** @class */ (function () {
    function CommentListComponent(peopleProcessService, ecmUserService, userPreferenceService) {
        this.peopleProcessService = peopleProcessService;
        this.ecmUserService = ecmUserService;
        this.userPreferenceService = userPreferenceService;
        /**
         * Emitted when the user clicks on one of the comment rows.
         */
        this.clickRow = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    CommentListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.userPreferenceService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        function (locale) { return _this.currentLocale = locale; }));
    };
    /**
     * @return {?}
     */
    CommentListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    };
    /**
     * @param {?} comment
     * @return {?}
     */
    CommentListComponent.prototype.selectComment = /**
     * @param {?} comment
     * @return {?}
     */
    function (comment) {
        if (this.selectedComment) {
            this.selectedComment.isSelected = false;
        }
        comment.isSelected = true;
        this.selectedComment = comment;
        this.clickRow.emit(this.selectedComment);
    };
    /**
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.getUserShortName = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        /** @type {?} */
        var shortName = '';
        if (user) {
            if (user.firstName) {
                shortName = user.firstName[0].toUpperCase();
            }
            if (user.lastName) {
                shortName += user.lastName[0].toUpperCase();
            }
        }
        return shortName;
    };
    /**
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.isPictureDefined = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        return user.pictureId || user.avatarId;
    };
    /**
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.getUserImage = /**
     * @param {?} user
     * @return {?}
     */
    function (user) {
        if (this.isAContentUsers(user)) {
            return this.ecmUserService.getUserProfileImage(user.avatarId);
        }
        else {
            return this.peopleProcessService.getUserImage(user);
        }
    };
    /**
     * @private
     * @param {?} user
     * @return {?}
     */
    CommentListComponent.prototype.isAContentUsers = /**
     * @private
     * @param {?} user
     * @return {?}
     */
    function (user) {
        return user.avatarId;
    };
    CommentListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-comment-list',
                    template: " <mat-list class=\"adf-comment-list\">\n    <mat-list-item *ngFor=\"let comment of comments\"\n                  (click)=\"selectComment(comment)\"\n                  class=\"adf-comment-list-item\"\n                  [class.adf-is-selected]=\"comment.isSelected\"\n                  id=\"adf-comment-{{comment?.id}}\">\n        <div id=\"comment-user-icon\" class=\"adf-comment-img-container\">\n            <div\n                *ngIf=\"!isPictureDefined(comment.createdBy)\"\n                class=\"adf-comment-user-icon\">\n                {{getUserShortName(comment.createdBy)}}\n            </div>\n            <div>\n                <img [alt]=\"comment.createdBy\" *ngIf=\"isPictureDefined(comment.createdBy)\"\n                      class=\"adf-people-img\"\n                     [src]=\"getUserImage(comment.createdBy)\" />\n            </div>\n        </div>\n        <div class=\"adf-comment-contents\">\n            <div matLine id=\"comment-user\" class=\"adf-comment-user-name\">\n                {{comment.createdBy?.firstName}} {{comment.createdBy?.lastName}}\n            </div>\n            <div matLine id=\"comment-message\" class=\"adf-comment-message\" [innerHTML]=\"comment.message\"></div>\n            <div matLine id=\"comment-time\" class=\"adf-comment-message-time\">\n                {{ comment.created | adfTimeAgo: currentLocale }}\n            </div>\n        </div>\n    </mat-list-item>\n</mat-list>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CommentListComponent.ctorParameters = function () { return [
        { type: PeopleProcessService },
        { type: EcmUserService },
        { type: UserPreferencesService }
    ]; };
    CommentListComponent.propDecorators = {
        comments: [{ type: Input }],
        clickRow: [{ type: Output }]
    };
    return CommentListComponent;
}());
export { CommentListComponent };
if (false) {
    /**
     * The comments data used to populate the list.
     * @type {?}
     */
    CommentListComponent.prototype.comments;
    /**
     * Emitted when the user clicks on one of the comment rows.
     * @type {?}
     */
    CommentListComponent.prototype.clickRow;
    /** @type {?} */
    CommentListComponent.prototype.selectedComment;
    /** @type {?} */
    CommentListComponent.prototype.currentLocale;
    /**
     * @type {?}
     * @private
     */
    CommentListComponent.prototype.onDestroy$;
    /** @type {?} */
    CommentListComponent.prototype.peopleProcessService;
    /** @type {?} */
    CommentListComponent.prototype.ecmUserService;
    /** @type {?} */
    CommentListComponent.prototype.userPreferenceService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWVudC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImNvbW1lbnRzL2NvbW1lbnQtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFFN0csT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDO0lBcUJJLDhCQUFtQixvQkFBMEMsRUFDMUMsY0FBOEIsRUFDOUIscUJBQTZDO1FBRjdDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBd0I7Ozs7UUFSaEUsYUFBUSxHQUErQixJQUFJLFlBQVksRUFBZ0IsQ0FBQztRQUloRSxlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztJQUs1QyxDQUFDOzs7O0lBRUQsdUNBQVE7OztJQUFSO1FBQUEsaUJBS0M7UUFKRyxJQUFJLENBQUMscUJBQXFCO2FBQ3JCLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7YUFDbkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDaEMsU0FBUzs7OztRQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsS0FBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLEVBQTNCLENBQTJCLEVBQUMsQ0FBQztJQUMxRCxDQUFDOzs7O0lBRUQsMENBQVc7OztJQUFYO1FBQ0ksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7OztJQUVELDRDQUFhOzs7O0lBQWIsVUFBYyxPQUFxQjtRQUMvQixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBRUQsK0NBQWdCOzs7O0lBQWhCLFVBQWlCLElBQVM7O1lBQ2xCLFNBQVMsR0FBRyxFQUFFO1FBQ2xCLElBQUksSUFBSSxFQUFFO1lBQ04sSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNoQixTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUMvQztZQUNELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDZixTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUMvQztTQUNKO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCwrQ0FBZ0I7Ozs7SUFBaEIsVUFBaUIsSUFBUztRQUN0QixPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUMzQyxDQUFDOzs7OztJQUVELDJDQUFZOzs7O0lBQVosVUFBYSxJQUFTO1FBQ2xCLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2pFO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkQ7SUFDTCxDQUFDOzs7Ozs7SUFFTyw4Q0FBZTs7Ozs7SUFBdkIsVUFBd0IsSUFBUztRQUM3QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQzs7Z0JBMUVKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1Qix5NkNBQTRDO29CQUU1QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7aUJBQ3hDOzs7O2dCQVZRLG9CQUFvQjtnQkFEcEIsY0FBYztnQkFFZCxzQkFBc0I7OzsyQkFjMUIsS0FBSzsyQkFJTCxNQUFNOztJQTZEWCwyQkFBQztDQUFBLEFBM0VELElBMkVDO1NBcEVZLG9CQUFvQjs7Ozs7O0lBRzdCLHdDQUN5Qjs7Ozs7SUFHekIsd0NBQ3dFOztJQUV4RSwrQ0FBOEI7O0lBQzlCLDZDQUFjOzs7OztJQUNkLDBDQUE0Qzs7SUFFaEMsb0RBQWlEOztJQUNqRCw4Q0FBcUM7O0lBQ3JDLHFEQUFvRCIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3RW5jYXBzdWxhdGlvbiwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1lbnRNb2RlbCB9IGZyb20gJy4uL21vZGVscy9jb21tZW50Lm1vZGVsJztcbmltcG9ydCB7IEVjbVVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vdXNlcmluZm8vc2VydmljZXMvZWNtLXVzZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQZW9wbGVQcm9jZXNzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3Blb3BsZS1wcm9jZXNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclByZWZlcmVuY2VzU2VydmljZSwgVXNlclByZWZlcmVuY2VWYWx1ZXMgfSBmcm9tICcuLi9zZXJ2aWNlcy91c2VyLXByZWZlcmVuY2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1jb21tZW50LWxpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb21tZW50LWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2NvbW1lbnQtbGlzdC5jb21wb25lbnQuc2NzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5cbmV4cG9ydCBjbGFzcyBDb21tZW50TGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAgIC8qKiBUaGUgY29tbWVudHMgZGF0YSB1c2VkIHRvIHBvcHVsYXRlIHRoZSBsaXN0LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgY29tbWVudHM6IENvbW1lbnRNb2RlbFtdO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gb25lIG9mIHRoZSBjb21tZW50IHJvd3MuICovXG4gICAgQE91dHB1dCgpXG4gICAgY2xpY2tSb3c6IEV2ZW50RW1pdHRlcjxDb21tZW50TW9kZWw+ID0gbmV3IEV2ZW50RW1pdHRlcjxDb21tZW50TW9kZWw+KCk7XG5cbiAgICBzZWxlY3RlZENvbW1lbnQ6IENvbW1lbnRNb2RlbDtcbiAgICBjdXJyZW50TG9jYWxlO1xuICAgIHByaXZhdGUgb25EZXN0cm95JCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGVvcGxlUHJvY2Vzc1NlcnZpY2U6IFBlb3BsZVByb2Nlc3NTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBlY21Vc2VyU2VydmljZTogRWNtVXNlclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHVibGljIHVzZXJQcmVmZXJlbmNlU2VydmljZTogVXNlclByZWZlcmVuY2VzU2VydmljZSkge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlU2VydmljZVxuICAgICAgICAgICAgLnNlbGVjdChVc2VyUHJlZmVyZW5jZVZhbHVlcy5Mb2NhbGUpXG4gICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5vbkRlc3Ryb3kkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUobG9jYWxlID0+IHRoaXMuY3VycmVudExvY2FsZSA9IGxvY2FsZSk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBzZWxlY3RDb21tZW50KGNvbW1lbnQ6IENvbW1lbnRNb2RlbCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZENvbW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRDb21tZW50LmlzU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb21tZW50LmlzU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkQ29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIHRoaXMuY2xpY2tSb3cuZW1pdCh0aGlzLnNlbGVjdGVkQ29tbWVudCk7XG4gICAgfVxuXG4gICAgZ2V0VXNlclNob3J0TmFtZSh1c2VyOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBsZXQgc2hvcnROYW1lID0gJyc7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICBpZiAodXNlci5maXJzdE5hbWUpIHtcbiAgICAgICAgICAgICAgICBzaG9ydE5hbWUgPSB1c2VyLmZpcnN0TmFtZVswXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVzZXIubGFzdE5hbWUpIHtcbiAgICAgICAgICAgICAgICBzaG9ydE5hbWUgKz0gdXNlci5sYXN0TmFtZVswXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaG9ydE5hbWU7XG4gICAgfVxuXG4gICAgaXNQaWN0dXJlRGVmaW5lZCh1c2VyOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHVzZXIucGljdHVyZUlkIHx8IHVzZXIuYXZhdGFySWQ7XG4gICAgfVxuXG4gICAgZ2V0VXNlckltYWdlKHVzZXI6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLmlzQUNvbnRlbnRVc2Vycyh1c2VyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWNtVXNlclNlcnZpY2UuZ2V0VXNlclByb2ZpbGVJbWFnZSh1c2VyLmF2YXRhcklkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBlb3BsZVByb2Nlc3NTZXJ2aWNlLmdldFVzZXJJbWFnZSh1c2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNBQ29udGVudFVzZXJzKHVzZXI6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdXNlci5hdmF0YXJJZDtcbiAgICB9XG59XG4iXX0=