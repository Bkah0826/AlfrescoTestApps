/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { of, from, throwError } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { IdentityUserModel } from '../models/identity-user.model';
import { JwtHelperService } from '../../services/jwt-helper.service';
import { LogService } from '../../services/log.service';
import { AppConfigService } from '../../app-config/app-config.service';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/jwt-helper.service";
import * as i2 from "../../services/alfresco-api.service";
import * as i3 from "../../app-config/app-config.service";
import * as i4 from "../../services/log.service";
var IdentityUserService = /** @class */ (function () {
    function IdentityUserService(jwtHelperService, alfrescoApiService, appConfigService, logService) {
        this.jwtHelperService = jwtHelperService;
        this.alfrescoApiService = alfrescoApiService;
        this.appConfigService = appConfigService;
        this.logService = logService;
    }
    /**
     * Gets the name and other basic details of the current user.
     * @returns The user's details
     */
    /**
     * Gets the name and other basic details of the current user.
     * @return {?} The user's details
     */
    IdentityUserService.prototype.getCurrentUserInfo = /**
     * Gets the name and other basic details of the current user.
     * @return {?} The user's details
     */
    function () {
        /** @type {?} */
        var familyName = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.FAMILY_NAME);
        /** @type {?} */
        var givenName = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.GIVEN_NAME);
        /** @type {?} */
        var email = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.USER_EMAIL);
        /** @type {?} */
        var username = this.jwtHelperService.getValueFromLocalAccessToken(JwtHelperService.USER_PREFERRED_USERNAME);
        /** @type {?} */
        var user = { firstName: givenName, lastName: familyName, email: email, username: username };
        return new IdentityUserModel(user);
    };
    /**
     * Find users based on search input.
     * @param search Search query string
     * @returns List of users
     */
    /**
     * Find users based on search input.
     * @param {?} search Search query string
     * @return {?} List of users
     */
    IdentityUserService.prototype.findUsersByName = /**
     * Find users based on search input.
     * @param {?} search Search query string
     * @return {?} List of users
     */
    function (search) {
        if (search === '') {
            return of([]);
        }
        /** @type {?} */
        var url = this.buildUserUrl();
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = { search: search };
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return (from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)));
    };
    /**
     * Find users based on username input.
     * @param username Search query string
     * @returns List of users
     */
    /**
     * Find users based on username input.
     * @param {?} username Search query string
     * @return {?} List of users
     */
    IdentityUserService.prototype.findUserByUsername = /**
     * Find users based on username input.
     * @param {?} username Search query string
     * @return {?} List of users
     */
    function (username) {
        if (username === '') {
            return of([]);
        }
        /** @type {?} */
        var url = this.buildUserUrl();
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = { username: username };
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return (from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)));
    };
    /**
     * Find users based on email input.
     * @param email Search query string
     * @returns List of users
     */
    /**
     * Find users based on email input.
     * @param {?} email Search query string
     * @return {?} List of users
     */
    IdentityUserService.prototype.findUserByEmail = /**
     * Find users based on email input.
     * @param {?} email Search query string
     * @return {?} List of users
     */
    function (email) {
        if (email === '') {
            return of([]);
        }
        /** @type {?} */
        var url = this.buildUserUrl();
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = { email: email };
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return (from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)));
    };
    /**
     * Find users based on id input.
     * @param id Search query string
     * @returns users object
     */
    /**
     * Find users based on id input.
     * @param {?} id Search query string
     * @return {?} users object
     */
    IdentityUserService.prototype.findUserById = /**
     * Find users based on id input.
     * @param {?} id Search query string
     * @return {?} users object
     */
    function (id) {
        if (id === '') {
            return of([]);
        }
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + id;
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return (from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)));
    };
    /**
     * Get client roles of a user for a particular client.
     * @param userId ID of the target user
     * @param clientId ID of the client app
     * @returns List of client roles
     */
    /**
     * Get client roles of a user for a particular client.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @return {?} List of client roles
     */
    IdentityUserService.prototype.getClientRoles = /**
     * Get client roles of a user for a particular client.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @return {?} List of client roles
     */
    function (userId, clientId) {
        /** @type {?} */
        var url = this.buildUserClientRoleMapping(userId, clientId);
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null));
    };
    /**
     * Checks whether user has access to a client app.
     * @param userId ID of the target user
     * @param clientId ID of the client app
     * @returns True if the user has access, false otherwise
     */
    /**
     * Checks whether user has access to a client app.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @return {?} True if the user has access, false otherwise
     */
    IdentityUserService.prototype.checkUserHasClientApp = /**
     * Checks whether user has access to a client app.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @return {?} True if the user has access, false otherwise
     */
    function (userId, clientId) {
        return this.getClientRoles(userId, clientId).pipe(map((/**
         * @param {?} clientRoles
         * @return {?}
         */
        function (clientRoles) {
            if (clientRoles.length > 0) {
                return true;
            }
            return false;
        })));
    };
    /**
     * Checks whether a user has any of the client app roles.
     * @param userId ID of the target user
     * @param clientId ID of the client app
     * @param roleNames List of role names to check for
     * @returns True if the user has one or more of the roles, false otherwise
     */
    /**
     * Checks whether a user has any of the client app roles.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @param {?} roleNames List of role names to check for
     * @return {?} True if the user has one or more of the roles, false otherwise
     */
    IdentityUserService.prototype.checkUserHasAnyClientAppRole = /**
     * Checks whether a user has any of the client app roles.
     * @param {?} userId ID of the target user
     * @param {?} clientId ID of the client app
     * @param {?} roleNames List of role names to check for
     * @return {?} True if the user has one or more of the roles, false otherwise
     */
    function (userId, clientId, roleNames) {
        return this.getClientRoles(userId, clientId).pipe(map((/**
         * @param {?} clientRoles
         * @return {?}
         */
        function (clientRoles) {
            /** @type {?} */
            var hasRole = false;
            if (clientRoles.length > 0) {
                roleNames.forEach((/**
                 * @param {?} roleName
                 * @return {?}
                 */
                function (roleName) {
                    /** @type {?} */
                    var role = clientRoles.find((/**
                     * @param {?} availableRole
                     * @return {?}
                     */
                    function (availableRole) {
                        return availableRole.name === roleName;
                    }));
                    if (role) {
                        hasRole = true;
                        return;
                    }
                }));
            }
            return hasRole;
        })));
    };
    /**
     * Gets the client ID for an application.
     * @param applicationName Name of the application
     * @returns Client ID string
     */
    /**
     * Gets the client ID for an application.
     * @param {?} applicationName Name of the application
     * @return {?} Client ID string
     */
    IdentityUserService.prototype.getClientIdByApplicationName = /**
     * Gets the client ID for an application.
     * @param {?} applicationName Name of the application
     * @return {?} Client ID string
     */
    function (applicationName) {
        /** @type {?} */
        var url = this.buildGetClientsUrl();
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = { clientId: applicationName };
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance()
            .oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var clientId = response && response.length > 0 ? response[0].id : '';
            return clientId;
        })));
    };
    /**
     * Checks if a user has access to an application.
     * @param userId ID of the user
     * @param applicationName Name of the application
     * @returns True if the user has access, false otherwise
     */
    /**
     * Checks if a user has access to an application.
     * @param {?} userId ID of the user
     * @param {?} applicationName Name of the application
     * @return {?} True if the user has access, false otherwise
     */
    IdentityUserService.prototype.checkUserHasApplicationAccess = /**
     * Checks if a user has access to an application.
     * @param {?} userId ID of the user
     * @param {?} applicationName Name of the application
     * @return {?} True if the user has access, false otherwise
     */
    function (userId, applicationName) {
        var _this = this;
        return this.getClientIdByApplicationName(applicationName).pipe(switchMap((/**
         * @param {?} clientId
         * @return {?}
         */
        function (clientId) {
            return _this.checkUserHasClientApp(userId, clientId);
        })));
    };
    /**
     * Checks if a user has any application role.
     * @param userId ID of the target user
     * @param applicationName Name of the application
     * @param roleNames List of role names to check for
     * @returns True if the user has one or more of the roles, false otherwise
     */
    /**
     * Checks if a user has any application role.
     * @param {?} userId ID of the target user
     * @param {?} applicationName Name of the application
     * @param {?} roleNames List of role names to check for
     * @return {?} True if the user has one or more of the roles, false otherwise
     */
    IdentityUserService.prototype.checkUserHasAnyApplicationRole = /**
     * Checks if a user has any application role.
     * @param {?} userId ID of the target user
     * @param {?} applicationName Name of the application
     * @param {?} roleNames List of role names to check for
     * @return {?} True if the user has one or more of the roles, false otherwise
     */
    function (userId, applicationName, roleNames) {
        var _this = this;
        return this.getClientIdByApplicationName(applicationName).pipe(switchMap((/**
         * @param {?} clientId
         * @return {?}
         */
        function (clientId) {
            return _this.checkUserHasAnyClientAppRole(userId, clientId, roleNames);
        })));
    };
    /**
     * Gets details for all users.
     * @returns Array of user info objects
     */
    /**
     * Gets details for all users.
     * @return {?} Array of user info objects
     */
    IdentityUserService.prototype.getUsers = /**
     * Gets details for all users.
     * @return {?} Array of user info objects
     */
    function () {
        /** @type {?} */
        var url = this.buildUserUrl();
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var authNames = [];
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, null, null)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return response;
        })));
    };
    /**
     * Gets a list of roles for a user.
     * @param userId ID of the user
     * @returns Array of role info objects
     */
    /**
     * Gets a list of roles for a user.
     * @param {?} userId ID of the user
     * @return {?} Array of role info objects
     */
    IdentityUserService.prototype.getUserRoles = /**
     * Gets a list of roles for a user.
     * @param {?} userId ID of the user
     * @return {?} Array of role info objects
     */
    function (userId) {
        /** @type {?} */
        var url = this.buildRolesUrl(userId);
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, Object, null, null)).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return response;
        })));
    };
    /**
     * Gets an array of users (including the current user) who have any of the roles in the supplied list.
     * @param roleNames List of role names to look for
     * @returns Array of user info objects
     */
    /**
     * Gets an array of users (including the current user) who have any of the roles in the supplied list.
     * @param {?} roleNames List of role names to look for
     * @return {?} Array of user info objects
     */
    IdentityUserService.prototype.getUsersByRolesWithCurrentUser = /**
     * Gets an array of users (including the current user) who have any of the roles in the supplied list.
     * @param {?} roleNames List of role names to look for
     * @return {?} Array of user info objects
     */
    function (roleNames) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filteredUsers, users, i, hasAnyRole;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filteredUsers = [];
                        if (!(roleNames && roleNames.length > 0)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getUsers().toPromise()];
                    case 1:
                        users = _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < users.length)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.userHasAnyRole(users[i].id, roleNames)];
                    case 3:
                        hasAnyRole = _a.sent();
                        if (hasAnyRole) {
                            filteredUsers.push(users[i]);
                        }
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, filteredUsers];
                }
            });
        });
    };
    /**
     * Gets an array of users (not including the current user) who have any of the roles in the supplied list.
     * @param roleNames List of role names to look for
     * @returns Array of user info objects
     */
    /**
     * Gets an array of users (not including the current user) who have any of the roles in the supplied list.
     * @param {?} roleNames List of role names to look for
     * @return {?} Array of user info objects
     */
    IdentityUserService.prototype.getUsersByRolesWithoutCurrentUser = /**
     * Gets an array of users (not including the current user) who have any of the roles in the supplied list.
     * @param {?} roleNames List of role names to look for
     * @return {?} Array of user info objects
     */
    function (roleNames) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filteredUsers, currentUser_1, users, i, hasAnyRole;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        filteredUsers = [];
                        if (!(roleNames && roleNames.length > 0)) return [3 /*break*/, 5];
                        currentUser_1 = this.getCurrentUserInfo();
                        return [4 /*yield*/, this.getUsers().toPromise()];
                    case 1:
                        users = _a.sent();
                        users = users.filter((/**
                         * @param {?} user
                         * @return {?}
                         */
                        function (user) { return user.username !== currentUser_1.username; }));
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < users.length)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.userHasAnyRole(users[i].id, roleNames)];
                    case 3:
                        hasAnyRole = _a.sent();
                        if (hasAnyRole) {
                            filteredUsers.push(users[i]);
                        }
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, filteredUsers];
                }
            });
        });
    };
    /**
     * @private
     * @param {?} userId
     * @param {?} roleNames
     * @return {?}
     */
    IdentityUserService.prototype.userHasAnyRole = /**
     * @private
     * @param {?} userId
     * @param {?} roleNames
     * @return {?}
     */
    function (userId, roleNames) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var userRoles, hasAnyRole;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUserRoles(userId).toPromise()];
                    case 1:
                        userRoles = _a.sent();
                        hasAnyRole = roleNames.some((/**
                         * @param {?} roleName
                         * @return {?}
                         */
                        function (roleName) {
                            /** @type {?} */
                            var filteredRoles = userRoles.filter((/**
                             * @param {?} userRole
                             * @return {?}
                             */
                            function (userRole) {
                                return userRole.name.toLocaleLowerCase() === roleName.toLocaleLowerCase();
                            }));
                            return filteredRoles.length > 0;
                        }));
                        return [2 /*return*/, hasAnyRole];
                }
            });
        });
    };
    /**
     * Checks if a user has one of the roles from a list.
     * @param userId ID of the target user
     * @param roleNames Array of roles to check for
     * @returns True if the user has one of the roles, false otherwise
     */
    /**
     * Checks if a user has one of the roles from a list.
     * @param {?} userId ID of the target user
     * @param {?} roleNames Array of roles to check for
     * @return {?} True if the user has one of the roles, false otherwise
     */
    IdentityUserService.prototype.checkUserHasRole = /**
     * Checks if a user has one of the roles from a list.
     * @param {?} userId ID of the target user
     * @param {?} roleNames Array of roles to check for
     * @return {?} True if the user has one of the roles, false otherwise
     */
    function (userId, roleNames) {
        return this.getUserRoles(userId).pipe(map((/**
         * @param {?} userRoles
         * @return {?}
         */
        function (userRoles) {
            /** @type {?} */
            var hasRole = false;
            if (userRoles && userRoles.length > 0) {
                roleNames.forEach((/**
                 * @param {?} roleName
                 * @return {?}
                 */
                function (roleName) {
                    /** @type {?} */
                    var role = userRoles.find((/**
                     * @param {?} userRole
                     * @return {?}
                     */
                    function (userRole) {
                        return roleName === userRole.name;
                    }));
                    if (role) {
                        hasRole = true;
                        return;
                    }
                }));
            }
            return hasRole;
        })));
    };
    /**
     * Gets details for all users.
     * @returns Array of user information objects.
     */
    /**
     * Gets details for all users.
     * @param {?} requestQuery
     * @return {?} Array of user information objects.
     */
    IdentityUserService.prototype.queryUsers = /**
     * Gets details for all users.
     * @param {?} requestQuery
     * @return {?} Array of user information objects.
     */
    function (requestQuery) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl();
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = { first: requestQuery.first, max: requestQuery.max };
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var authNames = [];
        /** @type {?} */
        var contentTypes = ['application/json'];
        return this.getTotalUsersCount().pipe(switchMap((/**
         * @param {?} totalCount
         * @return {?}
         */
        function (totalCount) {
            return from(_this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, null, null, null)).pipe(map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                return (/** @type {?} */ ({
                    entries: response,
                    pagination: {
                        skipCount: requestQuery.first,
                        maxItems: requestQuery.max,
                        count: totalCount,
                        hasMoreItems: false,
                        totalItems: totalCount
                    }
                }));
            })), catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.handleError(error); })));
        })));
    };
    /**
     * Gets users total count.
     * @returns Number of users count.
     */
    /**
     * Gets users total count.
     * @return {?} Number of users count.
     */
    IdentityUserService.prototype.getTotalUsersCount = /**
     * Gets users total count.
     * @return {?} Number of users count.
     */
    function () {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + "/count";
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance()
            .oauth2Auth.callCustomApi(url, 'GET', null, null, null, null, null, contentTypes, accepts, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Creates new user.
     * @param newUser Object containing the new user details.
     * @returns Empty response when the user created.
     */
    /**
     * Creates new user.
     * @param {?} newUser Object containing the new user details.
     * @return {?} Empty response when the user created.
     */
    IdentityUserService.prototype.createUser = /**
     * Creates new user.
     * @param {?} newUser Object containing the new user details.
     * @return {?} Empty response when the user created.
     */
    function (newUser) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl();
        /** @type {?} */
        var request = JSON.stringify(newUser);
        /** @type {?} */
        var httpMethod = 'POST';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = request;
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Updates user details.
     * @param userId Id of the user.
     * @param updatedUser Object containing the user details.
     * @returns Empty response when the user updated.
     */
    /**
     * Updates user details.
     * @param {?} userId Id of the user.
     * @param {?} updatedUser Object containing the user details.
     * @return {?} Empty response when the user updated.
     */
    IdentityUserService.prototype.updateUser = /**
     * Updates user details.
     * @param {?} userId Id of the user.
     * @param {?} updatedUser Object containing the user details.
     * @return {?} Empty response when the user updated.
     */
    function (userId, updatedUser) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + userId;
        /** @type {?} */
        var request = JSON.stringify(updatedUser);
        /** @type {?} */
        var httpMethod = 'PUT';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = request;
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Deletes User.
     * @param userId Id of the  user.
     * @returns Empty response when the user deleted.
     */
    /**
     * Deletes User.
     * @param {?} userId Id of the  user.
     * @return {?} Empty response when the user deleted.
     */
    IdentityUserService.prototype.deleteUser = /**
     * Deletes User.
     * @param {?} userId Id of the  user.
     * @return {?} Empty response when the user deleted.
     */
    function (userId) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + userId;
        /** @type {?} */
        var httpMethod = 'DELETE';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Changes user password.
     * @param userId Id of the user.
     * @param credentials Details of user Credentials.
     * @returns Empty response when the password changed.
     */
    /**
     * Changes user password.
     * @param {?} userId Id of the user.
     * @param {?} newPassword
     * @return {?} Empty response when the password changed.
     */
    IdentityUserService.prototype.changePassword = /**
     * Changes user password.
     * @param {?} userId Id of the user.
     * @param {?} newPassword
     * @return {?} Empty response when the password changed.
     */
    function (userId, newPassword) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + userId + '/reset-password';
        /** @type {?} */
        var request = JSON.stringify(newPassword);
        /** @type {?} */
        var httpMethod = 'PUT';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = request;
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Gets involved groups.
     * @param userId Id of the user.
     * @returns Array of involved groups information objects.
     */
    /**
     * Gets involved groups.
     * @param {?} userId Id of the user.
     * @return {?} Array of involved groups information objects.
     */
    IdentityUserService.prototype.getInvolvedGroups = /**
     * Gets involved groups.
     * @param {?} userId Id of the user.
     * @return {?} Array of involved groups information objects.
     */
    function (userId) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + userId + '/groups/';
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = { id: userId };
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var authNames = [];
        /** @type {?} */
        var contentTypes = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Joins group.
     * @param joinGroupRequest Details of join group request (IdentityJoinGroupRequestModel).
     * @returns Empty response when the user joined the group.
     */
    /**
     * Joins group.
     * @param {?} joinGroupRequest Details of join group request (IdentityJoinGroupRequestModel).
     * @return {?} Empty response when the user joined the group.
     */
    IdentityUserService.prototype.joinGroup = /**
     * Joins group.
     * @param {?} joinGroupRequest Details of join group request (IdentityJoinGroupRequestModel).
     * @return {?} Empty response when the user joined the group.
     */
    function (joinGroupRequest) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + joinGroupRequest.userId + '/groups/' + joinGroupRequest.groupId;
        /** @type {?} */
        var request = JSON.stringify(joinGroupRequest);
        /** @type {?} */
        var httpMethod = 'PUT';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = request;
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Leaves group.
     * @param userId Id of the user.
     * @param groupId Id of the  group.
     * @returns Empty response when the user left the group.
     */
    /**
     * Leaves group.
     * @param {?} userId Id of the user.
     * @param {?} groupId Id of the  group.
     * @return {?} Empty response when the user left the group.
     */
    IdentityUserService.prototype.leaveGroup = /**
     * Leaves group.
     * @param {?} userId Id of the user.
     * @param {?} groupId Id of the  group.
     * @return {?} Empty response when the user left the group.
     */
    function (userId, groupId) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + userId + '/groups/' + groupId;
        /** @type {?} */
        var httpMethod = 'DELETE';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Gets available roles
     * @param userId Id of the user.
     * @returns Array of available roles information objects
     */
    /**
     * Gets available roles
     * @param {?} userId Id of the user.
     * @return {?} Array of available roles information objects
     */
    IdentityUserService.prototype.getAvailableRoles = /**
     * Gets available roles
     * @param {?} userId Id of the user.
     * @return {?} Array of available roles information objects
     */
    function (userId) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm/available';
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var authNames = [];
        /** @type {?} */
        var contentTypes = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Gets assigned roles.
     * @param userId Id of the user.
     * @returns Array of assigned roles information objects
     */
    /**
     * Gets assigned roles.
     * @param {?} userId Id of the user.
     * @return {?} Array of assigned roles information objects
     */
    IdentityUserService.prototype.getAssignedRoles = /**
     * Gets assigned roles.
     * @param {?} userId Id of the user.
     * @return {?} Array of assigned roles information objects
     */
    function (userId) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm';
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = { id: userId };
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var authNames = [];
        /** @type {?} */
        var contentTypes = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Gets effective roles.
     * @param userId Id of the user.
     * @returns Array of composite roles information objects
     */
    /**
     * Gets effective roles.
     * @param {?} userId Id of the user.
     * @return {?} Array of composite roles information objects
     */
    IdentityUserService.prototype.getEffectiveRoles = /**
     * Gets effective roles.
     * @param {?} userId Id of the user.
     * @return {?} Array of composite roles information objects
     */
    function (userId) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm/composite';
        /** @type {?} */
        var httpMethod = 'GET';
        /** @type {?} */
        var pathParams = { id: userId };
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = {};
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var authNames = [];
        /** @type {?} */
        var contentTypes = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Assigns roles to the user.
     * @param userId Id of the user.
     * @param roles Array of roles.
     * @returns Empty response when the role assigned.
     */
    /**
     * Assigns roles to the user.
     * @param {?} userId Id of the user.
     * @param {?} roles Array of roles.
     * @return {?} Empty response when the role assigned.
     */
    IdentityUserService.prototype.assignRoles = /**
     * Assigns roles to the user.
     * @param {?} userId Id of the user.
     * @param {?} roles Array of roles.
     * @return {?} Empty response when the role assigned.
     */
    function (userId, roles) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm';
        /** @type {?} */
        var request = JSON.stringify(roles);
        /** @type {?} */
        var httpMethod = 'POST';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = request;
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * Removes assigned roles.
     * @param userId Id of the user.
     * @param roles Array of roles.
     * @returns Empty response when the role removed.
     */
    /**
     * Removes assigned roles.
     * @param {?} userId Id of the user.
     * @param {?} removedRoles
     * @return {?} Empty response when the role removed.
     */
    IdentityUserService.prototype.removeRoles = /**
     * Removes assigned roles.
     * @param {?} userId Id of the user.
     * @param {?} removedRoles
     * @return {?} Empty response when the role removed.
     */
    function (userId, removedRoles) {
        var _this = this;
        /** @type {?} */
        var url = this.buildUserUrl() + '/' + userId + '/role-mappings/realm';
        /** @type {?} */
        var request = JSON.stringify(removedRoles);
        /** @type {?} */
        var httpMethod = 'DELETE';
        /** @type {?} */
        var pathParams = {};
        /** @type {?} */
        var queryParams = {};
        /** @type {?} */
        var bodyParam = request;
        /** @type {?} */
        var headerParams = {};
        /** @type {?} */
        var formParams = {};
        /** @type {?} */
        var contentTypes = ['application/json'];
        /** @type {?} */
        var accepts = ['application/json'];
        return from(this.alfrescoApiService.getInstance().oauth2Auth.callCustomApi(url, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, contentTypes, accepts, null, null, null)).pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleError(error); })));
    };
    /**
     * @private
     * @return {?}
     */
    IdentityUserService.prototype.buildUserUrl = /**
     * @private
     * @return {?}
     */
    function () {
        return this.appConfigService.get('identityHost') + "/users";
    };
    /**
     * @private
     * @param {?} userId
     * @param {?} clientId
     * @return {?}
     */
    IdentityUserService.prototype.buildUserClientRoleMapping = /**
     * @private
     * @param {?} userId
     * @param {?} clientId
     * @return {?}
     */
    function (userId, clientId) {
        return this.appConfigService.get('identityHost') + "/users/" + userId + "/role-mappings/clients/" + clientId;
    };
    /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    IdentityUserService.prototype.buildRolesUrl = /**
     * @private
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        return this.appConfigService.get('identityHost') + "/users/" + userId + "/role-mappings/realm/composite";
    };
    /**
     * @private
     * @return {?}
     */
    IdentityUserService.prototype.buildGetClientsUrl = /**
     * @private
     * @return {?}
     */
    function () {
        return this.appConfigService.get('identityHost') + "/clients";
    };
    /**
     * Throw the error
     * @param error
     */
    /**
     * Throw the error
     * @private
     * @param {?} error
     * @return {?}
     */
    IdentityUserService.prototype.handleError = /**
     * Throw the error
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.logService.error(error);
        return throwError(error || 'Server error');
    };
    IdentityUserService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    IdentityUserService.ctorParameters = function () { return [
        { type: JwtHelperService },
        { type: AlfrescoApiService },
        { type: AppConfigService },
        { type: LogService }
    ]; };
    /** @nocollapse */ IdentityUserService.ngInjectableDef = i0.defineInjectable({ factory: function IdentityUserService_Factory() { return new IdentityUserService(i0.inject(i1.JwtHelperService), i0.inject(i2.AlfrescoApiService), i0.inject(i3.AppConfigService), i0.inject(i4.LogService)); }, token: IdentityUserService, providedIn: "root" });
    return IdentityUserService;
}());
export { IdentityUserService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IdentityUserService.prototype.jwtHelperService;
    /**
     * @type {?}
     * @private
     */
    IdentityUserService.prototype.alfrescoApiService;
    /**
     * @type {?}
     * @private
     */
    IdentityUserService.prototype.appConfigService;
    /**
     * @type {?}
     * @private
     */
    IdentityUserService.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,