/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class JwtHelperService {
    constructor() {
    }
    /**
     * Decodes a JSON web token into a JS object.
     * @param {?} token Token in encoded form
     * @return {?} Decoded token data object
     */
    decodeToken(token) {
        /** @type {?} */
        const parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        /** @type {?} */
        const decoded = this.urlBase64Decode(parts[1]);
        if (!decoded) {
            throw new Error('Cannot decode the token');
        }
        return JSON.parse(decoded);
    }
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    urlBase64Decode(token) {
        /** @type {?} */
        let output = token.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0: {
                break;
            }
            case 2: {
                output += '==';
                break;
            }
            case 3: {
                output += '=';
                break;
            }
            default: {
                throw new Error('Illegal base64url string!');
            }
        }
        return decodeURIComponent(escape(window.atob(output)));
    }
    /**
     * Gets a named value from the user access token.
     * @template T
     * @param {?} key Key name of the field to retrieve
     * @return {?} Value from the token
     */
    getValueFromLocalAccessToken(key) {
        return this.getValueFromToken(this.getAccessToken(), key);
    }
    /**
     * Gets access token
     * @return {?} access token
     */
    getAccessToken() {
        return localStorage.getItem(JwtHelperService.USER_ACCESS_TOKEN);
    }
    /**
     * Gets a named value from the user access token.
     * @template T
     * @param {?} accessToken
     * @param {?} key accessToken
     * @return {?} Value from the token
     */
    getValueFromToken(accessToken, key) {
        /** @type {?} */
        let value;
        if (accessToken) {
            /** @type {?} */
            const tokenPayload = this.decodeToken(accessToken);
            value = tokenPayload[key];
        }
        return (/** @type {?} */ (value));
    }
}
JwtHelperService.USER_NAME = 'name';
JwtHelperService.FAMILY_NAME = 'family_name';
JwtHelperService.GIVEN_NAME = 'given_name';
JwtHelperService.USER_EMAIL = 'email';
JwtHelperService.USER_ACCESS_TOKEN = 'access_token';
JwtHelperService.USER_PREFERRED_USERNAME = 'preferred_username';
JwtHelperService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
JwtHelperService.ctorParameters = () => [];
/** @nocollapse */ JwtHelperService.ngInjectableDef = i0.defineInjectable({ factory: function JwtHelperService_Factory() { return new JwtHelperService(); }, token: JwtHelperService, providedIn: "root" });
if (false) {
    /** @type {?} */
    JwtHelperService.USER_NAME;
    /** @type {?} */
    JwtHelperService.FAMILY_NAME;
    /** @type {?} */
    JwtHelperService.GIVEN_NAME;
    /** @type {?} */
    JwtHelperService.USER_EMAIL;
    /** @type {?} */
    JwtHelperService.USER_ACCESS_TOKEN;
    /** @type {?} */
    JwtHelperService.USER_PREFERRED_USERNAME;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LWhlbHBlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb3JlLyIsInNvdXJjZXMiOlsic2VydmljZXMvand0LWhlbHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDLE1BQU0sT0FBTyxnQkFBZ0I7SUFTekI7SUFDQSxDQUFDOzs7Ozs7SUFPRCxXQUFXLENBQUMsS0FBSzs7Y0FDUCxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFFOUIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDNUM7O2NBRUssT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7U0FDOUM7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7Ozs7O0lBRU8sZUFBZSxDQUFDLEtBQUs7O1lBQ3JCLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztRQUN4RCxRQUFRLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ0osTUFBTTthQUNUO1lBQ0QsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDSixNQUFNLElBQUksSUFBSSxDQUFDO2dCQUNmLE1BQU07YUFDVDtZQUNELEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ0osTUFBTSxJQUFJLEdBQUcsQ0FBQztnQkFDZCxNQUFNO2FBQ1Q7WUFDRCxPQUFPLENBQUMsQ0FBQztnQkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7YUFDaEQ7U0FDSjtRQUNELE9BQU8sa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7Ozs7SUFPRCw0QkFBNEIsQ0FBSSxHQUFXO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7OztJQU1ELGNBQWM7UUFDVixPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNwRSxDQUFDOzs7Ozs7OztJQVFELGlCQUFpQixDQUFJLFdBQW1CLEVBQUUsR0FBVzs7WUFDN0MsS0FBSztRQUNULElBQUksV0FBVyxFQUFFOztrQkFDUCxZQUFZLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUM7WUFDbEQsS0FBSyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM3QjtRQUNELE9BQU8sbUJBQUksS0FBSyxFQUFBLENBQUM7SUFDckIsQ0FBQzs7QUFqRk0sMEJBQVMsR0FBRyxNQUFNLENBQUM7QUFDbkIsNEJBQVcsR0FBRyxhQUFhLENBQUM7QUFDNUIsMkJBQVUsR0FBRyxZQUFZLENBQUM7QUFDMUIsMkJBQVUsR0FBRyxPQUFPLENBQUM7QUFDckIsa0NBQWlCLEdBQUcsY0FBYyxDQUFDO0FBQ25DLHdDQUF1QixHQUFHLG9CQUFvQixDQUFDOztZQVZ6RCxVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7Ozs7SUFHRywyQkFBMEI7O0lBQzFCLDZCQUFtQzs7SUFDbkMsNEJBQWlDOztJQUNqQyw0QkFBNEI7O0lBQzVCLG1DQUEwQzs7SUFDMUMseUNBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEp3dEhlbHBlclNlcnZpY2Uge1xuXG4gICAgc3RhdGljIFVTRVJfTkFNRSA9ICduYW1lJztcbiAgICBzdGF0aWMgRkFNSUxZX05BTUUgPSAnZmFtaWx5X25hbWUnO1xuICAgIHN0YXRpYyBHSVZFTl9OQU1FID0gJ2dpdmVuX25hbWUnO1xuICAgIHN0YXRpYyBVU0VSX0VNQUlMID0gJ2VtYWlsJztcbiAgICBzdGF0aWMgVVNFUl9BQ0NFU1NfVE9LRU4gPSAnYWNjZXNzX3Rva2VuJztcbiAgICBzdGF0aWMgVVNFUl9QUkVGRVJSRURfVVNFUk5BTUUgPSAncHJlZmVycmVkX3VzZXJuYW1lJztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBKU09OIHdlYiB0b2tlbiBpbnRvIGEgSlMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB0b2tlbiBUb2tlbiBpbiBlbmNvZGVkIGZvcm1cbiAgICAgKiBAcmV0dXJucyBEZWNvZGVkIHRva2VuIGRhdGEgb2JqZWN0XG4gICAgICovXG4gICAgZGVjb2RlVG9rZW4odG9rZW4pOiBPYmplY3Qge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IHRva2VuLnNwbGl0KCcuJyk7XG5cbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gMykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdKV1QgbXVzdCBoYXZlIDMgcGFydHMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSB0aGlzLnVybEJhc2U2NERlY29kZShwYXJ0c1sxXSk7XG4gICAgICAgIGlmICghZGVjb2RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGVjb2RlIHRoZSB0b2tlbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cmxCYXNlNjREZWNvZGUodG9rZW4pOiBzdHJpbmcge1xuICAgICAgICBsZXQgb3V0cHV0ID0gdG9rZW4ucmVwbGFjZSgvLS9nLCAnKycpLnJlcGxhY2UoL18vZywgJy8nKTtcbiAgICAgICAgc3dpdGNoIChvdXRwdXQubGVuZ3RoICUgNCkge1xuICAgICAgICAgICAgY2FzZSAwOiB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDI6IHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gJz09JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMzoge1xuICAgICAgICAgICAgICAgIG91dHB1dCArPSAnPSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGJhc2U2NHVybCBzdHJpbmchJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUod2luZG93LmF0b2Iob3V0cHV0KSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSBuYW1lZCB2YWx1ZSBmcm9tIHRoZSB1c2VyIGFjY2VzcyB0b2tlbi5cbiAgICAgKiBAcGFyYW0ga2V5IEtleSBuYW1lIG9mIHRoZSBmaWVsZCB0byByZXRyaWV2ZVxuICAgICAqIEByZXR1cm5zIFZhbHVlIGZyb20gdGhlIHRva2VuXG4gICAgICovXG4gICAgZ2V0VmFsdWVGcm9tTG9jYWxBY2Nlc3NUb2tlbjxUPihrZXk6IHN0cmluZyk6IFQge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUZyb21Ub2tlbih0aGlzLmdldEFjY2Vzc1Rva2VuKCksIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhY2Nlc3MgdG9rZW5cbiAgICAgKiBAcmV0dXJucyBhY2Nlc3MgdG9rZW5cbiAgICAgKi9cbiAgICBnZXRBY2Nlc3NUb2tlbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oSnd0SGVscGVyU2VydmljZS5VU0VSX0FDQ0VTU19UT0tFTik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIG5hbWVkIHZhbHVlIGZyb20gdGhlIHVzZXIgYWNjZXNzIHRva2VuLlxuICAgICAqIEBwYXJhbSBrZXkgYWNjZXNzVG9rZW5cbiAgICAgKiBAcGFyYW0ga2V5IEtleSBuYW1lIG9mIHRoZSBmaWVsZCB0byByZXRyaWV2ZVxuICAgICAqIEByZXR1cm5zIFZhbHVlIGZyb20gdGhlIHRva2VuXG4gICAgICovXG4gICAgZ2V0VmFsdWVGcm9tVG9rZW48VD4oYWNjZXNzVG9rZW46IHN0cmluZywga2V5OiBzdHJpbmcpOiBUIHtcbiAgICAgICAgbGV0IHZhbHVlO1xuICAgICAgICBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuUGF5bG9hZCA9IHRoaXMuZGVjb2RlVG9rZW4oYWNjZXNzVG9rZW4pO1xuICAgICAgICAgICAgdmFsdWUgPSB0b2tlblBheWxvYWRba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gPFQ+IHZhbHVlO1xuICAgIH1cbn1cbiJdfQ==