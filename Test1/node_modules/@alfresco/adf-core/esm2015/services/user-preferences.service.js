/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { BehaviorSubject } from 'rxjs';
import { AppConfigService, AppConfigValues } from '../app-config/app-config.service';
import { StorageService } from './storage.service';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { AlfrescoApiService } from './alfresco-api.service';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "../app-config/app-config.service";
import * as i3 from "./storage.service";
import * as i4 from "./alfresco-api.service";
/** @enum {string} */
const UserPreferenceValues = {
    PaginationSize: 'paginationSize',
    Locale: 'locale',
    SupportedPageSizes: 'supportedPageSizes',
    ExpandedSideNavStatus: 'expandedSidenav',
};
export { UserPreferenceValues };
export class UserPreferencesService {
    /**
     * @param {?} translate
     * @param {?} appConfig
     * @param {?} storage
     * @param {?} alfrescoApiService
     */
    constructor(translate, appConfig, storage, alfrescoApiService) {
        this.translate = translate;
        this.appConfig = appConfig;
        this.storage = storage;
        this.alfrescoApiService = alfrescoApiService;
        this.defaults = {
            paginationSize: 25,
            supportedPageSizes: [5, 10, 15, 20],
            locale: 'en',
            expandedSidenav: true
        };
        this.userPreferenceStatus = this.defaults;
        this.alfrescoApiService.alfrescoApiInitialized.subscribe(this.initUserPreferenceStatus.bind(this));
        this.onChangeSubject = new BehaviorSubject(this.userPreferenceStatus);
        this.onChange = this.onChangeSubject.asObservable();
    }
    /**
     * @private
     * @return {?}
     */
    initUserPreferenceStatus() {
        this.initUserLanguage();
        this.set(UserPreferenceValues.PaginationSize, this.paginationSize);
        this.set(UserPreferenceValues.SupportedPageSizes, JSON.stringify(this.supportedPageSizes));
    }
    /**
     * @private
     * @return {?}
     */
    initUserLanguage() {
        if (this.locale || this.appConfig.get(UserPreferenceValues.Locale)) {
            /** @type {?} */
            const locale = this.locale || this.getDefaultLocale();
            this.set(UserPreferenceValues.Locale, locale);
            this.set('textOrientation', this.getLanguageByKey(locale).direction || 'ltr');
        }
        else {
            /** @type {?} */
            const locale = this.locale || this.getDefaultLocale();
            this.setWithoutStore(UserPreferenceValues.Locale, locale);
            this.setWithoutStore('textOrientation', this.getLanguageByKey(locale).direction || 'ltr');
        }
    }
    /**
     * Sets up a callback to notify when a property has changed.
     * @param {?} property The property to watch
     * @return {?} Notification callback
     */
    select(property) {
        return this.onChange
            .pipe(map((/**
         * @param {?} userPreferenceStatus
         * @return {?}
         */
        (userPreferenceStatus) => userPreferenceStatus[property])), distinctUntilChanged());
    }
    /**
     * Gets a preference property.
     * @param {?} property Name of the property
     * @param {?=} defaultValue Default to return if the property is not found
     * @return {?} Preference property
     */
    get(property, defaultValue) {
        /** @type {?} */
        const key = this.getPropertyKey(property);
        /** @type {?} */
        const value = this.storage.getItem(key);
        if (value === undefined || value === null) {
            return defaultValue;
        }
        return value;
    }
    /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    set(property, value) {
        if (!property) {
            return;
        }
        this.storage.setItem(this.getPropertyKey(property), value);
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    }
    /**
     * Sets a preference property.
     * @param {?} property Name of the property
     * @param {?} value New value for the property
     * @return {?}
     */
    setWithoutStore(property, value) {
        if (!property) {
            return;
        }
        this.userPreferenceStatus[property] = value;
        this.onChangeSubject.next(this.userPreferenceStatus);
    }
    /**
     * Check if an item is present in the storage
     * @param {?} property Name of the property
     * @return {?} True if the item is present, false otherwise
     */
    hasItem(property) {
        if (!property) {
            return;
        }
        return this.storage.hasItem(this.getPropertyKey(property));
    }
    /**
     * Gets the active storage prefix for preferences.
     * @return {?} Storage prefix
     */
    getStoragePrefix() {
        return this.storage.getItem('USER_PROFILE') || 'GUEST';
    }
    /**
     * Sets the active storage prefix for preferences.
     * @param {?} value Name of the prefix
     * @return {?}
     */
    setStoragePrefix(value) {
        this.storage.setItem('USER_PROFILE', value || 'GUEST');
        this.initUserPreferenceStatus();
    }
    /**
     * Gets the full property key with prefix.
     * @param {?} property The property name
     * @return {?} Property key
     */
    getPropertyKey(property) {
        return `${this.getStoragePrefix()}__${property}`;
    }
    /**
     * Gets an array containing the available page sizes.
     * @return {?} Array of page size values
     */
    get supportedPageSizes() {
        /** @type {?} */
        const supportedPageSizes = this.get(UserPreferenceValues.SupportedPageSizes);
        if (supportedPageSizes) {
            return JSON.parse(supportedPageSizes);
        }
        else {
            return this.appConfig.get('pagination.supportedPageSizes', this.defaults.supportedPageSizes);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set supportedPageSizes(value) {
        this.set(UserPreferenceValues.SupportedPageSizes, JSON.stringify(value));
    }
    /**
     * Pagination size.
     * @param {?} value
     * @return {?}
     */
    set paginationSize(value) {
        this.set(UserPreferenceValues.PaginationSize, value);
    }
    /**
     * @return {?}
     */
    get paginationSize() {
        /** @type {?} */
        const paginationSize = this.get(UserPreferenceValues.PaginationSize);
        if (paginationSize) {
            return Number(paginationSize);
        }
        else {
            return Number(this.appConfig.get('pagination.size', this.defaults.paginationSize));
        }
    }
    /**
     * Current locale setting.
     * @return {?}
     */
    get locale() {
        return this.get(UserPreferenceValues.Locale);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set locale(value) {
        this.set(UserPreferenceValues.Locale, value);
    }
    /**
     * Gets the default locale.
     * @return {?} Default locale language code
     */
    getDefaultLocale() {
        return this.appConfig.get(UserPreferenceValues.Locale) || this.translate.getBrowserCultureLang() || 'en';
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    getLanguageByKey(key) {
        return (this.appConfig
            .get(AppConfigValues.APP_CONFIG_LANGUAGES_KEY, [(/** @type {?} */ ({ key: 'en' }))])
            .find((/**
         * @param {?} language
         * @return {?}
         */
        (language) => key.includes(language.key))) || (/** @type {?} */ ({ key: 'en' })));
    }
}
UserPreferencesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UserPreferencesService.ctorParameters = () => [
    { type: TranslateService },
    { type: AppConfigService },
    { type: StorageService },
    { type: AlfrescoApiService }
];
/** @nocollapse */ UserPreferencesService.ngInjectableDef = i0.defineInjectable({ factory: function UserPreferencesService_Factory() { return new UserPreferencesService(i0.inject(i1.TranslateService), i0.inject(i2.AppConfigService), i0.inject(i3.StorageService), i0.inject(i4.AlfrescoApiService)); }, token: UserPreferencesService, providedIn: "root" });
if (false) {
    /** @type {?} */
    UserPreferencesService.prototype.defaults;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.userPreferenceStatus;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.onChangeSubject;
    /** @type {?} */
    UserPreferencesService.prototype.onChange;
    /** @type {?} */
    UserPreferencesService.prototype.translate;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.appConfig;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.storage;
    /**
     * @type {?}
     * @private
     */
    UserPreferencesService.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,