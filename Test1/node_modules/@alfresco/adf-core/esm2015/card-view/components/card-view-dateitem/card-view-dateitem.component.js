/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewChild } from '@angular/core';
import { DateAdapter, MAT_DATE_FORMATS } from '@angular/material';
import { MatDatetimepicker, DatetimeAdapter, MAT_DATETIME_FORMATS } from '@mat-datetimepicker/core';
import { MomentDatetimeAdapter, MAT_MOMENT_DATETIME_FORMATS } from '@mat-datetimepicker/moment';
import moment from 'moment-es6';
import { CardViewDateItemModel } from '../../models/card-view-dateitem.model';
import { CardViewUpdateService } from '../../services/card-view-update.service';
import { UserPreferencesService, UserPreferenceValues } from '../../../services/user-preferences.service';
import { MomentDateAdapter } from '../../../utils/momentDateAdapter';
import { MOMENT_DATE_FORMATS } from '../../../utils/moment-date-formats.model';
import { AppConfigService } from '../../../app-config/app-config.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
const ɵ0 = MOMENT_DATE_FORMATS, ɵ1 = MAT_MOMENT_DATETIME_FORMATS;
export class CardViewDateItemComponent {
    /**
     * @param {?} cardViewUpdateService
     * @param {?} dateAdapter
     * @param {?} userPreferencesService
     * @param {?} appConfig
     */
    constructor(cardViewUpdateService, dateAdapter, userPreferencesService, appConfig) {
        this.cardViewUpdateService = cardViewUpdateService;
        this.dateAdapter = dateAdapter;
        this.userPreferencesService = userPreferencesService;
        this.appConfig = appConfig;
        this.editable = false;
        this.displayEmpty = true;
        this.displayClearAction = true;
        this.onDestroy$ = new Subject();
        this.dateFormat = this.appConfig.get('dateValues.defaultDateFormat');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.Locale)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} locale
         * @return {?}
         */
        locale => {
            this.dateAdapter.setLocale(locale);
            this.property.locale = locale;
        }));
        ((/** @type {?} */ (this.dateAdapter))).overrideDisplayFormat = 'MMM DD';
        if (this.property.value) {
            this.valueDate = moment(this.property.value, this.dateFormat);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @return {?}
     */
    showProperty() {
        return this.displayEmpty || !this.property.isEmpty();
    }
    /**
     * @return {?}
     */
    showClearAction() {
        return this.displayClearAction && (!this.property.isEmpty() || !!this.property.default);
    }
    /**
     * @return {?}
     */
    isEditable() {
        return this.editable && this.property.editable;
    }
    /**
     * @return {?}
     */
    showDatePicker() {
        this.datepicker.open();
    }
    /**
     * @param {?} newDateValue
     * @return {?}
     */
    onDateChanged(newDateValue) {
        if (newDateValue) {
            /** @type {?} */
            const momentDate = moment(newDateValue.value, this.dateFormat, true);
            if (momentDate.isValid()) {
                this.valueDate = momentDate;
                this.cardViewUpdateService.update(this.property, momentDate.toDate());
                this.property.value = momentDate.toDate();
            }
        }
    }
    /**
     * @return {?}
     */
    onDateClear() {
        this.valueDate = null;
        this.cardViewUpdateService.update(this.property, null);
        this.property.value = null;
        this.property.default = null;
    }
}
CardViewDateItemComponent.decorators = [
    { type: Component, args: [{
                providers: [
                    { provide: DateAdapter, useClass: MomentDateAdapter },
                    { provide: MAT_DATE_FORMATS, useValue: ɵ0 },
                    { provide: DatetimeAdapter, useClass: MomentDatetimeAdapter },
                    { provide: MAT_DATETIME_FORMATS, useValue: ɵ1 }
                ],
                selector: 'adf-card-view-dateitem',
                template: "<div [attr.data-automation-id]=\"'card-dateitem-label-' + property.key\" class=\"adf-property-label\" *ngIf=\"showProperty() || isEditable()\">{{ property.label | translate }}</div>\n<div class=\"adf-property-value\">\n    <span *ngIf=\"!isEditable()\" [attr.data-automation-id]=\"'card-' + property.type + '-value-' + property.key\">\n        <span [attr.data-automation-id]=\"'card-dateitem-' + property.key\">\n            <span *ngIf=\"showProperty()\">{{ property.displayValue }}</span>\n        </span>\n    </span>\n    <div *ngIf=\"isEditable()\" class=\"adf-dateitem-editable\">\n        <div class=\"adf-dateitem-editable-controls\">\n            <span\n                class=\"adf-datepicker-toggle\"\n                [attr.data-automation-id]=\"'datepicker-label-toggle-' + property.key\"\n                (click)=\"showDatePicker()\">\n                <span [attr.data-automation-id]=\"'card-' + property.type + '-value-' + property.key\" *ngIf=\"showProperty(); else elseEmptyValueBlock\">{{ property.displayValue }}</span>\n            </span>\n\n            <mat-icon *ngIf=\"showClearAction()\"\n                class=\"adf-date-reset-icon\"\n                (click)=\"onDateClear()\"\n                [attr.title]=\"'CORE.METADATA.ACTIONS.CLEAR' | translate\"\n                [attr.data-automation-id]=\"'datepicker-date-clear-' + property.key\">\n                clear\n            </mat-icon>\n\n            <mat-datetimepicker-toggle\n                [attr.title]=\"'CORE.METADATA.ACTIONS.EDIT' | translate\"\n                [attr.data-automation-id]=\"'datepickertoggle-' + property.key\"\n                [for]=\"datetimePicker\">\n            </mat-datetimepicker-toggle>\n        </div>\n\n        <input class=\"adf-invisible-date-input\"\n            [matDatetimepicker]=\"datetimePicker\"\n            [value]=\"valueDate\"\n            (dateChange)=\"onDateChanged($event)\">\n\n        <mat-datetimepicker #datetimePicker\n            [type]=\"property.type\"\n            timeInterval=\"5\"\n            [attr.data-automation-id]=\"'datepicker-' + property.key\"\n            [startAt]=\"valueDate\">\n        </mat-datetimepicker>\n    </div>\n    <ng-template #elseEmptyValueBlock>\n        {{ property.default | translate }}\n    </ng-template>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
CardViewDateItemComponent.ctorParameters = () => [
    { type: CardViewUpdateService },
    { type: DateAdapter },
    { type: UserPreferencesService },
    { type: AppConfigService }
];
CardViewDateItemComponent.propDecorators = {
    property: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    displayClearAction: [{ type: Input }],
    datepicker: [{ type: ViewChild, args: ['datetimePicker',] }]
};
if (false) {
    /** @type {?} */
    CardViewDateItemComponent.prototype.property;
    /** @type {?} */
    CardViewDateItemComponent.prototype.editable;
    /** @type {?} */
    CardViewDateItemComponent.prototype.displayEmpty;
    /** @type {?} */
    CardViewDateItemComponent.prototype.displayClearAction;
    /** @type {?} */
    CardViewDateItemComponent.prototype.datepicker;
    /** @type {?} */
    CardViewDateItemComponent.prototype.valueDate;
    /** @type {?} */
    CardViewDateItemComponent.prototype.dateFormat;
    /**
     * @type {?}
     * @private
     */
    CardViewDateItemComponent.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    CardViewDateItemComponent.prototype.cardViewUpdateService;
    /**
     * @type {?}
     * @private
     */
    CardViewDateItemComponent.prototype.dateAdapter;
    /**
     * @type {?}
     * @private
     */
    CardViewDateItemComponent.prototype.userPreferencesService;
    /**
     * @type {?}
     * @private
     */
    CardViewDateItemComponent.prototype.appConfig;
}
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,