/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, ChangeDetectorRef, HostBinding } from '@angular/core';
import { Pagination } from '@alfresco/js-api';
import { Subject } from 'rxjs';
import { PaginationModel } from '../models/pagination.model';
import { UserPreferencesService, UserPreferenceValues } from '../services/user-preferences.service';
import { takeUntil } from 'rxjs/operators';
export class PaginationComponent {
    /**
     * @param {?} cdr
     * @param {?} userPreferencesService
     */
    constructor(cdr, userPreferencesService) {
        this.cdr = cdr;
        this.userPreferencesService = userPreferencesService;
        /**
         * Pagination object.
         */
        this.pagination = PaginationComponent.DEFAULT_PAGINATION;
        /**
         * Emitted when pagination changes in any way.
         */
        this.change = new EventEmitter();
        /**
         * Emitted when the page number changes.
         */
        this.changePageNumber = new EventEmitter();
        /**
         * Emitted when the page size changes.
         */
        this.changePageSize = new EventEmitter();
        /**
         * Emitted when the next page is requested.
         */
        this.nextPage = new EventEmitter();
        /**
         * Emitted when the previous page is requested.
         */
        this.prevPage = new EventEmitter();
        this.onDestroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.userPreferencesService
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} pagSize
         * @return {?}
         */
        pagSize => this.pagination.maxItems = pagSize));
        if (!this.supportedPageSizes) {
            this.supportedPageSizes = this.userPreferencesService.supportedPageSizes;
        }
        if (this.target) {
            this.target.pagination
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((/**
             * @param {?} pagination
             * @return {?}
             */
            pagination => {
                if (pagination.count === 0 && !this.isFirstPage) {
                    this.goPrevious();
                }
                this.pagination = pagination;
                this.cdr.detectChanges();
            }));
        }
        if (!this.pagination) {
            this.pagination = PaginationComponent.DEFAULT_PAGINATION;
        }
    }
    /**
     * @return {?}
     */
    get lastPage() {
        const { maxItems, totalItems } = this.pagination;
        return (totalItems && maxItems)
            ? Math.ceil(totalItems / maxItems)
            : 1;
    }
    /**
     * @return {?}
     */
    get current() {
        const { maxItems, skipCount } = this.pagination;
        return (skipCount && maxItems)
            ? Math.floor(skipCount / maxItems) + 1
            : 1;
    }
    /**
     * @return {?}
     */
    get isLastPage() {
        return this.current === this.lastPage;
    }
    /**
     * @return {?}
     */
    get isFirstPage() {
        return this.current === 1;
    }
    /**
     * @return {?}
     */
    get next() {
        return this.isLastPage ? this.current : this.current + 1;
    }
    /**
     * @return {?}
     */
    get previous() {
        return this.isFirstPage ? 1 : this.current - 1;
    }
    /**
     * @return {?}
     */
    get hasItems() {
        return this.pagination && this.pagination.count > 0;
    }
    /**
     * @return {?}
     */
    get isEmpty() {
        return !this.hasItems;
    }
    /**
     * @return {?}
     */
    get range() {
        const { skipCount, maxItems, totalItems } = this.pagination;
        const { isLastPage } = this;
        /** @type {?} */
        const start = totalItems ? skipCount + 1 : 0;
        /** @type {?} */
        const end = isLastPage ? totalItems : skipCount + maxItems;
        return [start, end];
    }
    /**
     * @return {?}
     */
    get pages() {
        return Array(this.lastPage)
            .fill('n')
            .map((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => (index + 1)));
    }
    /**
     * @return {?}
     */
    goNext() {
        if (this.hasItems) {
            /** @type {?} */
            const maxItems = this.pagination.maxItems;
            /** @type {?} */
            const skipCount = (this.next - 1) * maxItems;
            this.pagination.skipCount = skipCount;
            this.handlePaginationEvent(PaginationComponent.ACTIONS.NEXT_PAGE, {
                skipCount,
                maxItems
            });
        }
    }
    /**
     * @return {?}
     */
    goPrevious() {
        if (this.hasItems) {
            /** @type {?} */
            const maxItems = this.pagination.maxItems;
            /** @type {?} */
            const skipCount = (this.previous - 1) * maxItems;
            this.pagination.skipCount = skipCount;
            this.handlePaginationEvent(PaginationComponent.ACTIONS.PREV_PAGE, {
                skipCount,
                maxItems
            });
        }
    }
    /**
     * @param {?} pageNumber
     * @return {?}
     */
    onChangePageNumber(pageNumber) {
        if (this.hasItems) {
            /** @type {?} */
            const maxItems = this.pagination.maxItems;
            /** @type {?} */
            const skipCount = (pageNumber - 1) * maxItems;
            this.pagination.skipCount = skipCount;
            this.handlePaginationEvent(PaginationComponent.ACTIONS.CHANGE_PAGE_NUMBER, {
                skipCount,
                maxItems
            });
        }
    }
    /**
     * @param {?} maxItems
     * @return {?}
     */
    onChangePageSize(maxItems) {
        this.pagination.skipCount = 0;
        this.userPreferencesService.paginationSize = maxItems;
        this.handlePaginationEvent(PaginationComponent.ACTIONS.CHANGE_PAGE_SIZE, {
            skipCount: 0,
            maxItems
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @param {?} action
     * @param {?} params
     * @return {?}
     */
    handlePaginationEvent(action, params) {
        const { NEXT_PAGE, PREV_PAGE, CHANGE_PAGE_NUMBER, CHANGE_PAGE_SIZE } = PaginationComponent.ACTIONS;
        const { change, changePageNumber, changePageSize, nextPage, prevPage, pagination } = this;
        /** @type {?} */
        const paginationModel = Object.assign({}, pagination, params);
        if (action === NEXT_PAGE) {
            nextPage.emit(paginationModel);
        }
        if (action === PREV_PAGE) {
            prevPage.emit(paginationModel);
        }
        if (action === CHANGE_PAGE_NUMBER) {
            changePageNumber.emit(paginationModel);
        }
        if (action === CHANGE_PAGE_SIZE) {
            changePageSize.emit(paginationModel);
        }
        change.emit(params);
        if (this.target) {
            this.target.updatePagination(params);
        }
    }
}
PaginationComponent.DEFAULT_PAGINATION = new Pagination({
    skipCount: 0,
    maxItems: 25,
    totalItems: 0
});
PaginationComponent.ACTIONS = {
    NEXT_PAGE: 'NEXT_PAGE',
    PREV_PAGE: 'PREV_PAGE',
    CHANGE_PAGE_SIZE: 'CHANGE_PAGE_SIZE',
    CHANGE_PAGE_NUMBER: 'CHANGE_PAGE_NUMBER'
};
PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-pagination',
                host: { 'class': 'adf-pagination' },
                template: "<ng-container *ngIf=\"hasItems\">\n    <div class=\"adf-pagination__block adf-pagination__range-block\">\n        <span class=\"adf-pagination__range\">\n            {{\n                'CORE.PAGINATION.ITEMS_RANGE' | translate: {\n                    range: range.join('-'),\n                    total: pagination.totalItems\n                }\n            }}\n        </span>\n    </div>\n\n    <div class=\"adf-pagination__block adf-pagination__perpage-block\">\n        <span>\n            {{ 'CORE.PAGINATION.ITEMS_PER_PAGE' | translate }}\n        </span>\n\n        <span class=\"adf-pagination__max-items\">\n            {{ pagination.maxItems }}\n        </span>\n\n        <button\n            mat-icon-button\n            [attr.aria-label]=\"'CORE.PAGINATION.ARIA.ITEMS_PER_PAGE' | translate\"\n            [matMenuTriggerFor]=\"pageSizeMenu\">\n            <mat-icon>arrow_drop_down</mat-icon>\n        </button>\n\n        <mat-menu #pageSizeMenu=\"matMenu\" class=\"adf-pagination__page-selector\">\n            <button\n                mat-menu-item\n                *ngFor=\"let pageSize of supportedPageSizes\"\n                (click)=\"onChangePageSize(pageSize)\">\n                {{ pageSize }}\n            </button>\n        </mat-menu>\n    </div>\n\n    <div class=\"adf-pagination__block adf-pagination__actualinfo-block\">\n        <span class=\"adf-pagination__current-page\">\n            {{ 'CORE.PAGINATION.CURRENT_PAGE' | translate: { number: current } }}\n        </span>\n\n        <button\n            mat-icon-button\n            data-automation-id=\"page-selector\"\n            [attr.aria-label]=\"'CORE.PAGINATION.ARIA.CURRENT_PAGE' | translate\"\n            [matMenuTriggerFor]=\"pagesMenu\"\n            *ngIf=\"pages.length > 1\">\n            <mat-icon>arrow_drop_down</mat-icon>\n        </button>\n\n        <span class=\"adf-pagination__total-pages\">\n            {{ 'CORE.PAGINATION.TOTAL_PAGES' | translate: { total: pages.length } }}\n        </span>\n\n        <mat-menu #pagesMenu=\"matMenu\" class=\"adf-pagination__page-selector\">\n            <button\n                mat-menu-item\n                *ngFor=\"let pageNumber of pages\"\n                (click)=\"onChangePageNumber(pageNumber)\">\n                {{ pageNumber }}\n            </button>\n        </mat-menu>\n    </div>\n\n    <div class=\"adf-pagination__block adf-pagination__controls-block\">\n        <button\n            class=\"adf-pagination__previous-button\"\n            mat-icon-button\n            [attr.aria-label]=\"'CORE.PAGINATION.ARIA.PREVIOUS_PAGE' | translate\"\n            [disabled]=\"isFirstPage\"\n            (click)=\"goPrevious()\">\n            <mat-icon>keyboard_arrow_left</mat-icon>\n        </button>\n\n        <button\n            class=\"adf-pagination__next-button\"\n            mat-icon-button\n            [attr.aria-label]=\"'CORE.PAGINATION.ARIA.NEXT_PAGE' | translate\"\n            [disabled]=\"isLastPage\"\n            (click)=\"goNext()\">\n            <mat-icon>keyboard_arrow_right</mat-icon>\n        </button>\n    </div>\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
PaginationComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: UserPreferencesService }
];
PaginationComponent.propDecorators = {
    target: [{ type: Input }],
    supportedPageSizes: [{ type: Input }],
    pagination: [{ type: Input }],
    change: [{ type: Output }],
    changePageNumber: [{ type: Output }],
    changePageSize: [{ type: Output }],
    nextPage: [{ type: Output }],
    prevPage: [{ type: Output }],
    isEmpty: [{ type: HostBinding, args: ['class.adf-pagination__empty',] }]
};
if (false) {
    /** @type {?} */
    PaginationComponent.DEFAULT_PAGINATION;
    /** @type {?} */
    PaginationComponent.ACTIONS;
    /**
     * Component that provides custom pagination support.
     * @type {?}
     */
    PaginationComponent.prototype.target;
    /**
     * An array of page sizes.
     * @type {?}
     */
    PaginationComponent.prototype.supportedPageSizes;
    /**
     * Pagination object.
     * @type {?}
     */
    PaginationComponent.prototype.pagination;
    /**
     * Emitted when pagination changes in any way.
     * @type {?}
     */
    PaginationComponent.prototype.change;
    /**
     * Emitted when the page number changes.
     * @type {?}
     */
    PaginationComponent.prototype.changePageNumber;
    /**
     * Emitted when the page size changes.
     * @type {?}
     */
    PaginationComponent.prototype.changePageSize;
    /**
     * Emitted when the next page is requested.
     * @type {?}
     */
    PaginationComponent.prototype.nextPage;
    /**
     * Emitted when the previous page is requested.
     * @type {?}
     */
    PaginationComponent.prototype.prevPage;
    /**
     * @type {?}
     * @private
     */
    PaginationComponent.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    PaginationComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    PaginationComponent.prototype.userPreferencesService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvcmUvIiwic291cmNlcyI6WyJwYWdpbmF0aW9uL3BhZ2luYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFDSCx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsaUJBQWlCLEVBQzFGLGlCQUFpQixFQUFhLFdBQVcsRUFDNUMsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3BHLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQVUzQyxNQUFNLE9BQU8sbUJBQW1COzs7OztJQWlENUIsWUFBb0IsR0FBc0IsRUFBVSxzQkFBOEM7UUFBOUUsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFBVSwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCOzs7O1FBeEJsRyxlQUFVLEdBQW9CLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDOzs7O1FBSXJFLFdBQU0sR0FBa0MsSUFBSSxZQUFZLEVBQW1CLENBQUM7Ozs7UUFJNUUscUJBQWdCLEdBQWtDLElBQUksWUFBWSxFQUFtQixDQUFDOzs7O1FBSXRGLG1CQUFjLEdBQWtDLElBQUksWUFBWSxFQUFtQixDQUFDOzs7O1FBSXBGLGFBQVEsR0FBa0MsSUFBSSxZQUFZLEVBQW1CLENBQUM7Ozs7UUFJOUUsYUFBUSxHQUFrQyxJQUFJLFlBQVksRUFBbUIsQ0FBQztRQUV0RSxl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TCxTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFO2dCQUNuQyxxakdBQTBDO2dCQUUxQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7O2FBQ3hDOzs7O1lBbEJHLGlCQUFpQjtZQVFaLHNCQUFzQjs7O3FCQTJCMUIsS0FBSztpQ0FJTCxLQUFLO3lCQUlMLEtBQUs7cUJBSUwsTUFBTTsrQkFJTixNQUFNOzZCQUlOLE1BQU07dUJBSU4sTUFBTTt1QkFJTixNQUFNO3NCQXdFTixXQUFXLFNBQUMsNkJBQTZCOzs7O0lBbEgxQyx1Q0FJRzs7SUFFSCw0QkFLRTs7Ozs7SUFHRixxQ0FDMkI7Ozs7O0lBRzNCLGlEQUM2Qjs7Ozs7SUFHN0IseUNBQ3FFOzs7OztJQUdyRSxxQ0FDNEU7Ozs7O0lBRzVFLCtDQUNzRjs7Ozs7SUFHdEYsNkNBQ29GOzs7OztJQUdwRix1Q0FDOEU7Ozs7O0lBRzlFLHVDQUM4RTs7Ozs7SUFFOUUseUNBQTRDOzs7OztJQUVoQyxrQ0FBOEI7Ozs7O0lBQUUscURBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVmlld0VuY2Fwc3VsYXRpb24sXG4gICAgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSwgSG9zdEJpbmRpbmdcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBhZ2luYXRpb24gfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IFBhZ2luYXRlZENvbXBvbmVudCB9IGZyb20gJy4vcGFnaW5hdGVkLWNvbXBvbmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUGFnaW5hdGlvbkNvbXBvbmVudEludGVyZmFjZSB9IGZyb20gJy4vcGFnaW5hdGlvbi1jb21wb25lbnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJy4uL21vZGVscy9wYWdpbmF0aW9uLm1vZGVsJztcbmltcG9ydCB7IFVzZXJQcmVmZXJlbmNlc1NlcnZpY2UsIFVzZXJQcmVmZXJlbmNlVmFsdWVzIH0gZnJvbSAnLi4vc2VydmljZXMvdXNlci1wcmVmZXJlbmNlcy5zZXJ2aWNlJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtcGFnaW5hdGlvbicsXG4gICAgaG9zdDogeyAnY2xhc3MnOiAnYWRmLXBhZ2luYXRpb24nIH0sXG4gICAgdGVtcGxhdGVVcmw6ICcuL3BhZ2luYXRpb24uY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3BhZ2luYXRpb24uY29tcG9uZW50LnNjc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIFBhZ2luYXRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgUGFnaW5hdGlvbkNvbXBvbmVudEludGVyZmFjZSB7XG5cbiAgICBzdGF0aWMgREVGQVVMVF9QQUdJTkFUSU9OOiBQYWdpbmF0aW9uID0gbmV3IFBhZ2luYXRpb24oe1xuICAgICAgICBza2lwQ291bnQ6IDAsXG4gICAgICAgIG1heEl0ZW1zOiAyNSxcbiAgICAgICAgdG90YWxJdGVtczogMFxuICAgIH0pO1xuXG4gICAgc3RhdGljIEFDVElPTlMgPSB7XG4gICAgICAgIE5FWFRfUEFHRTogJ05FWFRfUEFHRScsXG4gICAgICAgIFBSRVZfUEFHRTogJ1BSRVZfUEFHRScsXG4gICAgICAgIENIQU5HRV9QQUdFX1NJWkU6ICdDSEFOR0VfUEFHRV9TSVpFJyxcbiAgICAgICAgQ0hBTkdFX1BBR0VfTlVNQkVSOiAnQ0hBTkdFX1BBR0VfTlVNQkVSJ1xuICAgIH07XG5cbiAgICAvKiogQ29tcG9uZW50IHRoYXQgcHJvdmlkZXMgY3VzdG9tIHBhZ2luYXRpb24gc3VwcG9ydC4gKi9cbiAgICBASW5wdXQoKVxuICAgIHRhcmdldDogUGFnaW5hdGVkQ29tcG9uZW50O1xuXG4gICAgLyoqIEFuIGFycmF5IG9mIHBhZ2Ugc2l6ZXMuICovXG4gICAgQElucHV0KClcbiAgICBzdXBwb3J0ZWRQYWdlU2l6ZXM6IG51bWJlcltdO1xuXG4gICAgLyoqIFBhZ2luYXRpb24gb2JqZWN0LiAqL1xuICAgIEBJbnB1dCgpXG4gICAgcGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsID0gUGFnaW5hdGlvbkNvbXBvbmVudC5ERUZBVUxUX1BBR0lOQVRJT047XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHBhZ2luYXRpb24gY2hhbmdlcyBpbiBhbnkgd2F5LiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPFBhZ2luYXRpb25Nb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPFBhZ2luYXRpb25Nb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHBhZ2UgbnVtYmVyIGNoYW5nZXMuICovXG4gICAgQE91dHB1dCgpXG4gICAgY2hhbmdlUGFnZU51bWJlcjogRXZlbnRFbWl0dGVyPFBhZ2luYXRpb25Nb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPFBhZ2luYXRpb25Nb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHBhZ2Ugc2l6ZSBjaGFuZ2VzLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGNoYW5nZVBhZ2VTaXplOiBFdmVudEVtaXR0ZXI8UGFnaW5hdGlvbk1vZGVsPiA9IG5ldyBFdmVudEVtaXR0ZXI8UGFnaW5hdGlvbk1vZGVsPigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgbmV4dCBwYWdlIGlzIHJlcXVlc3RlZC4gKi9cbiAgICBAT3V0cHV0KClcbiAgICBuZXh0UGFnZTogRXZlbnRFbWl0dGVyPFBhZ2luYXRpb25Nb2RlbD4gPSBuZXcgRXZlbnRFbWl0dGVyPFBhZ2luYXRpb25Nb2RlbD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHByZXZpb3VzIHBhZ2UgaXMgcmVxdWVzdGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHByZXZQYWdlOiBFdmVudEVtaXR0ZXI8UGFnaW5hdGlvbk1vZGVsPiA9IG5ldyBFdmVudEVtaXR0ZXI8UGFnaW5hdGlvbk1vZGVsPigpO1xuXG4gICAgcHJpdmF0ZSBvbkRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSB1c2VyUHJlZmVyZW5jZXNTZXJ2aWNlOiBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMudXNlclByZWZlcmVuY2VzU2VydmljZVxuICAgICAgICAgICAgLnNlbGVjdChVc2VyUHJlZmVyZW5jZVZhbHVlcy5QYWdpbmF0aW9uU2l6ZSlcbiAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZShwYWdTaXplID0+IHRoaXMucGFnaW5hdGlvbi5tYXhJdGVtcyA9IHBhZ1NpemUpO1xuXG4gICAgICAgIGlmICghdGhpcy5zdXBwb3J0ZWRQYWdlU2l6ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3VwcG9ydGVkUGFnZVNpemVzID0gdGhpcy51c2VyUHJlZmVyZW5jZXNTZXJ2aWNlLnN1cHBvcnRlZFBhZ2VTaXplcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy50YXJnZXQucGFnaW5hdGlvblxuICAgICAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUocGFnaW5hdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYWdpbmF0aW9uLmNvdW50ID09PSAwICYmICF0aGlzLmlzRmlyc3RQYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdvUHJldmlvdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbiA9IHBhZ2luYXRpb247XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5wYWdpbmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb24gPSBQYWdpbmF0aW9uQ29tcG9uZW50LkRFRkFVTFRfUEFHSU5BVElPTjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBsYXN0UGFnZSgpOiBudW1iZXIge1xuICAgICAgICBjb25zdCB7IG1heEl0ZW1zLCB0b3RhbEl0ZW1zIH0gPSB0aGlzLnBhZ2luYXRpb247XG5cbiAgICAgICAgcmV0dXJuICh0b3RhbEl0ZW1zICYmIG1heEl0ZW1zKVxuICAgICAgICAgICAgPyBNYXRoLmNlaWwodG90YWxJdGVtcyAvIG1heEl0ZW1zKVxuICAgICAgICAgICAgOiAxO1xuICAgIH1cblxuICAgIGdldCBjdXJyZW50KCk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHsgbWF4SXRlbXMsIHNraXBDb3VudCB9ID0gdGhpcy5wYWdpbmF0aW9uO1xuXG4gICAgICAgIHJldHVybiAoc2tpcENvdW50ICYmIG1heEl0ZW1zKVxuICAgICAgICAgICAgPyBNYXRoLmZsb29yKHNraXBDb3VudCAvIG1heEl0ZW1zKSArIDFcbiAgICAgICAgICAgIDogMTtcbiAgICB9XG5cbiAgICBnZXQgaXNMYXN0UGFnZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudCA9PT0gdGhpcy5sYXN0UGFnZTtcbiAgICB9XG5cbiAgICBnZXQgaXNGaXJzdFBhZ2UoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnQgPT09IDE7XG4gICAgfVxuXG4gICAgZ2V0IG5leHQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNMYXN0UGFnZSA/IHRoaXMuY3VycmVudCA6IHRoaXMuY3VycmVudCArIDE7XG4gICAgfVxuXG4gICAgZ2V0IHByZXZpb3VzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRmlyc3RQYWdlID8gMSA6IHRoaXMuY3VycmVudCAtIDE7XG4gICAgfVxuXG4gICAgZ2V0IGhhc0l0ZW1zKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdpbmF0aW9uICYmIHRoaXMucGFnaW5hdGlvbi5jb3VudCA+IDA7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hZGYtcGFnaW5hdGlvbl9fZW1wdHknKVxuICAgIGdldCBpc0VtcHR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuaGFzSXRlbXM7XG4gICAgfVxuXG4gICAgZ2V0IHJhbmdlKCk6IG51bWJlcltdIHtcbiAgICAgICAgY29uc3QgeyBza2lwQ291bnQsIG1heEl0ZW1zLCB0b3RhbEl0ZW1zIH0gPSB0aGlzLnBhZ2luYXRpb247XG4gICAgICAgIGNvbnN0IHsgaXNMYXN0UGFnZSB9ID0gdGhpcztcblxuICAgICAgICBjb25zdCBzdGFydCA9IHRvdGFsSXRlbXMgPyBza2lwQ291bnQgKyAxIDogMDtcbiAgICAgICAgY29uc3QgZW5kID0gaXNMYXN0UGFnZSA/IHRvdGFsSXRlbXMgOiBza2lwQ291bnQgKyBtYXhJdGVtcztcblxuICAgICAgICByZXR1cm4gW3N0YXJ0LCBlbmRdO1xuICAgIH1cblxuICAgIGdldCBwYWdlcygpOiBudW1iZXJbXSB7XG4gICAgICAgIHJldHVybiBBcnJheSh0aGlzLmxhc3RQYWdlKVxuICAgICAgICAgICAgLmZpbGwoJ24nKVxuICAgICAgICAgICAgLm1hcCgoaXRlbSwgaW5kZXgpID0+IChpbmRleCArIDEpKTtcbiAgICB9XG5cbiAgICBnb05leHQoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0l0ZW1zKSB7XG4gICAgICAgICAgICBjb25zdCBtYXhJdGVtcyA9IHRoaXMucGFnaW5hdGlvbi5tYXhJdGVtcztcbiAgICAgICAgICAgIGNvbnN0IHNraXBDb3VudCA9ICh0aGlzLm5leHQgLSAxKSAqIG1heEl0ZW1zO1xuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uLnNraXBDb3VudCA9IHNraXBDb3VudDtcblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVQYWdpbmF0aW9uRXZlbnQoUGFnaW5hdGlvbkNvbXBvbmVudC5BQ1RJT05TLk5FWFRfUEFHRSwge1xuICAgICAgICAgICAgICAgIHNraXBDb3VudCxcbiAgICAgICAgICAgICAgICBtYXhJdGVtc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnb1ByZXZpb3VzKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNJdGVtcykge1xuICAgICAgICAgICAgY29uc3QgbWF4SXRlbXMgPSB0aGlzLnBhZ2luYXRpb24ubWF4SXRlbXM7XG4gICAgICAgICAgICBjb25zdCBza2lwQ291bnQgPSAodGhpcy5wcmV2aW91cyAtIDEpICogbWF4SXRlbXM7XG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb24uc2tpcENvdW50ID0gc2tpcENvdW50O1xuXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVBhZ2luYXRpb25FdmVudChQYWdpbmF0aW9uQ29tcG9uZW50LkFDVElPTlMuUFJFVl9QQUdFLCB7XG4gICAgICAgICAgICAgICAgc2tpcENvdW50LFxuICAgICAgICAgICAgICAgIG1heEl0ZW1zXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQ2hhbmdlUGFnZU51bWJlcihwYWdlTnVtYmVyOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzSXRlbXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1heEl0ZW1zID0gdGhpcy5wYWdpbmF0aW9uLm1heEl0ZW1zO1xuICAgICAgICAgICAgY29uc3Qgc2tpcENvdW50ID0gKHBhZ2VOdW1iZXIgLSAxKSAqIG1heEl0ZW1zO1xuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uLnNraXBDb3VudCA9IHNraXBDb3VudDtcblxuICAgICAgICAgICAgdGhpcy5oYW5kbGVQYWdpbmF0aW9uRXZlbnQoUGFnaW5hdGlvbkNvbXBvbmVudC5BQ1RJT05TLkNIQU5HRV9QQUdFX05VTUJFUiwge1xuICAgICAgICAgICAgICAgIHNraXBDb3VudCxcbiAgICAgICAgICAgICAgICBtYXhJdGVtc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNoYW5nZVBhZ2VTaXplKG1heEl0ZW1zOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wYWdpbmF0aW9uLnNraXBDb3VudCA9IDA7XG4gICAgICAgIHRoaXMudXNlclByZWZlcmVuY2VzU2VydmljZS5wYWdpbmF0aW9uU2l6ZSA9IG1heEl0ZW1zO1xuICAgICAgICB0aGlzLmhhbmRsZVBhZ2luYXRpb25FdmVudChQYWdpbmF0aW9uQ29tcG9uZW50LkFDVElPTlMuQ0hBTkdFX1BBR0VfU0laRSwge1xuICAgICAgICAgICAgc2tpcENvdW50OiAwLFxuICAgICAgICAgICAgbWF4SXRlbXNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICBoYW5kbGVQYWdpbmF0aW9uRXZlbnQoYWN0aW9uOiBzdHJpbmcsIHBhcmFtczogUGFnaW5hdGlvbk1vZGVsKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIE5FWFRfUEFHRSxcbiAgICAgICAgICAgIFBSRVZfUEFHRSxcbiAgICAgICAgICAgIENIQU5HRV9QQUdFX05VTUJFUixcbiAgICAgICAgICAgIENIQU5HRV9QQUdFX1NJWkVcbiAgICAgICAgfSA9IFBhZ2luYXRpb25Db21wb25lbnQuQUNUSU9OUztcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBjaGFuZ2UsXG4gICAgICAgICAgICBjaGFuZ2VQYWdlTnVtYmVyLFxuICAgICAgICAgICAgY2hhbmdlUGFnZVNpemUsXG4gICAgICAgICAgICBuZXh0UGFnZSxcbiAgICAgICAgICAgIHByZXZQYWdlLFxuICAgICAgICAgICAgcGFnaW5hdGlvblxuICAgICAgICB9ID0gdGhpcztcblxuICAgICAgICBjb25zdCBwYWdpbmF0aW9uTW9kZWw6IFBhZ2luYXRpb25Nb2RlbCA9IE9iamVjdC5hc3NpZ24oe30sIHBhZ2luYXRpb24sIHBhcmFtcyk7XG5cbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gTkVYVF9QQUdFKSB7XG4gICAgICAgICAgICBuZXh0UGFnZS5lbWl0KHBhZ2luYXRpb25Nb2RlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uID09PSBQUkVWX1BBR0UpIHtcbiAgICAgICAgICAgIHByZXZQYWdlLmVtaXQocGFnaW5hdGlvbk1vZGVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24gPT09IENIQU5HRV9QQUdFX05VTUJFUikge1xuICAgICAgICAgICAgY2hhbmdlUGFnZU51bWJlci5lbWl0KHBhZ2luYXRpb25Nb2RlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uID09PSBDSEFOR0VfUEFHRV9TSVpFKSB7XG4gICAgICAgICAgICBjaGFuZ2VQYWdlU2l6ZS5lbWl0KHBhZ2luYXRpb25Nb2RlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGFuZ2UuZW1pdChwYXJhbXMpO1xuXG4gICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy50YXJnZXQudXBkYXRlUGFnaW5hdGlvbihwYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19