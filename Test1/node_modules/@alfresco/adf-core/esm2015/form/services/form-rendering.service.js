/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DynamicComponentMapper, DynamicComponentResolver } from '../../services/dynamic-component-mapper.service';
import { Injectable } from '@angular/core';
import { AmountWidgetComponent, CheckboxWidgetComponent, ContainerWidgetComponent, DateWidgetComponent, DisplayTextWidgetComponentComponent, DocumentWidgetComponent, DropdownWidgetComponent, DynamicTableWidgetComponent, FunctionalGroupWidgetComponent, HyperlinkWidgetComponent, MultilineTextWidgetComponentComponent, NumberWidgetComponent, PeopleWidgetComponent, RadioButtonsWidgetComponent, TextWidgetComponent, TypeaheadWidgetComponent, UnknownWidgetComponent, UploadWidgetComponent, DateTimeWidgetComponent } from './../components/widgets/index';
import * as i0 from "@angular/core";
export class FormRenderingService extends DynamicComponentMapper {
    constructor() {
        super();
        this.defaultValue = UnknownWidgetComponent;
        this.types = {
            'text': DynamicComponentResolver.fromType(TextWidgetComponent),
            'string': DynamicComponentResolver.fromType(TextWidgetComponent),
            'integer': DynamicComponentResolver.fromType(NumberWidgetComponent),
            'multi-line-text': DynamicComponentResolver.fromType(MultilineTextWidgetComponentComponent),
            'boolean': DynamicComponentResolver.fromType(CheckboxWidgetComponent),
            'dropdown': DynamicComponentResolver.fromType(DropdownWidgetComponent),
            'date': DynamicComponentResolver.fromType(DateWidgetComponent),
            'amount': DynamicComponentResolver.fromType(AmountWidgetComponent),
            'radio-buttons': DynamicComponentResolver.fromType(RadioButtonsWidgetComponent),
            'hyperlink': DynamicComponentResolver.fromType(HyperlinkWidgetComponent),
            'readonly-text': DynamicComponentResolver.fromType(DisplayTextWidgetComponentComponent),
            'readonly': DynamicComponentResolver.fromType(TextWidgetComponent),
            'typeahead': DynamicComponentResolver.fromType(TypeaheadWidgetComponent),
            'people': DynamicComponentResolver.fromType(PeopleWidgetComponent),
            'functional-group': DynamicComponentResolver.fromType(FunctionalGroupWidgetComponent),
            'dynamic-table': DynamicComponentResolver.fromType(DynamicTableWidgetComponent),
            'container': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'group': DynamicComponentResolver.fromType(ContainerWidgetComponent),
            'document': DynamicComponentResolver.fromType(DocumentWidgetComponent),
            'upload': DynamicComponentResolver.fromType(UploadWidgetComponent),
            'datetime': DynamicComponentResolver.fromType(DateTimeWidgetComponent)
        };
    }
}
FormRenderingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FormRenderingService.ctorParameters = () => [];
/** @nocollapse */ FormRenderingService.ngInjectableDef = i0.defineInjectable({ factory: function FormRenderingService_Factory() { return new FormRenderingService(); }, token: FormRenderingService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @protected
     */
    FormRenderingService.prototype.defaultValue;
    /**
     * @type {?}
     * @protected
     */
    FormRenderingService.prototype.types;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1yZW5kZXJpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BhbGZyZXNjby9hZGYtY29yZS8iLCJzb3VyY2VzIjpbImZvcm0vc2VydmljZXMvZm9ybS1yZW5kZXJpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsc0JBQXNCLEVBQW1DLHdCQUF3QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDcEosT0FBTyxFQUFFLFVBQVUsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLHVCQUF1QixFQUN2Qix3QkFBd0IsRUFDeEIsbUJBQW1CLEVBQ25CLG1DQUFtQyxFQUNuQyx1QkFBdUIsRUFDdkIsdUJBQXVCLEVBQ3ZCLDJCQUEyQixFQUMzQiw4QkFBOEIsRUFDOUIsd0JBQXdCLEVBQ3hCLHFDQUFxQyxFQUNyQyxxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLDJCQUEyQixFQUMzQixtQkFBbUIsRUFDbkIsd0JBQXdCLEVBQ3hCLHNCQUFzQixFQUN0QixxQkFBcUIsRUFDckIsdUJBQXVCLEVBQzFCLE1BQU0sK0JBQStCLENBQUM7O0FBS3ZDLE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxzQkFBc0I7SUEyQjVEO1FBQ0ksS0FBSyxFQUFFLENBQUM7UUExQkYsaUJBQVksR0FBYSxzQkFBc0IsQ0FBQztRQUNoRCxVQUFLLEdBQXVEO1lBQ2xFLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7WUFDOUQsUUFBUSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQztZQUNoRSxTQUFTLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ25FLGlCQUFpQixFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxxQ0FBcUMsQ0FBQztZQUMzRixTQUFTLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDO1lBQ3JFLFVBQVUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUM7WUFDdEUsTUFBTSxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQztZQUM5RCxRQUFRLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ2xFLGVBQWUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsMkJBQTJCLENBQUM7WUFDL0UsV0FBVyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUN4RSxlQUFlLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLG1DQUFtQyxDQUFDO1lBQ3ZGLFVBQVUsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7WUFDbEUsV0FBVyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUN4RSxRQUFRLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1lBQ2xFLGtCQUFrQixFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyw4QkFBOEIsQ0FBQztZQUNyRixlQUFlLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLDJCQUEyQixDQUFDO1lBQy9FLFdBQVcsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUM7WUFDeEUsT0FBTyxFQUFFLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQztZQUNwRSxVQUFVLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDO1lBQ3RFLFFBQVEsRUFBRyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUM7WUFDbkUsVUFBVSxFQUFHLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztTQUMxRSxDQUFDO0lBSUYsQ0FBQzs7O1lBaENKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7Ozs7Ozs7OztJQUdHLDRDQUEwRDs7Ozs7SUFDMUQscUNBc0JFIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgQWxmcmVzY28gU29mdHdhcmUsIEx0ZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgRHluYW1pY0NvbXBvbmVudE1hcHBlciwgRHluYW1pY0NvbXBvbmVudFJlc29sdmVGdW5jdGlvbiwgRHluYW1pY0NvbXBvbmVudFJlc29sdmVyIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZHluYW1pYy1jb21wb25lbnQtbWFwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICAgIEFtb3VudFdpZGdldENvbXBvbmVudCxcbiAgICBDaGVja2JveFdpZGdldENvbXBvbmVudCxcbiAgICBDb250YWluZXJXaWRnZXRDb21wb25lbnQsXG4gICAgRGF0ZVdpZGdldENvbXBvbmVudCxcbiAgICBEaXNwbGF5VGV4dFdpZGdldENvbXBvbmVudENvbXBvbmVudCxcbiAgICBEb2N1bWVudFdpZGdldENvbXBvbmVudCxcbiAgICBEcm9wZG93bldpZGdldENvbXBvbmVudCxcbiAgICBEeW5hbWljVGFibGVXaWRnZXRDb21wb25lbnQsXG4gICAgRnVuY3Rpb25hbEdyb3VwV2lkZ2V0Q29tcG9uZW50LFxuICAgIEh5cGVybGlua1dpZGdldENvbXBvbmVudCxcbiAgICBNdWx0aWxpbmVUZXh0V2lkZ2V0Q29tcG9uZW50Q29tcG9uZW50LFxuICAgIE51bWJlcldpZGdldENvbXBvbmVudCxcbiAgICBQZW9wbGVXaWRnZXRDb21wb25lbnQsXG4gICAgUmFkaW9CdXR0b25zV2lkZ2V0Q29tcG9uZW50LFxuICAgIFRleHRXaWRnZXRDb21wb25lbnQsXG4gICAgVHlwZWFoZWFkV2lkZ2V0Q29tcG9uZW50LFxuICAgIFVua25vd25XaWRnZXRDb21wb25lbnQsXG4gICAgVXBsb2FkV2lkZ2V0Q29tcG9uZW50LFxuICAgIERhdGVUaW1lV2lkZ2V0Q29tcG9uZW50XG59IGZyb20gJy4vLi4vY29tcG9uZW50cy93aWRnZXRzL2luZGV4JztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBGb3JtUmVuZGVyaW5nU2VydmljZSBleHRlbmRzIER5bmFtaWNDb21wb25lbnRNYXBwZXIge1xuXG4gICAgcHJvdGVjdGVkIGRlZmF1bHRWYWx1ZTogVHlwZTx7fT4gPSBVbmtub3duV2lkZ2V0Q29tcG9uZW50O1xuICAgIHByb3RlY3RlZCB0eXBlczogeyBba2V5OiBzdHJpbmddOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZUZ1bmN0aW9uIH0gPSB7XG4gICAgICAgICd0ZXh0JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFRleHRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnc3RyaW5nJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFRleHRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnaW50ZWdlcic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShOdW1iZXJXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnbXVsdGktbGluZS10ZXh0JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKE11bHRpbGluZVRleHRXaWRnZXRDb21wb25lbnRDb21wb25lbnQpLFxuICAgICAgICAnYm9vbGVhbic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDaGVja2JveFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkcm9wZG93bic6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEcm9wZG93bldpZGdldENvbXBvbmVudCksXG4gICAgICAgICdkYXRlJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKERhdGVXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnYW1vdW50JzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKEFtb3VudFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICdyYWRpby1idXR0b25zJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKFJhZGlvQnV0dG9uc1dpZGdldENvbXBvbmVudCksXG4gICAgICAgICdoeXBlcmxpbmsnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoSHlwZXJsaW5rV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3JlYWRvbmx5LXRleHQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRGlzcGxheVRleHRXaWRnZXRDb21wb25lbnRDb21wb25lbnQpLFxuICAgICAgICAncmVhZG9ubHknOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoVGV4dFdpZGdldENvbXBvbmVudCksXG4gICAgICAgICd0eXBlYWhlYWQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoVHlwZWFoZWFkV2lkZ2V0Q29tcG9uZW50KSxcbiAgICAgICAgJ3Blb3BsZSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShQZW9wbGVXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZnVuY3Rpb25hbC1ncm91cCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShGdW5jdGlvbmFsR3JvdXBXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZHluYW1pYy10YWJsZSc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShEeW5hbWljVGFibGVXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnY29udGFpbmVyJzogRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKENvbnRhaW5lcldpZGdldENvbXBvbmVudCksXG4gICAgICAgICdncm91cCc6IER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShDb250YWluZXJXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZG9jdW1lbnQnOiBEeW5hbWljQ29tcG9uZW50UmVzb2x2ZXIuZnJvbVR5cGUoRG9jdW1lbnRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAndXBsb2FkJzogIER5bmFtaWNDb21wb25lbnRSZXNvbHZlci5mcm9tVHlwZShVcGxvYWRXaWRnZXRDb21wb25lbnQpLFxuICAgICAgICAnZGF0ZXRpbWUnOiAgRHluYW1pY0NvbXBvbmVudFJlc29sdmVyLmZyb21UeXBlKERhdGVUaW1lV2lkZ2V0Q29tcG9uZW50KVxuICAgIH07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG59XG4iXX0=