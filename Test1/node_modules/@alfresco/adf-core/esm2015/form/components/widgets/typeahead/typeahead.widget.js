/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:component-selector  */
import { LogService } from '../../../../services/log.service';
import { ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { Component, ViewEncapsulation } from '@angular/core';
import { FormService } from './../../../services/form.service';
import { baseHost, WidgetComponent } from './../widget.component';
export class TypeaheadWidgetComponent extends WidgetComponent {
    /**
     * @param {?} formService
     * @param {?} logService
     */
    constructor(formService, logService) {
        super(formService);
        this.formService = formService;
        this.logService = logService;
        this.minTermLength = 1;
        this.options = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.field.form.taskId && this.field.restUrl) {
            this.getValuesByTaskId();
        }
        else if (this.field.form.processDefinitionId && this.field.restUrl) {
            this.getValuesByProcessDefinitionId();
        }
        if (this.isReadOnlyType()) {
            this.value = this.field.value;
        }
    }
    /**
     * @return {?}
     */
    getValuesByTaskId() {
        this.formService
            .getRestFieldValues(this.field.form.taskId, this.field.id)
            .subscribe((/**
         * @param {?} formFieldOption
         * @return {?}
         */
        (formFieldOption) => {
            /** @type {?} */
            const options = formFieldOption || [];
            this.field.options = options;
            /** @type {?} */
            const fieldValue = this.field.value;
            if (fieldValue) {
                /** @type {?} */
                const toSelect = options.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => item.id === fieldValue || item.name.toLocaleLowerCase() === fieldValue.toLocaleLowerCase()));
                if (toSelect) {
                    this.value = toSelect.name;
                }
            }
            this.onFieldChanged(this.field);
            this.field.updateForm();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err)));
    }
    /**
     * @return {?}
     */
    getValuesByProcessDefinitionId() {
        this.formService
            .getRestFieldValuesByProcessId(this.field.form.processDefinitionId, this.field.id)
            .subscribe((/**
         * @param {?} formFieldOption
         * @return {?}
         */
        (formFieldOption) => {
            /** @type {?} */
            const options = formFieldOption || [];
            this.field.options = options;
            /** @type {?} */
            const fieldValue = this.field.value;
            if (fieldValue) {
                /** @type {?} */
                const toSelect = options.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => item.id === fieldValue));
                if (toSelect) {
                    this.value = toSelect.name;
                }
            }
            this.onFieldChanged(this.field);
            this.field.updateForm();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => this.handleError(err)));
    }
    /**
     * @return {?}
     */
    getOptions() {
        /** @type {?} */
        const val = this.value.trim().toLocaleLowerCase();
        return this.field.options.filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            /** @type {?} */
            const name = item.name.toLocaleLowerCase();
            return name.indexOf(val) > -1;
        }));
    }
    /**
     * @param {?} optionName
     * @return {?}
     */
    isValidOptionName(optionName) {
        /** @type {?} */
        const option = this.field.options.find((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item.name && item.name.toLocaleLowerCase() === optionName.toLocaleLowerCase()));
        return option ? true : false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyUp(event) {
        if (this.value && this.value.trim().length >= this.minTermLength && this.oldValue !== this.value) {
            if (event.keyCode !== ESCAPE && event.keyCode !== ENTER) {
                if (this.value.length >= this.minTermLength) {
                    this.options = this.getOptions();
                    this.oldValue = this.value;
                    if (this.isValidOptionName(this.value)) {
                        this.field.value = this.options[0].id;
                    }
                }
            }
        }
        if (this.isValueDefined() && this.value.trim().length === 0) {
            this.oldValue = this.value;
            this.options = [];
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    onItemSelect(item) {
        if (item) {
            this.field.value = item.id;
            this.value = item.name;
            this.onFieldChanged(this.field);
        }
    }
    /**
     * @return {?}
     */
    validate() {
        this.field.value = this.value;
    }
    /**
     * @return {?}
     */
    isValueDefined() {
        return this.value !== null && this.value !== undefined;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        this.logService.error(error);
    }
    /**
     * @return {?}
     */
    isReadOnlyType() {
        return this.field.type === 'readonly' ? true : false;
    }
}
TypeaheadWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'typeahead-widget',
                template: "<div class=\"adf-typeahead-widget-container\">\n    <div class=\"adf-typeahead-widget {{field.className}}\"\n        [class.is-dirty]=\"value\"\n        [class.adf-invalid]=\"!field.isValid\"\n        [class.adf-readonly]=\"field.readOnly\"\n        id=\"typehead-div\">\n        <mat-form-field>\n            <label class=\"adf-label\" [attr.for]=\"field.id\">{{field.name | translate }}</label>\n            <input matInput class=\"adf-input\"\n                   type=\"text\"\n                   [id]=\"field.id\"\n                   [(ngModel)]=\"value\"\n                   (ngModelChange)=\"validate()\"\n                   (keyup)=\"onKeyUp($event)\"\n                   [disabled]=\"field.readOnly\"\n                   placeholder=\"{{field.placeholder}}\"\n                   [matAutocomplete]=\"auto\">\n            <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"onItemSelect($event.option.value)\">\n                <mat-option *ngFor=\"let item of options\" [value]=\"item\">\n                    <span [id]=\"field.name+'_option_'+item.id\">{{item.name}}</span>\n                </mat-option>\n            </mat-autocomplete>\n        </mat-form-field>\n\n        <error-widget [error]=\"field.validationSummary\"></error-widget>\n        <error-widget *ngIf=\"isInvalidFieldRequired()\" required=\"{{ 'FORM.FIELD.REQUIRED' | translate }}\"></error-widget>\n    </div>\n</div>\n",
                host: baseHost,
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-typeahead-widget-container{position:relative;display:block}.adf-typeahead-widget{width:100%}"]
            }] }
];
/** @nocollapse */
TypeaheadWidgetComponent.ctorParameters = () => [
    { type: FormService },
    { type: LogService }
];
if (false) {
    /** @type {?} */
    TypeaheadWidgetComponent.prototype.minTermLength;
    /** @type {?} */
    TypeaheadWidgetComponent.prototype.value;
    /** @type {?} */
    TypeaheadWidgetComponent.prototype.oldValue;
    /** @type {?} */
    TypeaheadWidgetComponent.prototype.options;
    /** @type {?} */
    TypeaheadWidgetComponent.prototype.formService;
    /**
     * @type {?}
     * @private
     */
    TypeaheadWidgetComponent.prototype.logService;
}
//# sourceMappingURL=data:application/json;base64,