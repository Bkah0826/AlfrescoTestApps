/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export class WidgetVisibilityModel {
    /**
     * @param {?=} json
     */
    constructor(json) {
        this.json = json;
        if (json) {
            this.operator = json.operator;
            this.nextCondition = new WidgetVisibilityModel(json.nextCondition);
            this.nextConditionOperator = json.nextConditionOperator;
            this.rightRestResponseId = json.rightRestResponseId;
            this.rightFormFieldId = json.rightFormFieldId;
            this.leftFormFieldId = json.leftFormFieldId;
            this.leftRestResponseId = json.leftRestResponseId;
        }
        else {
            this.json = {};
        }
    }
    /**
     * @param {?} leftType
     * @return {?}
     */
    set leftType(leftType) {
        this.json.leftType = leftType;
    }
    /**
     * @param {?} rightType
     * @return {?}
     */
    set rightType(rightType) {
        this.json.rightType = rightType;
    }
    /**
     * @param {?} leftValue
     * @return {?}
     */
    set leftValue(leftValue) {
        this.json.leftValue = leftValue;
    }
    /**
     * @param {?} rightValue
     * @return {?}
     */
    set rightValue(rightValue) {
        this.json.rightValue = rightValue;
    }
    /**
     * @return {?}
     */
    get leftType() {
        if (this.leftFormFieldId) {
            return WidgetTypeEnum.field;
        }
        else if (this.leftRestResponseId) {
            return WidgetTypeEnum.variable;
        }
        else if (!!this.json.leftType) {
            return this.json.leftType;
        }
    }
    /**
     * @return {?}
     */
    get leftValue() {
        if (this.json.leftValue) {
            return this.json.leftValue;
        }
        else if (this.leftFormFieldId) {
            return this.leftFormFieldId;
        }
        else {
            return this.leftRestResponseId;
        }
    }
    /**
     * @return {?}
     */
    get rightType() {
        if (!!this.json.rightType) {
            return this.json.rightType;
        }
        else if (this.json.rightValue) {
            return WidgetTypeEnum.value;
        }
        else if (this.rightRestResponseId) {
            return WidgetTypeEnum.variable;
        }
        else if (this.rightFormFieldId) {
            return WidgetTypeEnum.field;
        }
    }
    /**
     * @return {?}
     */
    get rightValue() {
        if (this.json.rightValue) {
            return this.json.rightValue;
        }
        else if (this.rightFormFieldId) {
            return this.rightFormFieldId;
        }
        else {
            return this.rightRestResponseId;
        }
    }
}
if (false) {
    /** @type {?} */
    WidgetVisibilityModel.prototype.rightRestResponseId;
    /** @type {?} */
    WidgetVisibilityModel.prototype.rightFormFieldId;
    /** @type {?} */
    WidgetVisibilityModel.prototype.leftRestResponseId;
    /** @type {?} */
    WidgetVisibilityModel.prototype.leftFormFieldId;
    /** @type {?} */
    WidgetVisibilityModel.prototype.operator;
    /** @type {?} */
    WidgetVisibilityModel.prototype.nextCondition;
    /** @type {?} */
    WidgetVisibilityModel.prototype.nextConditionOperator;
    /**
     * @type {?}
     * @private
     */
    WidgetVisibilityModel.prototype.json;
}
/** @enum {string} */
const WidgetTypeEnum = {
    field: 'field',
    variable: 'variable',
    value: 'value',
};
export { WidgetTypeEnum };
//# sourceMappingURL=data:application/json;base64,