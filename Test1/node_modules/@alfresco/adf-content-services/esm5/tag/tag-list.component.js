/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Output, ViewEncapsulation } from '@angular/core';
import { TagService } from './services/tag.service';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * This component provide a list of all the tag inside the ECM
 */
var TagListComponent = /** @class */ (function () {
    /**
     * Constructor
     * @param tagService
     */
    function TagListComponent(tagService) {
        var _this = this;
        this.tagService = tagService;
        /**
         * Emitted when a tag is selected.
         */
        this.result = new EventEmitter();
        /**
         * Array of tags that are displayed
         */
        this.tagsEntries = [];
        /**
         * Number of items per iteration
         */
        this.size = 10;
        this.isLoading = false;
        this.isSizeMinimum = true;
        this.onDestroy$ = new Subject();
        this.defaultPagination = {
            skipCount: 0,
            maxItems: this.size,
            hasMoreItems: false
        };
        this.pagination = this.defaultPagination;
        this.tagService.refresh
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.tagsEntries = [];
            _this.refreshTag(_this.defaultPagination);
        }));
    }
    /**
     * @return {?}
     */
    TagListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.refreshTag(this.defaultPagination);
    };
    /**
     * @return {?}
     */
    TagListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    };
    /**
     * @param {?=} opts
     * @return {?}
     */
    TagListComponent.prototype.refreshTag = /**
     * @param {?=} opts
     * @return {?}
     */
    function (opts) {
        var _this = this;
        this.tagService.getAllTheTags(opts).subscribe((/**
         * @param {?} tags
         * @return {?}
         */
        function (tags) {
            _this.tagsEntries = _this.tagsEntries.concat(tags.list.entries);
            _this.pagination = tags.list.pagination;
            _this.result.emit(_this.tagsEntries);
            _this.isLoading = false;
        }));
    };
    /**
     * @return {?}
     */
    TagListComponent.prototype.loadMoreTags = /**
     * @return {?}
     */
    function () {
        if (this.pagination.hasMoreItems) {
            this.isLoading = true;
            this.isSizeMinimum = false;
            this.refreshTag({
                skipCount: this.pagination.skipCount + this.pagination.count,
                maxItems: this.size
            });
        }
    };
    /**
     * @return {?}
     */
    TagListComponent.prototype.loadLessTags = /**
     * @return {?}
     */
    function () {
        this.isSizeMinimum = false;
        this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);
        this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;
        this.pagination.hasMoreItems = true;
        if (this.tagsEntries.length <= this.size) {
            this.isSizeMinimum = true;
        }
    };
    TagListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-tag-list',
                    template: "<mat-chip-list class=\"adf-tag-chips-list\">\n    <div class=\"adf-list-tag\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n        <mat-chip class=\"adf-primary-background-color\">\n            <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n        </mat-chip>\n    </div>\n</mat-chip-list>\n\n<div class=\"adf-tag-list-controls\">\n    <button\n        *ngIf=\"!isSizeMinimum\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-fewer-tags\"\n        mat-icon-button\n        (click)=\"loadLessTags()\">\n        <mat-icon>keyboard_arrow_up</mat-icon>\n    </button>\n    <button\n        *ngIf=\"pagination.hasMoreItems\"\n        [disabled]=\"isLoading\"\n        data-automation-id=\"show-more-tags\"\n        mat-icon-button\n        (click)=\"loadMoreTags()\">\n        <mat-icon>keyboard_arrow_down</mat-icon>\n    </button>\n</div>\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".adf-tag-chips-list,.adf-tag-chips-list div{display:flex;flex-direction:column}.adf-list-tag{display:block;font-size:16px}.adf-tag-list-controls{margin-top:30px;display:flex;justify-content:center}"]
                }] }
    ];
    /** @nocollapse */
    TagListComponent.ctorParameters = function () { return [
        { type: TagService }
    ]; };
    TagListComponent.propDecorators = {
        result: [{ type: Output }]
    };
    return TagListComponent;
}());
export { TagListComponent };
if (false) {
    /**
     * Emitted when a tag is selected.
     * @type {?}
     */
    TagListComponent.prototype.result;
    /**
     * Array of tags that are displayed
     * @type {?}
     */
    TagListComponent.prototype.tagsEntries;
    /**
     * Number of items per iteration
     * @type {?}
     */
    TagListComponent.prototype.size;
    /** @type {?} */
    TagListComponent.prototype.defaultPagination;
    /** @type {?} */
    TagListComponent.prototype.pagination;
    /** @type {?} */
    TagListComponent.prototype.isLoading;
    /** @type {?} */
    TagListComponent.prototype.isSizeMinimum;
    /**
     * @type {?}
     * @private
     */
    TagListComponent.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    TagListComponent.prototype.tagService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFsZnJlc2NvL2FkZi1jb250ZW50LXNlcnZpY2VzLyIsInNvdXJjZXMiOlsidGFnL3RhZy1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBVSxNQUFNLEVBQUUsaUJBQWlCLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXBELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBSzNDO0lBOEJJOzs7T0FHRztJQUNILDBCQUFvQixVQUFzQjtRQUExQyxpQkFnQkM7UUFoQm1CLGVBQVUsR0FBVixVQUFVLENBQVk7Ozs7UUF4QjFDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOzs7O1FBSzVCLGdCQUFXLEdBQVEsRUFBRSxDQUFDOzs7O1FBS3RCLFNBQUksR0FBVyxFQUFFLENBQUM7UUFLbEIsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUNsQixrQkFBYSxHQUFHLElBQUksQ0FBQztRQUViLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBUXhDLElBQUksQ0FBQyxpQkFBaUIsR0FBRztZQUNyQixTQUFTLEVBQUUsQ0FBQztZQUNaLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNuQixZQUFZLEVBQUUsS0FBSztTQUN0QixDQUFDO1FBRUYsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFFekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPO2FBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ2hDLFNBQVM7OztR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bnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBPdXRwdXQsIFZpZXdFbmNhcHN1bGF0aW9uLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRhZ1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3RhZy5zZXJ2aWNlJztcbmltcG9ydCB7IFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJ0BhbGZyZXNjby9hZGYtY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgcHJvdmlkZSBhIGxpc3Qgb2YgYWxsIHRoZSB0YWcgaW5zaWRlIHRoZSBFQ01cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdhZGYtdGFnLWxpc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90YWctbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdGFnLWxpc3QuY29tcG9uZW50LnNjc3MnXSxcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIFRhZ0xpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIGEgdGFnIGlzIHNlbGVjdGVkLiAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlc3VsdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIHRhZ3MgdGhhdCBhcmUgZGlzcGxheWVkXG4gICAgICovXG4gICAgdGFnc0VudHJpZXM6IGFueSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIGl0ZW1zIHBlciBpdGVyYXRpb25cbiAgICAgKi9cbiAgICBzaXplOiBudW1iZXIgPSAxMDtcblxuICAgIGRlZmF1bHRQYWdpbmF0aW9uOiBQYWdpbmF0aW9uTW9kZWw7XG4gICAgcGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsO1xuXG4gICAgaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgaXNTaXplTWluaW11bSA9IHRydWU7XG5cbiAgICBwcml2YXRlIG9uRGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gdGFnU2VydmljZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdGFnU2VydmljZTogVGFnU2VydmljZSkge1xuXG4gICAgICAgIHRoaXMuZGVmYXVsdFBhZ2luYXRpb24gPSB7XG4gICAgICAgICAgICBza2lwQ291bnQ6IDAsXG4gICAgICAgICAgICBtYXhJdGVtczogdGhpcy5zaXplLFxuICAgICAgICAgICAgaGFzTW9yZUl0ZW1zOiBmYWxzZVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucGFnaW5hdGlvbiA9IHRoaXMuZGVmYXVsdFBhZ2luYXRpb247XG5cbiAgICAgICAgdGhpcy50YWdTZXJ2aWNlLnJlZnJlc2hcbiAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy50YWdzRW50cmllcyA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFRhZyh0aGlzLmRlZmF1bHRQYWdpbmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnJlZnJlc2hUYWcodGhpcy5kZWZhdWx0UGFnaW5hdGlvbik7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMub25EZXN0cm95JC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQuY29tcGxldGUoKTtcbiAgICB9XG5cbiAgICByZWZyZXNoVGFnKG9wdHM/OiBhbnkpIHtcbiAgICAgICAgdGhpcy50YWdTZXJ2aWNlLmdldEFsbFRoZVRhZ3Mob3B0cykuc3Vic2NyaWJlKCh0YWdzOiBhbnkpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGFnc0VudHJpZXMgPSB0aGlzLnRhZ3NFbnRyaWVzLmNvbmNhdCh0YWdzLmxpc3QuZW50cmllcyk7XG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb24gPSB0YWdzLmxpc3QucGFnaW5hdGlvbjtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0LmVtaXQodGhpcy50YWdzRW50cmllcyk7XG4gICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2FkTW9yZVRhZ3MoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhZ2luYXRpb24uaGFzTW9yZUl0ZW1zKSB7XG4gICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmlzU2l6ZU1pbmltdW0gPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVGFnKHtcbiAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHRoaXMucGFnaW5hdGlvbi5za2lwQ291bnQgKyB0aGlzLnBhZ2luYXRpb24uY291bnQsXG4gICAgICAgICAgICAgICAgbWF4SXRlbXM6IHRoaXMuc2l6ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsb2FkTGVzc1RhZ3MoKSB7XG4gICAgICAgIHRoaXMuaXNTaXplTWluaW11bSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRhZ3NFbnRyaWVzID0gdGhpcy50YWdzRW50cmllcy5zbGljZSgwLCB0aGlzLnRhZ3NFbnRyaWVzLmxlbmd0aCAtIHRoaXMucGFnaW5hdGlvbi5jb3VudCk7XG4gICAgICAgIHRoaXMucGFnaW5hdGlvbi5za2lwQ291bnQgPSB0aGlzLnBhZ2luYXRpb24uc2tpcENvdW50IC0gdGhpcy5wYWdpbmF0aW9uLmNvdW50O1xuICAgICAgICB0aGlzLnBhZ2luYXRpb24uaGFzTW9yZUl0ZW1zID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcy50YWdzRW50cmllcy5sZW5ndGggPD0gdGhpcy5zaXplKSB7XG4gICAgICAgICAgICB0aGlzLmlzU2l6ZU1pbmltdW0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19