/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SearchService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
/**
 * Internal service used by ContentNodeSelector component.
 */
var ContentNodeSelectorService = /** @class */ (function () {
    function ContentNodeSelectorService(searchService) {
        this.searchService = searchService;
    }
    /**
     * Performs a search for content node selection
     *
     * @param searchTerm    The term to search for
     * @param rootNodeId    The root is to start the search from
     * @param skipCount     From where to start the loading
     * @param maxItems      How many items to load
     * @param [extraNodeIds]  List of extra node ids to search from. This last parameter is necessary when
     * the rootNodeId is one of the supported aliases (e.g. '-my-', '-root-', '-mysites-', etc.)
     * and search is not supported for that alias, but can be performed on its corresponding nodes.
     */
    /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    ContentNodeSelectorService.prototype.search = /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    function (searchTerm, rootNodeId, skipCount, maxItems, extraNodeIds) {
        if (rootNodeId === void 0) { rootNodeId = null; }
        if (skipCount === void 0) { skipCount = 0; }
        if (maxItems === void 0) { maxItems = 25; }
        /** @type {?} */
        var extraParentFiltering = '';
        if (extraNodeIds && extraNodeIds.length) {
            extraNodeIds
                .filter((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return id !== rootNodeId; }))
                .forEach((/**
             * @param {?} extraId
             * @return {?}
             */
            function (extraId) {
                extraParentFiltering += " OR ANCESTOR:'workspace://SpacesStore/" + extraId + "'";
            }));
        }
        /** @type {?} */
        var parentFiltering = rootNodeId ? [{ query: "ANCESTOR:'workspace://SpacesStore/" + rootNodeId + "'" + extraParentFiltering }] : [];
        /** @type {?} */
        var defaultSearchNode = {
            query: {
                query: searchTerm + "* OR name:" + searchTerm + "*"
            },
            include: ['path', 'allowableOperations', 'properties'],
            paging: {
                maxItems: maxItems,
                skipCount: skipCount
            },
            filterQueries: tslib_1.__spread([
                { query: "TYPE:'cm:folder'" },
                { query: 'NOT cm:creator:System' }
            ], parentFiltering),
            scope: {
                locations: ['nodes']
            }
        };
        return this.searchService.searchByQueryBody(defaultSearchNode);
    };
    ContentNodeSelectorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ContentNodeSelectorService.ctorParameters = function () { return [
        { type: SearchService }
    ]; };
    /** @nocollapse */ ContentNodeSelectorService.ngInjectableDef = i0.defineInjectable({ factory: function ContentNodeSelectorService_Factory() { return new ContentNodeSelectorService(i0.inject(i1.SearchService)); }, token: ContentNodeSelectorService, providedIn: "root" });
    return ContentNodeSelectorService;
}());
export { ContentNodeSelectorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ContentNodeSelectorService.prototype.searchService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJjb250ZW50LW5vZGUtc2VsZWN0b3IvY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFPM0M7SUFLSSxvQ0FBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFDaEQsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7Ozs7Ozs7Ozs7O0lBQ0ksMkNBQU07Ozs7Ozs7Ozs7SUFBYixVQUFjLFVBQWtCLEVBQUUsVUFBeUIsRUFBRSxTQUFxQixFQUFFLFFBQXFCLEVBQUUsWUFBdUI7UUFBaEcsMkJBQUEsRUFBQSxpQkFBeUI7UUFBRSwwQkFBQSxFQUFBLGFBQXFCO1FBQUUseUJBQUEsRUFBQSxhQUFxQjs7WUFFakcsb0JBQW9CLEdBQUcsRUFBRTtRQUU3QixJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ3JDLFlBQVk7aUJBQ1AsTUFBTTs7OztZQUFDLFVBQUMsRUFBRSxJQUFLLE9BQUEsRUFBRSxLQUFLLFVBQVUsRUFBakIsQ0FBaUIsRUFBQztpQkFDakMsT0FBTzs7OztZQUFDLFVBQUMsT0FBTztnQkFDYixvQkFBb0IsSUFBSSwyQ0FBeUMsT0FBTyxNQUFHLENBQUM7WUFDaEYsQ0FBQyxFQUFDLENBQUM7U0FDVjs7WUFFSyxlQUFlLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLHVDQUFxQyxVQUFVLFNBQUksb0JBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFOztZQUUxSCxpQkFBaUIsR0FBUTtZQUMzQixLQUFLLEVBQUU7Z0JBQ0gsS0FBSyxFQUFLLFVBQVUsa0JBQWEsVUFBVSxNQUFHO2FBQ2pEO1lBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLHFCQUFxQixFQUFFLFlBQVksQ0FBQztZQUN0RCxNQUFNLEVBQUU7Z0JBQ0osUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLFNBQVMsRUFBRSxTQUFTO2FBQ3ZCO1lBQ0QsYUFBYTtnQkFDVCxFQUFFLEtBQUssRUFBRSxrQkFBa0IsRUFBRTtnQkFDN0IsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUU7ZUFDL0IsZUFBZSxDQUNyQjtZQUNELEtBQUssRUFBRTtnQkFDSCxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUM7YUFDdkI7U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ25FLENBQUM7O2dCQXJESixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQVZRLGFBQWE7OztxQ0FqQnRCO0NBK0VDLEFBdERELElBc0RDO1NBbkRZLDBCQUEwQjs7Ozs7O0lBRXZCLG1EQUFvQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7IFNlYXJjaFNlcnZpY2UgfSBmcm9tICdAYWxmcmVzY28vYWRmLWNvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTm9kZVBhZ2luZyB9IGZyb20gJ0BhbGZyZXNjby9qcy1hcGknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEludGVybmFsIHNlcnZpY2UgdXNlZCBieSBDb250ZW50Tm9kZVNlbGVjdG9yIGNvbXBvbmVudC5cbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDb250ZW50Tm9kZVNlbGVjdG9yU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlYXJjaFNlcnZpY2U6IFNlYXJjaFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHNlYXJjaCBmb3IgY29udGVudCBub2RlIHNlbGVjdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHNlYXJjaFRlcm0gICAgVGhlIHRlcm0gdG8gc2VhcmNoIGZvclxuICAgICAqIEBwYXJhbSByb290Tm9kZUlkICAgIFRoZSByb290IGlzIHRvIHN0YXJ0IHRoZSBzZWFyY2ggZnJvbVxuICAgICAqIEBwYXJhbSBza2lwQ291bnQgICAgIEZyb20gd2hlcmUgdG8gc3RhcnQgdGhlIGxvYWRpbmdcbiAgICAgKiBAcGFyYW0gbWF4SXRlbXMgICAgICBIb3cgbWFueSBpdGVtcyB0byBsb2FkXG4gICAgICogQHBhcmFtIFtleHRyYU5vZGVJZHNdICBMaXN0IG9mIGV4dHJhIG5vZGUgaWRzIHRvIHNlYXJjaCBmcm9tLiBUaGlzIGxhc3QgcGFyYW1ldGVyIGlzIG5lY2Vzc2FyeSB3aGVuXG4gICAgICogdGhlIHJvb3ROb2RlSWQgaXMgb25lIG9mIHRoZSBzdXBwb3J0ZWQgYWxpYXNlcyAoZS5nLiAnLW15LScsICctcm9vdC0nLCAnLW15c2l0ZXMtJywgZXRjLilcbiAgICAgKiBhbmQgc2VhcmNoIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoYXQgYWxpYXMsIGJ1dCBjYW4gYmUgcGVyZm9ybWVkIG9uIGl0cyBjb3JyZXNwb25kaW5nIG5vZGVzLlxuICAgICAqL1xuICAgIHB1YmxpYyBzZWFyY2goc2VhcmNoVGVybTogc3RyaW5nLCByb290Tm9kZUlkOiBzdHJpbmcgPSBudWxsLCBza2lwQ291bnQ6IG51bWJlciA9IDAsIG1heEl0ZW1zOiBudW1iZXIgPSAyNSwgZXh0cmFOb2RlSWRzPzogc3RyaW5nW10pOiBPYnNlcnZhYmxlPE5vZGVQYWdpbmc+IHtcblxuICAgICAgICBsZXQgZXh0cmFQYXJlbnRGaWx0ZXJpbmcgPSAnJztcblxuICAgICAgICBpZiAoZXh0cmFOb2RlSWRzICYmIGV4dHJhTm9kZUlkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGV4dHJhTm9kZUlkc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGlkKSA9PiBpZCAhPT0gcm9vdE5vZGVJZClcbiAgICAgICAgICAgICAgICAuZm9yRWFjaCgoZXh0cmFJZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleHRyYVBhcmVudEZpbHRlcmluZyArPSBgIE9SIEFOQ0VTVE9SOid3b3Jrc3BhY2U6Ly9TcGFjZXNTdG9yZS8ke2V4dHJhSWR9J2A7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXJlbnRGaWx0ZXJpbmcgPSByb290Tm9kZUlkID8gW3sgcXVlcnk6IGBBTkNFU1RPUjond29ya3NwYWNlOi8vU3BhY2VzU3RvcmUvJHtyb290Tm9kZUlkfScke2V4dHJhUGFyZW50RmlsdGVyaW5nfWAgfV0gOiBbXTtcblxuICAgICAgICBjb25zdCBkZWZhdWx0U2VhcmNoTm9kZTogYW55ID0ge1xuICAgICAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgICAgICBxdWVyeTogYCR7c2VhcmNoVGVybX0qIE9SIG5hbWU6JHtzZWFyY2hUZXJtfSpgXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jbHVkZTogWydwYXRoJywgJ2FsbG93YWJsZU9wZXJhdGlvbnMnLCAncHJvcGVydGllcyddLFxuICAgICAgICAgICAgcGFnaW5nOiB7XG4gICAgICAgICAgICAgICAgbWF4SXRlbXM6IG1heEl0ZW1zLFxuICAgICAgICAgICAgICAgIHNraXBDb3VudDogc2tpcENvdW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsdGVyUXVlcmllczogW1xuICAgICAgICAgICAgICAgIHsgcXVlcnk6IFwiVFlQRTonY206Zm9sZGVyJ1wiIH0sXG4gICAgICAgICAgICAgICAgeyBxdWVyeTogJ05PVCBjbTpjcmVhdG9yOlN5c3RlbScgfSxcbiAgICAgICAgICAgICAgICAuLi5wYXJlbnRGaWx0ZXJpbmdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICAgIGxvY2F0aW9uczogWydub2RlcyddXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoU2VydmljZS5zZWFyY2hCeVF1ZXJ5Qm9keShkZWZhdWx0U2VhcmNoTm9kZSk7XG4gICAgfVxufVxuIl19