/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, HostListener, NgZone } from '@angular/core';
import { MatDialog } from '@angular/material';
import { NodeEntry } from '@alfresco/js-api';
import { ShareDialogComponent } from './content-node-share.dialog';
import { from, Subject } from 'rxjs';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { takeUntil } from 'rxjs/operators';
var NodeSharedDirective = /** @class */ (function () {
    function NodeSharedDirective(dialog, zone, alfrescoApiService) {
        this.dialog = dialog;
        this.zone = zone;
        this.alfrescoApiService = alfrescoApiService;
        this.isFile = false;
        this.isShared = false;
        this.onDestroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    NodeSharedDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    };
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    NodeSharedDirective.prototype.shareNode = /**
     * @param {?} nodeEntry
     * @return {?}
     */
    function (nodeEntry) {
        var _this = this;
        if (nodeEntry && nodeEntry.entry && nodeEntry.entry.isFile) {
            // shared and favorite
            /** @type {?} */
            var nodeId = nodeEntry.entry['nodeId'] || nodeEntry.entry['guid'];
            if (nodeId) {
                this.getNodeInfo(nodeId).subscribe((/**
                 * @param {?} entry
                 * @return {?}
                 */
                function (entry) {
                    _this.openShareLinkDialog({ entry: entry });
                }));
            }
            else {
                this.openShareLinkDialog(nodeEntry);
            }
        }
    };
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    NodeSharedDirective.prototype.getNodeInfo = /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        /** @type {?} */
        var options = {
            include: ['allowableOperations']
        };
        return from(this.alfrescoApiService.nodesApi.getNodeInfo(nodeId, options));
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    NodeSharedDirective.prototype.openShareLinkDialog = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        this.dialog.open(ShareDialogComponent, {
            width: '600px',
            panelClass: 'adf-share-link-dialog',
            data: {
                node: node,
                baseShareUrl: this.baseShareUrl
            }
        });
    };
    /**
     * @return {?}
     */
    NodeSharedDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.onStable
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.node && _this.node.entry) {
                _this.isFile = _this.node.entry.isFile;
                _this.isShared = _this.node.entry.properties ? _this.node.entry.properties['qshare:sharedId'] : false;
            }
        }));
    };
    /**
     * @return {?}
     */
    NodeSharedDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.node) {
            this.shareNode(this.node);
        }
    };
    NodeSharedDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[adf-share]',
                    exportAs: 'adfShare'
                },] }
    ];
    /** @nocollapse */
    NodeSharedDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: NgZone },
        { type: AlfrescoApiService }
    ]; };
    NodeSharedDirective.propDecorators = {
        node: [{ type: Input, args: ['adf-share',] }],
        baseShareUrl: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return NodeSharedDirective;
}());
export { NodeSharedDirective };
if (false) {
    /** @type {?} */
    NodeSharedDirective.prototype.isFile;
    /** @type {?} */
    NodeSharedDirective.prototype.isShared;
    /**
     * Node to share.
     * @type {?}
     */
    NodeSharedDirective.prototype.node;
    /**
     * Prefix to add to the generated link.
     * @type {?}
     */
    NodeSharedDirective.prototype.baseShareUrl;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,