/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ElementRef } from '@angular/core';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var LibraryNameColumnComponent = /** @class */ (function () {
    function LibraryNameColumnComponent(element, alfrescoApiService) {
        this.element = element;
        this.alfrescoApiService = alfrescoApiService;
        this.displayTooltip$ = new BehaviorSubject('');
        this.displayText$ = new BehaviorSubject('');
        this.onDestroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    LibraryNameColumnComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateValue();
        this.alfrescoApiService.nodeUpdated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            /** @type {?} */
            var row = _this.context.row;
            if (row) {
                var entry = row.node.entry;
                if (entry === node) {
                    row.node = { entry: entry };
                    _this.updateValue();
                }
            }
        }));
    };
    /**
     * @protected
     * @return {?}
     */
    LibraryNameColumnComponent.prototype.updateValue = /**
     * @protected
     * @return {?}
     */
    function () {
        this.node = this.context.row.node;
        /** @type {?} */
        var rows = this.context.data.rows || [];
        if (this.node && this.node.entry) {
            this.displayText$.next(this.makeLibraryTitle((/** @type {?} */ (this.node.entry)), rows));
            this.displayTooltip$.next(this.makeLibraryTooltip(this.node.entry));
        }
    };
    /**
     * @return {?}
     */
    LibraryNameColumnComponent.prototype.onClick = /**
     * @return {?}
     */
    function () {
        this.element.nativeElement.dispatchEvent(new CustomEvent('name-click', {
            bubbles: true,
            detail: {
                node: this.node
            }
        }));
    };
    /**
     * @param {?} library
     * @return {?}
     */
    LibraryNameColumnComponent.prototype.makeLibraryTooltip = /**
     * @param {?} library
     * @return {?}
     */
    function (library) {
        var description = library.description, title = library.title;
        return description || title || '';
    };
    /**
     * @param {?} library
     * @param {?} rows
     * @return {?}
     */
    LibraryNameColumnComponent.prototype.makeLibraryTitle = /**
     * @param {?} library
     * @param {?} rows
     * @return {?}
     */
    function (library, rows) {
        /** @type {?} */
        var entries = rows.map((/**
         * @param {?} row
         * @return {?}
         */
        function (row) { return row.node.entry; }));
        var title = library.title, id = library.id;
        /** @type {?} */
        var isDuplicate = false;
        if (entries) {
            isDuplicate = entries.some((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) {
                return entry.id !== id && entry.title === title;
            }));
        }
        return isDuplicate ? title + " (" + id + ")" : "" + title;
    };
    /**
     * @return {?}
     */
    LibraryNameColumnComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    };
    LibraryNameColumnComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-library-name-column',
                    template: "\n        <span class=\"adf-datatable-cell-value\" title=\"{{ displayTooltip$ | async }}\" (click)=\"onClick()\">\n            {{ displayText$ | async }}\n        </span>\n    ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        class: 'adf-datatable-content-cell adf-datatable-link adf-library-name-column'
                    }
                }] }
    ];
    /** @nocollapse */
    LibraryNameColumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: AlfrescoApiService }
    ]; };
    LibraryNameColumnComponent.propDecorators = {
        context: [{ type: Input }]
    };
    return LibraryNameColumnComponent;
}());
export { LibraryNameColumnComponent };
if (false) {
    /** @type {?} */
    LibraryNameColumnComponent.prototype.context;
    /** @type {?} */
    LibraryNameColumnComponent.prototype.displayTooltip$;
    /** @type {?} */
    LibraryNameColumnComponent.prototype.displayText$;
    /** @type {?} */
    LibraryNameColumnComponent.prototype.node;
    /**
     * @type {?}
     * @private
     */
    LibraryNameColumnComponent.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    LibraryNameColumnComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    LibraryNameColumnComponent.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,