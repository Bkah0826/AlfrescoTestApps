/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* tslint:disable:rxjs-no-subject-value */
import { Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { ContentService, DataSorting, DataTableComponent, DisplayMode, ObjectDataColumn, AppConfigService, DataColumnListComponent, UserPreferencesService, ThumbnailService, CustomLoadingContentTemplateDirective, CustomNoPermissionTemplateDirective, CustomEmptyContentTemplateDirective, AlfrescoApiService, UserPreferenceValues, LockService } from '@alfresco/adf-core';
import { NodePaging, Pagination } from '@alfresco/js-api';
import { Subject, BehaviorSubject, of } from 'rxjs';
import { ShareDataTableAdapter } from './../data/share-datatable-adapter';
import { presetsDefaultModel } from '../models/preset.model';
import { ContentActionModel } from './../models/content-action.model';
import { NodeEntityEvent, NodeEntryEvent } from './node.event';
import { DocumentListService } from '../services/document-list.service';
import { takeUntil } from 'rxjs/operators';
var DocumentListComponent = /** @class */ (function () {
    function DocumentListComponent(documentListService, ngZone, elementRef, appConfig, userPreferencesService, contentService, thumbnailService, alfrescoApiService, lockService) {
        var _this = this;
        this.documentListService = documentListService;
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.appConfig = appConfig;
        this.userPreferencesService = userPreferencesService;
        this.contentService = contentService;
        this.thumbnailService = thumbnailService;
        this.alfrescoApiService = alfrescoApiService;
        this.lockService = lockService;
        this.DEFAULT_PAGINATION = new Pagination({
            hasMoreItems: false,
            skipCount: 0,
            maxItems: 25,
            totalItems: 0
        });
        /**
         * Change the display mode of the table. Can be "list" or "gallery".
         */
        this.display = DisplayMode.List;
        /**
         * Define a set of CSS styles to apply depending on the permission
         * of the user on that node. See the Permission Style model
         * page for further details and examples.
         */
        this.permissionsStyle = [];
        /**
         * The default route for all the location-based columns (if declared).
         */
        this.locationFormat = '/';
        /**
         * Toggles navigation to folder content or file preview
         */
        this.navigate = true;
        /**
         * Toggles the header
         */
        this.showHeader = true;
        /**
         * User interaction for folder navigation or file preview.
         * Valid values are "click" and "dblclick". Default value: "dblclick"
         */
        this.navigationMode = DocumentListComponent.DOUBLE_CLICK_NAVIGATION; // click|dblclick
        // click|dblclick
        /**
         * Show document thumbnails rather than icons
         */
        this.thumbnails = false;
        /**
         * Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,
         * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.
         */
        this.selectionMode = 'single'; // null|single|multiple
        // null|single|multiple
        /**
         * Toggles multiselect mode
         */
        this.multiselect = false;
        /**
         * Toggles content actions for each row
         */
        this.contentActions = false;
        /**
         * Position of the content actions dropdown menu. Can be set to "left" or "right".
         */
        this.contentActionsPosition = 'right'; // left|right
        // left|right
        /**
         * Toggles context menus for each row
         */
        this.contextMenuActions = false;
        /**
         * Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg'
         */
        this.emptyFolderImageUrl = './assets/images/empty_doc_lib.svg';
        /**
         * When true, this enables you to drop files directly into subfolders shown
         * as items in the list. When false, the dropped file will be added to the
         * current folder (ie, the one containing all the items shown in the list).
         * See the Upload directive for further details about how the file drop is
         * handled.
         */
        this.allowDropFiles = false;
        /**
         * Defines default sorting. The format is an array of 2 strings `[key, direction]`
         * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to
         * override the default sorting detected by the component based on columns.
         */
        this.sorting = ['name', 'asc'];
        /**
         * Defines sorting mode. Can be either `client` (items in the list
         * are sorted client-side) or `server` (the ordering supplied by the
         * server is used without further client-side sorting).
         * Note that the `server` option *does not* request the server to sort the data
         * before delivering it.
         */
        this.sortingMode = 'client';
        /**
         * Toggles the loading state and animated spinners for the component. Used in
         * combination with `navigate=false` to perform custom navigation and loading
         * state indication.
         */
        this.loading = false;
        /**
         * @hidden
         */
        this._rowFilter = null;
        /**
         * Custom function to choose image file paths to show. See the
         * [Image Resolver Model](image-resolver.model.md) page for
         * more information.
         */
        this.imageResolver = null;
        /**
         * Toggles the sticky header mode.
         */
        this.stickyHeader = false;
        this._currentFolderId = null;
        /**
         * The Document list will show all the nodes contained in the NodePaging entity
         */
        this.node = null;
        /**
         * Default value is stored in the user preference settings. Use this only if you are not using pagination.
         */
        this.maxItems = this.DEFAULT_PAGINATION.maxItems;
        /**
         * Emitted when the user clicks a list node
         */
        this.nodeClick = new EventEmitter();
        /**
         * Emitted when the user double-clicks a list node
         */
        this.nodeDblClick = new EventEmitter();
        /**
         * Emitted when the current display folder changes
         */
        this.folderChange = new EventEmitter();
        /**
         * Emitted when the user acts upon files with either single or double click
         * (depends on `navigation-mode`). Useful for integration with the
         * Viewer component.
         */
        this.preview = new EventEmitter();
        /**
         * Emitted when the Document List has loaded all items and is ready for use
         */
        this.ready = new EventEmitter();
        /**
         * Emitted when the API fails to get the Document List data
         */
        this.error = new EventEmitter();
        this.actions = [];
        this.contextActionHandler = new Subject();
        this.noPermission = false;
        this.selection = new Array();
        this.$folderNode = new Subject();
        this._pagination = this.DEFAULT_PAGINATION;
        this.pagination = new BehaviorSubject(this.DEFAULT_PAGINATION);
        this.layoutPresets = {};
        this.rowMenuCache = {};
        this.onDestroy$ = new Subject();
        this.userPreferencesService
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} pagSize
         * @return {?}
         */
        function (pagSize) {
            _this.maxItems = _this._pagination.maxItems = pagSize;
        }));
    }
    Object.defineProperty(DocumentListComponent.prototype, "rowFilter", {
        get: /**
         * @return {?}
         */
        function () {
            return this._rowFilter;
        },
        /**
         * Custom function to choose whether to show or hide rows.
         * See the [Row Filter Model](row-filter.model.md) page for
         * more information.
         */
        set: /**
         * Custom function to choose whether to show or hide rows.
         * See the [Row Filter Model](row-filter.model.md) page for
         * more information.
         * @param {?} rowFilter
         * @return {?}
         */
        function (rowFilter) {
            this._rowFilter = rowFilter;
            if (this.data) {
                this.data.setFilter(this._rowFilter);
                if (this._currentFolderId) {
                    this.reload();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DocumentListComponent.prototype, "currentFolderId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currentFolderId;
        },
        /** The ID of the folder node to display or a reserved string alias for special sources */
        set: /**
         * The ID of the folder node to display or a reserved string alias for special sources
         * @param {?} currentFolderId
         * @return {?}
         */
        function (currentFolderId) {
            if (this._currentFolderId !== currentFolderId) {
                this._currentFolderId = currentFolderId;
                if (this.data) {
                    this.data.loadPage(null, false);
                    this.resetNewFolderPagination();
                }
                if (this._currentFolderId) {
                    this.loadFolder();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.getContextActions = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (node && node.entry) {
            /** @type {?} */
            var actions = this.getNodeActions(node);
            if (actions && actions.length > 0) {
                return actions.map((/**
                 * @param {?} currentAction
                 * @return {?}
                 */
                function (currentAction) {
                    return {
                        model: currentAction,
                        node: node,
                        subject: _this.contextActionHandler
                    };
                }));
            }
        }
        return null;
    };
    Object.defineProperty(DocumentListComponent.prototype, "hasCustomLayout", {
        get: /**
         * @return {?}
         */
        function () {
            return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    DocumentListComponent.prototype.getDefaultSorting = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultSorting;
        if (this.sorting) {
            var _a = tslib_1.__read(this.sorting, 2), key = _a[0], direction = _a[1];
            defaultSorting = new DataSorting(key, direction);
        }
        return defaultSorting;
    };
    /**
     * @private
     * @param {?=} name
     * @return {?}
     */
    DocumentListComponent.prototype.getLayoutPreset = /**
     * @private
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        if (name === void 0) { name = 'default'; }
        return (this.layoutPresets[name] || this.layoutPresets['default']).map((/**
         * @param {?} col
         * @return {?}
         */
        function (col) { return new ObjectDataColumn(col); }));
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.isMobile = /**
     * @return {?}
     */
    function () {
        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.data || this.data.getRows().length === 0;
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.rowMenuCache = {};
        this.loadLayoutPresets();
        this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, null, this.getDefaultSorting(), this.sortingMode);
        this.data.thumbnails = this.thumbnails;
        this.data.permissionsStyle = this.permissionsStyle;
        if (this._rowFilter) {
            this.data.setFilter(this._rowFilter);
        }
        if (this.imageResolver) {
            this.data.setImageResolver(this.imageResolver);
        }
        this.contextActionHandler
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return _this.contextActionCallback(val); }));
        this.enforceSingleClickNavigationForMobile();
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.columnList) {
            this.columnList.columns.changes
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((/**
             * @return {?}
             */
            function () { return _this.setTableSchema(); }));
        }
        this.setTableSchema();
    };
    /**
     * @private
     * @return {?}
     */
    DocumentListComponent.prototype.setTableSchema = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var schema = [];
        if (this.hasCustomLayout) {
            schema = this.columnList.columns.map((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return (/** @type {?} */ (c)); }));
        }
        if (!this.data) {
            this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, schema, this.getDefaultSorting(), this.sortingMode);
        }
        else if (schema && schema.length > 0) {
            this.data.setColumns(schema);
        }
        /** @type {?} */
        var columns = this.data.getColumns();
        if (!columns || columns.length === 0) {
            this.setupDefaultColumns(this._currentFolderId);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DocumentListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.resetSelection();
        if (this.data) {
            this.data.thumbnails = this.thumbnails;
        }
        if (changes.sortingMode && !changes.sortingMode.firstChange && this.data) {
            this.data.sortingMode = changes.sortingMode.currentValue;
        }
        if (changes.sorting && !changes.sorting.firstChange && this.data) {
            /** @type {?} */
            var newValue = changes.sorting.currentValue;
            if (newValue && newValue.length > 0) {
                var _a = tslib_1.__read(newValue, 2), key = _a[0], direction = _a[1];
                this.data.setSorting(new DataSorting(key, direction));
            }
        }
        if (this.data) {
            if (changes.node && changes.node.currentValue) {
                /** @type {?} */
                var merge = this._pagination ? this._pagination.merge : false;
                this.data.loadPage(changes.node.currentValue, merge);
                this.onDataReady(changes.node.currentValue);
            }
            else if (changes.imageResolver) {
                this.data.setImageResolver(changes.imageResolver.currentValue);
            }
        }
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.reload = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.run((/**
         * @return {?}
         */
        function () {
            _this.resetSelection();
            if (_this.node) {
                _this.data.loadPage(_this.node, _this._pagination.merge);
                _this.onDataReady(_this.node);
            }
            else {
                _this.loadFolder();
            }
        }));
    };
    /**
     * @param {?} action
     * @return {?}
     */
    DocumentListComponent.prototype.contextActionCallback = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        if (action) {
            this.executeContentAction(action.node, action.model);
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.getNodeActions = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        if (node && node.entry) {
            /** @type {?} */
            var target_1 = null;
            if (node.entry.isFile) {
                target_1 = 'document';
            }
            else if (node.entry.isFolder) {
                target_1 = 'folder';
            }
            if (target_1) {
                /** @type {?} */
                var actions = this.rowMenuCache[node.entry.id];
                if (actions) {
                    actions.forEach((/**
                     * @param {?} action
                     * @return {?}
                     */
                    function (action) {
                        _this.refreshAction(action, node);
                    }));
                    return actions;
                }
                /** @type {?} */
                var actionsByTarget = this.actions
                    .filter((/**
                 * @param {?} entry
                 * @return {?}
                 */
                function (entry) {
                    /** @type {?} */
                    var isVisible = (typeof entry.visible === 'function')
                        ? entry.visible(node)
                        : entry.visible;
                    return isVisible && entry.target.toLowerCase() === target_1;
                }))
                    .map((/**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) { return new ContentActionModel(action); }));
                actionsByTarget.forEach((/**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) {
                    _this.refreshAction(action, node);
                }));
                this.rowMenuCache[node.entry.id] = actionsByTarget;
                return actionsByTarget;
            }
        }
        return [];
    };
    /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.refreshAction = /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    function (action, node) {
        action.disabled = this.isActionDisabled(action, node);
        action.visible = this.isActionVisible(action, node);
    };
    /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.isActionVisible = /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    function (action, node) {
        if (typeof action.visible === 'function') {
            return action.visible(node);
        }
        return action.visible;
    };
    /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.isActionDisabled = /**
     * @private
     * @param {?} action
     * @param {?} node
     * @return {?}
     */
    function (action, node) {
        if (typeof action.disabled === 'function') {
            return action.disabled(node);
        }
        if ((action.permission &&
            action.disableWithNoPermission &&
            !this.contentService.hasAllowableOperations(node.entry, action.permission)) ||
            this.lockService.isLocked(node.entry)) {
            return true;
        }
        else {
            return action.disabled;
        }
    };
    /**
     * @param {?=} e
     * @return {?}
     */
    DocumentListComponent.prototype.onShowContextMenu = /**
     * @param {?=} e
     * @return {?}
     */
    function (e) {
        if (e && this.contextMenuActions) {
            e.preventDefault();
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.navigateTo = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (typeof node === 'string') {
            this.resetNewFolderPagination();
            this._currentFolderId = node;
            this.folderChange.emit(new NodeEntryEvent((/** @type {?} */ ({ id: node }))));
            this.reload();
            return true;
        }
        else {
            if (this.canNavigateFolder(node)) {
                this.resetNewFolderPagination();
                this._currentFolderId = this.getNodeFolderDestinationId(node);
                this.folderChange.emit(new NodeEntryEvent((/** @type {?} */ ({ id: this._currentFolderId }))));
                this.reload();
                return true;
            }
        }
        return false;
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.getNodeFolderDestinationId = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return this.isLinkFolder(node) ? node.properties['cm:destination'] : node.id;
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.isLinkFolder = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        return node.nodeType === 'app:folderlink' && node.properties &&
            node.properties['cm:destination'];
    };
    /**
     * @param {?} nodeId
     * @return {?}
     */
    DocumentListComponent.prototype.updateCustomSourceData = /**
     * @param {?} nodeId
     * @return {?}
     */
    function (nodeId) {
        this._currentFolderId = nodeId;
    };
    /**
     * Invoked when executing content action for a document or folder.
     * @param node Node to be the context of the execution.
     * @param action Action to be executed against the context.
     */
    /**
     * Invoked when executing content action for a document or folder.
     * @param {?} node Node to be the context of the execution.
     * @param {?} action Action to be executed against the context.
     * @return {?}
     */
    DocumentListComponent.prototype.executeContentAction = /**
     * Invoked when executing content action for a document or folder.
     * @param {?} node Node to be the context of the execution.
     * @param {?} action Action to be executed against the context.
     * @return {?}
     */
    function (node, action) {
        if (node && node.entry && action) {
            /** @type {?} */
            var handlerSub = void 0;
            if (typeof action.handler === 'function') {
                handlerSub = action.handler(node, this, action.permission);
            }
            else {
                handlerSub = of(true);
            }
            if (typeof action.execute === 'function' && handlerSub) {
                handlerSub
                    .pipe(takeUntil(this.onDestroy$))
                    .subscribe((/**
                 * @return {?}
                 */
                function () { return action.execute(node); }));
            }
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    DocumentListComponent.prototype.setLoadingState = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        if (value) {
            clearTimeout(this.loadingTimeout);
            this.loadingTimeout = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.loading = true;
            }), 1000);
        }
        else {
            clearTimeout(this.loadingTimeout);
            this.loading = false;
        }
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.loadFolder = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._pagination.merge) {
            this.setLoadingState(true);
        }
        if (!this.hasCustomLayout) {
            this.setupDefaultColumns(this._currentFolderId);
        }
        if (this.documentListService.isCustomSourceService(this._currentFolderId)) {
            this.updateCustomSourceData(this._currentFolderId);
        }
        this.documentListService.loadFolderByNodeId(this._currentFolderId, this._pagination, this.includeFields, this.where)
            .subscribe((/**
         * @param {?} documentNode
         * @return {?}
         */
        function (documentNode) {
            if (documentNode.currentNode) {
                _this.folderNode = documentNode.currentNode.entry;
                _this.$folderNode.next(documentNode.currentNode.entry);
            }
            _this.onPageLoaded(documentNode.children);
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.handleError(err);
        }));
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.resetSelection = /**
     * @return {?}
     */
    function () {
        this.dataTable.resetSelection();
        this.selection = [];
        this.noPermission = false;
    };
    /**
     * @param {?} nodePaging
     * @return {?}
     */
    DocumentListComponent.prototype.onPageLoaded = /**
     * @param {?} nodePaging
     * @return {?}
     */
    function (nodePaging) {
        if (nodePaging) {
            this.data.loadPage(nodePaging, this._pagination.merge);
            this.setLoadingState(false);
            this.onDataReady(nodePaging);
        }
    };
    /**
     * Creates a set of predefined columns.
     */
    /**
     * Creates a set of predefined columns.
     * @param {?=} preset
     * @return {?}
     */
    DocumentListComponent.prototype.setupDefaultColumns = /**
     * Creates a set of predefined columns.
     * @param {?=} preset
     * @return {?}
     */
    function (preset) {
        if (preset === void 0) { preset = 'default'; }
        if (this.data) {
            /** @type {?} */
            var columns = this.getLayoutPreset(preset);
            this.data.setColumns(columns);
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.onPreviewFile = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (node) {
            this.preview.emit(new NodeEntityEvent(node));
        }
    };
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeClick = /**
     * @param {?} nodeEntry
     * @return {?}
     */
    function (nodeEntry) {
        /** @type {?} */
        var domEvent = new CustomEvent('node-click', {
            detail: {
                sender: this,
                node: nodeEntry
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
        /** @type {?} */
        var event = new NodeEntityEvent(nodeEntry);
        this.nodeClick.emit(event);
        if (!event.defaultPrevented) {
            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {
                this.executeActionClick(nodeEntry);
            }
        }
    };
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeDblClick = /**
     * @param {?} nodeEntry
     * @return {?}
     */
    function (nodeEntry) {
        /** @type {?} */
        var domEvent = new CustomEvent('node-dblclick', {
            detail: {
                sender: this,
                node: nodeEntry
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
        /** @type {?} */
        var event = new NodeEntityEvent(nodeEntry);
        this.nodeDblClick.emit(event);
        if (!event.defaultPrevented) {
            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {
                this.executeActionClick(nodeEntry);
            }
        }
    };
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    DocumentListComponent.prototype.executeActionClick = /**
     * @param {?} nodeEntry
     * @return {?}
     */
    function (nodeEntry) {
        var _this = this;
        if (nodeEntry && nodeEntry.entry) {
            if (nodeEntry.entry.isFile) {
                this.onPreviewFile(nodeEntry);
            }
            if (nodeEntry.entry.isFolder) {
                this.navigateTo(nodeEntry.entry);
            }
            if (nodeEntry.entry['guid']) {
                /** @type {?} */
                var options = {
                    include: this.includeFields
                };
                this.alfrescoApiService.nodesApi.getNode(nodeEntry.entry['guid'], options)
                    .then((/**
                 * @param {?} node
                 * @return {?}
                 */
                function (node) {
                    _this.navigateTo(node.entry);
                }));
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selection = event.selection.map((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) { return entry.node; }));
        /** @type {?} */
        var domEvent = new CustomEvent('node-select', {
            detail: {
                node: event.row.node,
                selection: this.selection
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onNodeUnselect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selection = event.selection.map((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) { return entry.node; }));
        /** @type {?} */
        var domEvent = new CustomEvent('node-unselect', {
            detail: {
                node: event.row ? event.row.node : null,
                selection: this.selection
            },
            bubbles: true
        });
        this.elementRef.nativeElement.dispatchEvent(domEvent);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onShowRowContextMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.contextMenuActions) {
            /** @type {?} */
            var args = event.value;
            /** @type {?} */
            var node = ((/** @type {?} */ (args.row))).node;
            if (node) {
                args.actions = this.getContextActions(node) || [];
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onShowRowActionsMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.contentActions) {
            /** @type {?} */
            var args = event.value;
            /** @type {?} */
            var node = ((/** @type {?} */ (args.row))).node;
            if (node) {
                args.actions = this.getNodeActions(node) || [];
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DocumentListComponent.prototype.onExecuteRowAction = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.contentActions) {
            /** @type {?} */
            var args = event.value;
            /** @type {?} */
            var node = ((/** @type {?} */ (args.row))).node;
            /** @type {?} */
            var action = ((/** @type {?} */ (args.action)));
            this.executeContentAction(node, action);
        }
    };
    /**
     * @private
     * @return {?}
     */
    DocumentListComponent.prototype.enforceSingleClickNavigationForMobile = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isMobile()) {
            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;
        }
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DocumentListComponent.prototype.canNavigateFolder = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        /** @type {?} */
        var canNavigateFolder = false;
        if (node && node.isFolder) {
            canNavigateFolder = true;
        }
        return canNavigateFolder;
    };
    /**
     * @private
     * @return {?}
     */
    DocumentListComponent.prototype.loadLayoutPresets = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var externalSettings = this.appConfig.get('document-list.presets', null);
        if (externalSettings) {
            this.layoutPresets = Object.assign({}, presetsDefaultModel, externalSettings);
        }
        else {
            this.layoutPresets = presetsDefaultModel;
        }
    };
    /**
     * @private
     * @param {?} nodePaging
     * @return {?}
     */
    DocumentListComponent.prototype.onDataReady = /**
     * @private
     * @param {?} nodePaging
     * @return {?}
     */
    function (nodePaging) {
        this.ready.emit(nodePaging);
        this.pagination.next(nodePaging.list.pagination);
    };
    /**
     * @param {?} requestPaginationModel
     * @return {?}
     */
    DocumentListComponent.prototype.updatePagination = /**
     * @param {?} requestPaginationModel
     * @return {?}
     */
    function (requestPaginationModel) {
        this._pagination.maxItems = requestPaginationModel.maxItems;
        this._pagination.merge = requestPaginationModel.merge;
        this._pagination.skipCount = requestPaginationModel.skipCount;
        this.reload();
    };
    /**
     * @private
     * @return {?}
     */
    DocumentListComponent.prototype.resetNewFolderPagination = /**
     * @private
     * @return {?}
     */
    function () {
        this._pagination.skipCount = 0;
        this._pagination.maxItems = this.maxItems;
    };
    /**
     * @return {?}
     */
    DocumentListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    };
    /**
     * @private
     * @param {?} err
     * @return {?}
     */
    DocumentListComponent.prototype.handleError = /**
     * @private
     * @param {?} err
     * @return {?}
     */
    function (err) {
        if (err.message) {
            try {
                if (JSON.parse(err.message).error.statusCode === 403) {
                    this.setLoadingState(false);
                    this.noPermission = true;
                }
            }
            catch (error) {
            }
        }
        this.error.emit(err);
    };
    DocumentListComponent.SINGLE_CLICK_NAVIGATION = 'click';
    DocumentListComponent.DOUBLE_CLICK_NAVIGATION = 'dblclick';
    DocumentListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'adf-document-list',
                    template: "<adf-datatable\n    #dataTable\n    [selectionMode]=\"selectionMode\"\n    [data]=\"data\"\n    [actions]=\"contentActions\"\n    [actionsPosition]=\"contentActionsPosition\"\n    [multiselect]=\"multiselect\"\n    [allowDropFiles]=\"allowDropFiles\"\n    [contextMenu]=\"contextMenuActions\"\n    [rowStyle]=\"rowStyle\"\n    [rowStyleClass]=\"rowStyleClass\"\n    [loading]=\"loading\"\n    [display]=\"display\"\n    [noPermission]=\"noPermission\"\n    [showHeader]=\"!isEmpty() && showHeader\"\n    [rowMenuCacheEnabled]=\"false\"\n    [stickyHeader]=\"stickyHeader\"\n    (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n    (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n    (executeRowAction)=\"onExecuteRowAction($event)\"\n    (rowClick)=\"onNodeClick($event.value?.node)\"\n    (rowDblClick)=\"onNodeDblClick($event.value?.node)\"\n    (row-select)=\"onNodeSelect($event.detail)\"\n    (row-unselect)=\"onNodeUnselect($event.detail)\"\n    [class.adf-datatable-gallery-thumbnails]=\"data.thumbnails\">\n\n    <adf-no-content-template>\n        <ng-template>\n            <adf-empty-list *ngIf=\"!customNoContentTemplate\">\n                <div class=\"adf-empty-list_template adf-empty-folder\">\n                    <div class=\"adf-empty-folder-this-space-is-empty\">{{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}}</div>\n                    <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                    <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                    <img [alt]=\"'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate\" class=\"adf-empty-folder-image\" [src]=\"emptyFolderImageUrl\">\n                </div>\n            </adf-empty-list>\n            <ng-content select=\"adf-custom-empty-content-template, empty-folder-content\"></ng-content>\n        </ng-template>\n    </adf-no-content-template>\n\n    <adf-no-permission-template>\n        <ng-template>\n            <div class=\"adf-no-permission__template\" *ngIf=\"!customNoPermissionsTemplate\">\n                <mat-icon>error</mat-icon>\n                <p class=\"adf-no-permission__template--text\">{{ 'ADF-DOCUMENT-LIST.NO_PERMISSION' | translate }}</p>\n            </div>\n            <ng-content select=\"adf-custom-no-permission-template, no-permission-content\"></ng-content>\n        </ng-template>\n    </adf-no-permission-template>\n\n    <adf-loading-content-template>\n        <ng-template>\n            <div class=\"adf-document-list-loading-container\" *ngIf=\"!customLoadingContent\">\n                <mat-progress-spinner\n                    id=\"adf-document-list-loading\"\n                    class=\"adf-document-list-loading-margin\"\n                    [color]=\"'primary'\"\n                    [mode]=\"'indeterminate'\">\n                </mat-progress-spinner>\n            </div>\n            <ng-content select=\"adf-custom-loading-content-template\"></ng-content>\n        </ng-template>\n    </adf-loading-content-template>\n\n</adf-datatable>\n",
                    encapsulation: ViewEncapsulation.None,
                    host: { class: 'adf-document-list' },
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DocumentListComponent.ctorParameters = function () { return [
        { type: DocumentListService },
        { type: NgZone },
        { type: ElementRef },
        { type: AppConfigService },
        { type: UserPreferencesService },
        { type: ContentService },
        { type: ThumbnailService },
        { type: AlfrescoApiService },
        { type: LockService }
    ]; };
    DocumentListComponent.propDecorators = {
        columnList: [{ type: ContentChild, args: [DataColumnListComponent,] }],
        customLoadingContent: [{ type: ContentChild, args: [CustomLoadingContentTemplateDirective,] }],
        customNoPermissionsTemplate: [{ type: ContentChild, args: [CustomNoPermissionTemplateDirective,] }],
        customNoContentTemplate: [{ type: ContentChild, args: [CustomEmptyContentTemplateDirective,] }],
        includeFields: [{ type: Input }],
        where: [{ type: Input }],
        display: [{ type: Input }],
        permissionsStyle: [{ type: Input }],
        locationFormat: [{ type: Input }],
        navigate: [{ type: Input }],
        showHeader: [{ type: Input }],
        navigationMode: [{ type: Input }],
        thumbnails: [{ type: Input }],
        selectionMode: [{ type: Input }],
        multiselect: [{ type: Input }],
        contentActions: [{ type: Input }],
        contentActionsPosition: [{ type: Input }],
        contextMenuActions: [{ type: Input }],
        emptyFolderImageUrl: [{ type: Input }],
        allowDropFiles: [{ type: Input }],
        sorting: [{ type: Input }],
        sortingMode: [{ type: Input }],
        rowStyle: [{ type: Input }],
        rowStyleClass: [{ type: Input }],
        loading: [{ type: Input }],
        _rowFilter: [{ type: Input }],
        rowFilter: [{ type: Input }],
        imageResolver: [{ type: Input }],
        stickyHeader: [{ type: Input }],
        currentFolderId: [{ type: Input }],
        node: [{ type: Input }],
        maxItems: [{ type: Input }],
        nodeClick: [{ type: Output }],
        nodeDblClick: [{ type: Output }],
        folderChange: [{ type: Output }],
        preview: [{ type: Output }],
        ready: [{ type: Output }],
        error: [{ type: Output }],
        dataTable: [{ type: ViewChild, args: ['dataTable',] }],
        onShowContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
    };
    return DocumentListComponent;
}());
export { DocumentListComponent };
if (false) {
    /** @type {?} */
    DocumentListComponent.SINGLE_CLICK_NAVIGATION;
    /** @type {?} */
    DocumentListComponent.DOUBLE_CLICK_NAVIGATION;
    /** @type {?} */
    DocumentListComponent.prototype.DEFAULT_PAGINATION;
    /** @type {?} */
    DocumentListComponent.prototype.columnList;
    /** @type {?} */
    DocumentListComponent.prototype.customLoadingContent;
    /** @type {?} */
    DocumentListComponent.prototype.customNoPermissionsTemplate;
    /** @type {?} */
    DocumentListComponent.prototype.customNoContentTemplate;
    /**
     * Include additional information about the node in the server request. For example: association, isLink, isLocked and others.
     * @type {?}
     */
    DocumentListComponent.prototype.includeFields;
    /**
     * Filters the Node list using the *where* condition of the REST API
     * (for example, isFolder=true). See the REST API documentation for more information.
     * @type {?}
     */
    DocumentListComponent.prototype.where;
    /**
     * Change the display mode of the table. Can be "list" or "gallery".
     * @type {?}
     */
    DocumentListComponent.prototype.display;
    /**
     * Define a set of CSS styles to apply depending on the permission
     * of the user on that node. See the Permission Style model
     * page for further details and examples.
     * @type {?}
     */
    DocumentListComponent.prototype.permissionsStyle;
    /**
     * The default route for all the location-based columns (if declared).
     * @type {?}
     */
    DocumentListComponent.prototype.locationFormat;
    /**
     * Toggles navigation to folder content or file preview
     * @type {?}
     */
    DocumentListComponent.prototype.navigate;
    /**
     * Toggles the header
     * @type {?}
     */
    DocumentListComponent.prototype.showHeader;
    /**
     * User interaction for folder navigation or file preview.
     * Valid values are "click" and "dblclick". Default value: "dblclick"
     * @type {?}
     */
    DocumentListComponent.prototype.navigationMode;
    /**
     * Show document thumbnails rather than icons
     * @type {?}
     */
    DocumentListComponent.prototype.thumbnails;
    /**
     * Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,
     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.
     * @type {?}
     */
    DocumentListComponent.prototype.selectionMode;
    /**
     * Toggles multiselect mode
     * @type {?}
     */
    DocumentListComponent.prototype.multiselect;
    /**
     * Toggles content actions for each row
     * @type {?}
     */
    DocumentListComponent.prototype.contentActions;
    /**
     * Position of the content actions dropdown menu. Can be set to "left" or "right".
     * @type {?}
     */
    DocumentListComponent.prototype.contentActionsPosition;
    /**
     * Toggles context menus for each row
     * @type {?}
     */
    DocumentListComponent.prototype.contextMenuActions;
    /**
     * Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg'
     * @type {?}
     */
    DocumentListComponent.prototype.emptyFolderImageUrl;
    /**
     * When true, this enables you to drop files directly into subfolders shown
     * as items in the list. When false, the dropped file will be added to the
     * current folder (ie, the one containing all the items shown in the list).
     * See the Upload directive for further details about how the file drop is
     * handled.
     * @type {?}
     */
    DocumentListComponent.prototype.allowDropFiles;
    /**
     * Defines default sorting. The format is an array of 2 strings `[key, direction]`
     * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to
     * override the default sorting detected by the component based on columns.
     * @type {?}
     */
    DocumentListComponent.prototype.sorting;
    /**
     * Defines sorting mode. Can be either `client` (items in the list
     * are sorted client-side) or `server` (the ordering supplied by the
     * server is used without further client-side sorting).
     * Note that the `server` option *does not* request the server to sort the data
     * before delivering it.
     * @type {?}
     */
    DocumentListComponent.prototype.sortingMode;
    /**
     * The inline style to apply to every row. See
     * the Angular NgStyle
     * docs for more details and usage examples.
     * @type {?}
     */
    DocumentListComponent.prototype.rowStyle;
    /**
     * The CSS class to apply to every row
     * @type {?}
     */
    DocumentListComponent.prototype.rowStyleClass;
    /**
     * Toggles the loading state and animated spinners for the component. Used in
     * combination with `navigate=false` to perform custom navigation and loading
     * state indication.
     * @type {?}
     */
    DocumentListComponent.prototype.loading;
    /**
     * @hidden
     * @type {?}
     */
    DocumentListComponent.prototype._rowFilter;
    /**
     * Custom function to choose image file paths to show. See the
     * [Image Resolver Model](image-resolver.model.md) page for
     * more information.
     * @type {?}
     */
    DocumentListComponent.prototype.imageResolver;
    /**
     * Toggles the sticky header mode.
     * @type {?}
     */
    DocumentListComponent.prototype.stickyHeader;
    /** @type {?} */
    DocumentListComponent.prototype._currentFolderId;
    /**
     * The Document list will show all the nodes contained in the NodePaging entity
     * @type {?}
     */
    DocumentListComponent.prototype.node;
    /**
     * Default value is stored in the user preference settings. Use this only if you are not using pagination.
     * @type {?}
     */
    DocumentListComponent.prototype.maxItems;
    /**
     * Emitted when the user clicks a list node
     * @type {?}
     */
    DocumentListComponent.prototype.nodeClick;
    /**
     * Emitted when the user double-clicks a list node
     * @type {?}
     */
    DocumentListComponent.prototype.nodeDblClick;
    /**
     * Emitted when the current display folder changes
     * @type {?}
     */
    DocumentListComponent.prototype.folderChange;
    /**
     * Emitted when the user acts upon files with either single or double click
     * (depends on `navigation-mode`). Useful for integration with the
     * Viewer component.
     * @type {?}
     */
    DocumentListComponent.prototype.preview;
    /**
     * Emitted when the Document List has loaded all items and is ready for use
     * @type {?}
     */
    DocumentListComponent.prototype.ready;
    /**
     * Emitted when the API fails to get the Document List data
     * @type {?}
     */
    DocumentListComponent.prototype.error;
    /** @type {?} */
    DocumentListComponent.prototype.dataTable;
    /** @type {?} */
    DocumentListComponent.prototype.actions;
    /** @type {?} */
    DocumentListComponent.prototype.contextActionHandler;
    /** @type {?} */
    DocumentListComponent.prototype.data;
    /** @type {?} */
    DocumentListComponent.prototype.noPermission;
    /** @type {?} */
    DocumentListComponent.prototype.selection;
    /** @type {?} */
    DocumentListComponent.prototype.$folderNode;
    /** @type {?} */
    DocumentListComponent.prototype.folderNode;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype._pagination;
    /** @type {?} */
    DocumentListComponent.prototype.pagination;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.layoutPresets;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.rowMenuCache;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.loadingTimeout;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.documentListService;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.appConfig;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.userPreferencesService;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.thumbnailService;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.alfrescoApiService;
    /**
     * @type {?}
     * @private
     */
    DocumentListComponent.prototype.lockService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJkb2N1bWVudC1saXN0L2NvbXBvbmVudHMvZG9jdW1lbnQtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQSxPQUFPLEVBQ2UsU0FBUyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUNsRSxNQUFNLEVBQWlCLFNBQVMsRUFBRSxpQkFBaUIsRUFDcEYsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUNILGNBQWMsRUFJZCxXQUFXLEVBQ1gsa0JBQWtCLEVBQ2xCLFdBQVcsRUFDWCxnQkFBZ0IsRUFFaEIsZ0JBQWdCLEVBQ2hCLHVCQUF1QixFQUN2QixzQkFBc0IsRUFFdEIsZ0JBQWdCLEVBQ2hCLHFDQUFxQyxFQUNyQyxtQ0FBbUMsRUFDbkMsbUNBQW1DLEVBRW5DLGtCQUFrQixFQUNsQixvQkFBb0IsRUFDcEIsV0FBVyxFQUNkLE1BQU0sb0JBQW9CLENBQUM7QUFFNUIsT0FBTyxFQUFtQixVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0UsT0FBTyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXBELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXRFLE9BQU8sRUFBRSxlQUFlLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRy9ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1D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SUFDdEMsaURBQTBDOzs7OztJQUMxQyxtREFBOEM7Ozs7O0lBQzlDLDRDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEFsZnJlc2NvIFNvZnR3YXJlLCBMdGQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOnJ4anMtbm8tc3ViamVjdC12YWx1ZSAqL1xuXG5pbXBvcnQge1xuICAgIEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE5nWm9uZSxcbiAgICBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb25cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7XG4gICAgQ29udGVudFNlcnZpY2UsXG4gICAgRGF0YUNlbGxFdmVudCxcbiAgICBEYXRhQ29sdW1uLFxuICAgIERhdGFSb3dBY3Rpb25FdmVudCxcbiAgICBEYXRhU29ydGluZyxcbiAgICBEYXRhVGFibGVDb21wb25lbnQsXG4gICAgRGlzcGxheU1vZGUsXG4gICAgT2JqZWN0RGF0YUNvbHVtbixcbiAgICBQYWdpbmF0ZWRDb21wb25lbnQsXG4gICAgQXBwQ29uZmlnU2VydmljZSxcbiAgICBEYXRhQ29sdW1uTGlzdENvbXBvbmVudCxcbiAgICBVc2VyUHJlZmVyZW5jZXNTZXJ2aWNlLFxuICAgIFBhZ2luYXRpb25Nb2RlbCxcbiAgICBUaHVtYm5haWxTZXJ2aWNlLFxuICAgIEN1c3RvbUxvYWRpbmdDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgQ3VzdG9tTm9QZXJtaXNzaW9uVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgQ3VzdG9tRW1wdHlDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgUmVxdWVzdFBhZ2luYXRpb25Nb2RlbCxcbiAgICBBbGZyZXNjb0FwaVNlcnZpY2UsXG4gICAgVXNlclByZWZlcmVuY2VWYWx1ZXMsXG4gICAgTG9ja1NlcnZpY2Vcbn0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcblxuaW1wb3J0IHsgTm9kZSwgTm9kZUVudHJ5LCBOb2RlUGFnaW5nLCBQYWdpbmF0aW9uIH0gZnJvbSAnQGFsZnJlc2NvL2pzLWFwaSc7XG5pbXBvcnQgeyBTdWJqZWN0LCBCZWhhdmlvclN1YmplY3QsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTaGFyZURhdGFSb3cgfSBmcm9tICcuLy4uL2RhdGEvc2hhcmUtZGF0YS1yb3cubW9kZWwnO1xuaW1wb3J0IHsgU2hhcmVEYXRhVGFibGVBZGFwdGVyIH0gZnJvbSAnLi8uLi9kYXRhL3NoYXJlLWRhdGF0YWJsZS1hZGFwdGVyJztcbmltcG9ydCB7IHByZXNldHNEZWZhdWx0TW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvcHJlc2V0Lm1vZGVsJztcbmltcG9ydCB7IENvbnRlbnRBY3Rpb25Nb2RlbCB9IGZyb20gJy4vLi4vbW9kZWxzL2NvbnRlbnQtYWN0aW9uLm1vZGVsJztcbmltcG9ydCB7IFBlcm1pc3Npb25TdHlsZU1vZGVsIH0gZnJvbSAnLi8uLi9tb2RlbHMvcGVybWlzc2lvbnMtc3R5bGUubW9kZWwnO1xuaW1wb3J0IHsgTm9kZUVudGl0eUV2ZW50LCBOb2RlRW50cnlFdmVudCB9IGZyb20gJy4vbm9kZS5ldmVudCc7XG5pbXBvcnQgeyBOYXZpZ2FibGVDb21wb25lbnRJbnRlcmZhY2UgfSBmcm9tICcuLi8uLi9icmVhZGNydW1iL25hdmlnYWJsZS1jb21wb25lbnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFJvd0ZpbHRlciB9IGZyb20gJy4uL2RhdGEvcm93LWZpbHRlci5tb2RlbCc7XG5pbXBvcnQgeyBEb2N1bWVudExpc3RTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZG9jdW1lbnQtbGlzdC5zZXJ2aWNlJztcbmltcG9ydCB7IERvY3VtZW50TG9hZGVyTm9kZSB9IGZyb20gJy4uL21vZGVscy9kb2N1bWVudC1mb2xkZXIubW9kZWwnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2FkZi1kb2N1bWVudC1saXN0JyxcbiAgICBzdHlsZVVybHM6IFsnLi9kb2N1bWVudC1saXN0LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2RvY3VtZW50LWxpc3QuY29tcG9uZW50Lmh0bWwnLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgaG9zdDogeyBjbGFzczogJ2FkZi1kb2N1bWVudC1saXN0JyB9XG59KVxuZXhwb3J0IGNsYXNzIERvY3VtZW50TGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEFmdGVyQ29udGVudEluaXQsIFBhZ2luYXRlZENvbXBvbmVudCwgTmF2aWdhYmxlQ29tcG9uZW50SW50ZXJmYWNlIHtcblxuICAgIHN0YXRpYyBTSU5HTEVfQ0xJQ0tfTkFWSUdBVElPTjogc3RyaW5nID0gJ2NsaWNrJztcbiAgICBzdGF0aWMgRE9VQkxFX0NMSUNLX05BVklHQVRJT046IHN0cmluZyA9ICdkYmxjbGljayc7XG5cbiAgICBERUZBVUxUX1BBR0lOQVRJT046IFBhZ2luYXRpb24gPSBuZXcgUGFnaW5hdGlvbih7XG4gICAgICAgIGhhc01vcmVJdGVtczogZmFsc2UsXG4gICAgICAgIHNraXBDb3VudDogMCxcbiAgICAgICAgbWF4SXRlbXM6IDI1LFxuICAgICAgICB0b3RhbEl0ZW1zOiAwXG4gICAgfSk7XG5cbiAgICBAQ29udGVudENoaWxkKERhdGFDb2x1bW5MaXN0Q29tcG9uZW50KVxuICAgIGNvbHVtbkxpc3Q6IERhdGFDb2x1bW5MaXN0Q29tcG9uZW50O1xuXG4gICAgQENvbnRlbnRDaGlsZChDdXN0b21Mb2FkaW5nQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlKVxuICAgIGN1c3RvbUxvYWRpbmdDb250ZW50OiBDdXN0b21Mb2FkaW5nQ29udGVudFRlbXBsYXRlRGlyZWN0aXZlO1xuXG4gICAgQENvbnRlbnRDaGlsZChDdXN0b21Ob1Blcm1pc3Npb25UZW1wbGF0ZURpcmVjdGl2ZSlcbiAgICBjdXN0b21Ob1Blcm1pc3Npb25zVGVtcGxhdGU6IEN1c3RvbU5vUGVybWlzc2lvblRlbXBsYXRlRGlyZWN0aXZlO1xuXG4gICAgQENvbnRlbnRDaGlsZChDdXN0b21FbXB0eUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSlcbiAgICBjdXN0b21Ob0NvbnRlbnRUZW1wbGF0ZTogQ3VzdG9tRW1wdHlDb250ZW50VGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgICAvKiogSW5jbHVkZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBub2RlIGluIHRoZSBzZXJ2ZXIgcmVxdWVzdC4gRm9yIGV4YW1wbGU6IGFzc29jaWF0aW9uLCBpc0xpbmssIGlzTG9ja2VkIGFuZCBvdGhlcnMuICovXG4gICAgQElucHV0KClcbiAgICBpbmNsdWRlRmllbGRzOiBzdHJpbmdbXTtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlcnMgdGhlIE5vZGUgbGlzdCB1c2luZyB0aGUgKndoZXJlKiBjb25kaXRpb24gb2YgdGhlIFJFU1QgQVBJXG4gICAgICogKGZvciBleGFtcGxlLCBpc0ZvbGRlcj10cnVlKS4gU2VlIHRoZSBSRVNUIEFQSSBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgd2hlcmU6IHN0cmluZztcblxuICAgIC8qKiBDaGFuZ2UgdGhlIGRpc3BsYXkgbW9kZSBvZiB0aGUgdGFibGUuIENhbiBiZSBcImxpc3RcIiBvciBcImdhbGxlcnlcIi4gKi9cbiAgICBASW5wdXQoKVxuICAgIGRpc3BsYXk6IHN0cmluZyA9IERpc3BsYXlNb2RlLkxpc3Q7XG5cbiAgICAvKiogRGVmaW5lIGEgc2V0IG9mIENTUyBzdHlsZXMgdG8gYXBwbHkgZGVwZW5kaW5nIG9uIHRoZSBwZXJtaXNzaW9uXG4gICAgICogb2YgdGhlIHVzZXIgb24gdGhhdCBub2RlLiBTZWUgdGhlIFBlcm1pc3Npb24gU3R5bGUgbW9kZWxcbiAgICAgKiBwYWdlIGZvciBmdXJ0aGVyIGRldGFpbHMgYW5kIGV4YW1wbGVzLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcGVybWlzc2lvbnNTdHlsZTogUGVybWlzc2lvblN0eWxlTW9kZWxbXSA9IFtdO1xuXG4gICAgLyoqIFRoZSBkZWZhdWx0IHJvdXRlIGZvciBhbGwgdGhlIGxvY2F0aW9uLWJhc2VkIGNvbHVtbnMgKGlmIGRlY2xhcmVkKS4gKi9cbiAgICBASW5wdXQoKVxuICAgIGxvY2F0aW9uRm9ybWF0OiBzdHJpbmcgPSAnLyc7XG5cbiAgICAvKiogVG9nZ2xlcyBuYXZpZ2F0aW9uIHRvIGZvbGRlciBjb250ZW50IG9yIGZpbGUgcHJldmlldyAqL1xuICAgIEBJbnB1dCgpXG4gICAgbmF2aWdhdGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLyoqIFRvZ2dsZXMgdGhlIGhlYWRlciAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2hvd0hlYWRlcjogYm9vbGVhbiA9IHRydWU7XG5cbiAgICAvKiogVXNlciBpbnRlcmFjdGlvbiBmb3IgZm9sZGVyIG5hdmlnYXRpb24gb3IgZmlsZSBwcmV2aWV3LlxuICAgICAqIFZhbGlkIHZhbHVlcyBhcmUgXCJjbGlja1wiIGFuZCBcImRibGNsaWNrXCIuIERlZmF1bHQgdmFsdWU6IFwiZGJsY2xpY2tcIlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgbmF2aWdhdGlvbk1vZGU6IHN0cmluZyA9IERvY3VtZW50TGlzdENvbXBvbmVudC5ET1VCTEVfQ0xJQ0tfTkFWSUdBVElPTjsgLy8gY2xpY2t8ZGJsY2xpY2tcblxuICAgIC8qKiBTaG93IGRvY3VtZW50IHRodW1ibmFpbHMgcmF0aGVyIHRoYW4gaWNvbnMgKi9cbiAgICBASW5wdXQoKVxuICAgIHRodW1ibmFpbHM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBSb3cgc2VsZWN0aW9uIG1vZGUuIENhbiBiZSBudWxsLCBgc2luZ2xlYCBvciBgbXVsdGlwbGVgLiBGb3IgYG11bHRpcGxlYCBtb2RlLFxuICAgICAqIHlvdSBjYW4gdXNlIENtZCAobWFjT1MpIG9yIEN0cmwgKFdpbikgbW9kaWZpZXIga2V5IHRvIHRvZ2dsZSBzZWxlY3Rpb24gZm9yIG11bHRpcGxlIHJvd3MuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBzZWxlY3Rpb25Nb2RlOiBzdHJpbmcgPSAnc2luZ2xlJzsgLy8gbnVsbHxzaW5nbGV8bXVsdGlwbGVcblxuICAgIC8qKiBUb2dnbGVzIG11bHRpc2VsZWN0IG1vZGUgKi9cbiAgICBASW5wdXQoKVxuICAgIG11bHRpc2VsZWN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogVG9nZ2xlcyBjb250ZW50IGFjdGlvbnMgZm9yIGVhY2ggcm93ICovXG4gICAgQElucHV0KClcbiAgICBjb250ZW50QWN0aW9uczogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLyoqIFBvc2l0aW9uIG9mIHRoZSBjb250ZW50IGFjdGlvbnMgZHJvcGRvd24gbWVudS4gQ2FuIGJlIHNldCB0byBcImxlZnRcIiBvciBcInJpZ2h0XCIuICovXG4gICAgQElucHV0KClcbiAgICBjb250ZW50QWN0aW9uc1Bvc2l0aW9uOiBzdHJpbmcgPSAncmlnaHQnOyAvLyBsZWZ0fHJpZ2h0XG5cbiAgICAvKiogVG9nZ2xlcyBjb250ZXh0IG1lbnVzIGZvciBlYWNoIHJvdyAqL1xuICAgIEBJbnB1dCgpXG4gICAgY29udGV4dE1lbnVBY3Rpb25zOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogQ3VzdG9tIGltYWdlIGZvciBlbXB0eSBmb2xkZXIuIERlZmF1bHQgdmFsdWU6ICcuL2Fzc2V0cy9pbWFnZXMvZW1wdHlfZG9jX2xpYi5zdmcnICovXG4gICAgQElucHV0KClcbiAgICBlbXB0eUZvbGRlckltYWdlVXJsOiBzdHJpbmcgPSAnLi9hc3NldHMvaW1hZ2VzL2VtcHR5X2RvY19saWIuc3ZnJztcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhpcyBlbmFibGVzIHlvdSB0byBkcm9wIGZpbGVzIGRpcmVjdGx5IGludG8gc3ViZm9sZGVycyBzaG93blxuICAgICAqIGFzIGl0ZW1zIGluIHRoZSBsaXN0LiBXaGVuIGZhbHNlLCB0aGUgZHJvcHBlZCBmaWxlIHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4gICAgICogY3VycmVudCBmb2xkZXIgKGllLCB0aGUgb25lIGNvbnRhaW5pbmcgYWxsIHRoZSBpdGVtcyBzaG93biBpbiB0aGUgbGlzdCkuXG4gICAgICogU2VlIHRoZSBVcGxvYWQgZGlyZWN0aXZlIGZvciBmdXJ0aGVyIGRldGFpbHMgYWJvdXQgaG93IHRoZSBmaWxlIGRyb3AgaXNcbiAgICAgKiBoYW5kbGVkLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgYWxsb3dEcm9wRmlsZXM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKiBEZWZpbmVzIGRlZmF1bHQgc29ydGluZy4gVGhlIGZvcm1hdCBpcyBhbiBhcnJheSBvZiAyIHN0cmluZ3MgYFtrZXksIGRpcmVjdGlvbl1gXG4gICAgICogaS5lLiBgWyduYW1lJywgJ2Rlc2MnXWAgb3IgYFsnbmFtZScsICdhc2MnXWAuIFNldCB0aGlzIHZhbHVlIG9ubHkgaWYgeW91IHdhbnQgdG9cbiAgICAgKiBvdmVycmlkZSB0aGUgZGVmYXVsdCBzb3J0aW5nIGRldGVjdGVkIGJ5IHRoZSBjb21wb25lbnQgYmFzZWQgb24gY29sdW1ucy5cbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHNvcnRpbmcgPSBbJ25hbWUnLCAnYXNjJ107XG5cbiAgICAvKiogRGVmaW5lcyBzb3J0aW5nIG1vZGUuIENhbiBiZSBlaXRoZXIgYGNsaWVudGAgKGl0ZW1zIGluIHRoZSBsaXN0XG4gICAgICogYXJlIHNvcnRlZCBjbGllbnQtc2lkZSkgb3IgYHNlcnZlcmAgKHRoZSBvcmRlcmluZyBzdXBwbGllZCBieSB0aGVcbiAgICAgKiBzZXJ2ZXIgaXMgdXNlZCB3aXRob3V0IGZ1cnRoZXIgY2xpZW50LXNpZGUgc29ydGluZykuXG4gICAgICogTm90ZSB0aGF0IHRoZSBgc2VydmVyYCBvcHRpb24gKmRvZXMgbm90KiByZXF1ZXN0IHRoZSBzZXJ2ZXIgdG8gc29ydCB0aGUgZGF0YVxuICAgICAqIGJlZm9yZSBkZWxpdmVyaW5nIGl0LlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc29ydGluZ01vZGUgPSAnY2xpZW50JztcblxuICAgIC8qKiBUaGUgaW5saW5lIHN0eWxlIHRvIGFwcGx5IHRvIGV2ZXJ5IHJvdy4gU2VlXG4gICAgICogdGhlIEFuZ3VsYXIgTmdTdHlsZVxuICAgICAqIGRvY3MgZm9yIG1vcmUgZGV0YWlscyBhbmQgdXNhZ2UgZXhhbXBsZXMuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICByb3dTdHlsZTogc3RyaW5nO1xuXG4gICAgLyoqIFRoZSBDU1MgY2xhc3MgdG8gYXBwbHkgdG8gZXZlcnkgcm93ICovXG4gICAgQElucHV0KClcbiAgICByb3dTdHlsZUNsYXNzOiBzdHJpbmc7XG5cbiAgICAvKiogVG9nZ2xlcyB0aGUgbG9hZGluZyBzdGF0ZSBhbmQgYW5pbWF0ZWQgc3Bpbm5lcnMgZm9yIHRoZSBjb21wb25lbnQuIFVzZWQgaW5cbiAgICAgKiBjb21iaW5hdGlvbiB3aXRoIGBuYXZpZ2F0ZT1mYWxzZWAgdG8gcGVyZm9ybSBjdXN0b20gbmF2aWdhdGlvbiBhbmQgbG9hZGluZ1xuICAgICAqIHN0YXRlIGluZGljYXRpb24uXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBsb2FkaW5nOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBJbnB1dCgpXG4gICAgX3Jvd0ZpbHRlcjogUm93RmlsdGVyIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDdXN0b20gZnVuY3Rpb24gdG8gY2hvb3NlIHdoZXRoZXIgdG8gc2hvdyBvciBoaWRlIHJvd3MuXG4gICAgICogU2VlIHRoZSBbUm93IEZpbHRlciBNb2RlbF0ocm93LWZpbHRlci5tb2RlbC5tZCkgcGFnZSBmb3JcbiAgICAgKiBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHJvd0ZpbHRlcihyb3dGaWx0ZXI6IFJvd0ZpbHRlcikge1xuICAgICAgICB0aGlzLl9yb3dGaWx0ZXIgPSByb3dGaWx0ZXI7XG4gICAgICAgIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zZXRGaWx0ZXIodGhpcy5fcm93RmlsdGVyKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50Rm9sZGVySWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHJvd0ZpbHRlcigpOiBSb3dGaWx0ZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm93RmlsdGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEN1c3RvbSBmdW5jdGlvbiB0byBjaG9vc2UgaW1hZ2UgZmlsZSBwYXRocyB0byBzaG93LiBTZWUgdGhlXG4gICAgICogW0ltYWdlIFJlc29sdmVyIE1vZGVsXShpbWFnZS1yZXNvbHZlci5tb2RlbC5tZCkgcGFnZSBmb3JcbiAgICAgKiBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgaW1hZ2VSZXNvbHZlcjogYW55IHwgbnVsbCA9IG51bGw7XG5cbiAgICAvKiogVG9nZ2xlcyB0aGUgc3RpY2t5IGhlYWRlciBtb2RlLiAqL1xuICAgIEBJbnB1dCgpXG4gICAgc3RpY2t5SGVhZGVyOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBfY3VycmVudEZvbGRlcklkOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLyoqIFRoZSBJRCBvZiB0aGUgZm9sZGVyIG5vZGUgdG8gZGlzcGxheSBvciBhIHJlc2VydmVkIHN0cmluZyBhbGlhcyBmb3Igc3BlY2lhbCBzb3VyY2VzICovXG4gICAgQElucHV0KClcbiAgICBzZXQgY3VycmVudEZvbGRlcklkKGN1cnJlbnRGb2xkZXJJZDogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50Rm9sZGVySWQgIT09IGN1cnJlbnRGb2xkZXJJZCkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudEZvbGRlcklkID0gY3VycmVudEZvbGRlcklkO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5sb2FkUGFnZShudWxsLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldE5ld0ZvbGRlclBhZ2luYXRpb24oKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRGb2xkZXJJZCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZEZvbGRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGN1cnJlbnRGb2xkZXJJZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VycmVudEZvbGRlcklkO1xuICAgIH1cblxuICAgIC8qKiBUaGUgRG9jdW1lbnQgbGlzdCB3aWxsIHNob3cgYWxsIHRoZSBub2RlcyBjb250YWluZWQgaW4gdGhlIE5vZGVQYWdpbmcgZW50aXR5ICovXG4gICAgQElucHV0KClcbiAgICBub2RlOiBOb2RlUGFnaW5nID0gbnVsbDtcblxuICAgIC8qKiBEZWZhdWx0IHZhbHVlIGlzIHN0b3JlZCBpbiB0aGUgdXNlciBwcmVmZXJlbmNlIHNldHRpbmdzLiBVc2UgdGhpcyBvbmx5IGlmIHlvdSBhcmUgbm90IHVzaW5nIHBhZ2luYXRpb24uICovXG4gICAgQElucHV0KClcbiAgICBtYXhJdGVtczogbnVtYmVyID0gdGhpcy5ERUZBVUxUX1BBR0lOQVRJT04ubWF4SXRlbXM7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBhIGxpc3Qgbm9kZSAqL1xuICAgIEBPdXRwdXQoKVxuICAgIG5vZGVDbGljazogRXZlbnRFbWl0dGVyPE5vZGVFbnRpdHlFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPE5vZGVFbnRpdHlFdmVudD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIHVzZXIgZG91YmxlLWNsaWNrcyBhIGxpc3Qgbm9kZSAqL1xuICAgIEBPdXRwdXQoKVxuICAgIG5vZGVEYmxDbGljazogRXZlbnRFbWl0dGVyPE5vZGVFbnRpdHlFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPE5vZGVFbnRpdHlFdmVudD4oKTtcblxuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGN1cnJlbnQgZGlzcGxheSBmb2xkZXIgY2hhbmdlcyAqL1xuICAgIEBPdXRwdXQoKVxuICAgIGZvbGRlckNoYW5nZTogRXZlbnRFbWl0dGVyPE5vZGVFbnRyeUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8Tm9kZUVudHJ5RXZlbnQ+KCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSB1c2VyIGFjdHMgdXBvbiBmaWxlcyB3aXRoIGVpdGhlciBzaW5nbGUgb3IgZG91YmxlIGNsaWNrXG4gICAgICogKGRlcGVuZHMgb24gYG5hdmlnYXRpb24tbW9kZWApLiBVc2VmdWwgZm9yIGludGVncmF0aW9uIHdpdGggdGhlXG4gICAgICogVmlld2VyIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwcmV2aWV3OiBFdmVudEVtaXR0ZXI8Tm9kZUVudGl0eUV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8Tm9kZUVudGl0eUV2ZW50PigpO1xuXG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgRG9jdW1lbnQgTGlzdCBoYXMgbG9hZGVkIGFsbCBpdGVtcyBhbmQgaXMgcmVhZHkgZm9yIHVzZSAqL1xuICAgIEBPdXRwdXQoKVxuICAgIHJlYWR5OiBFdmVudEVtaXR0ZXI8Tm9kZVBhZ2luZz4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSBBUEkgZmFpbHMgdG8gZ2V0IHRoZSBEb2N1bWVudCBMaXN0IGRhdGEgKi9cbiAgICBAT3V0cHV0KClcbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICBAVmlld0NoaWxkKCdkYXRhVGFibGUnKVxuICAgIGRhdGFUYWJsZTogRGF0YVRhYmxlQ29tcG9uZW50O1xuXG4gICAgYWN0aW9uczogQ29udGVudEFjdGlvbk1vZGVsW10gPSBbXTtcbiAgICBjb250ZXh0QWN0aW9uSGFuZGxlcjogU3ViamVjdDxhbnk+ID0gbmV3IFN1YmplY3QoKTtcbiAgICBkYXRhOiBTaGFyZURhdGFUYWJsZUFkYXB0ZXI7XG4gICAgbm9QZXJtaXNzaW9uOiBib29sZWFuID0gZmFsc2U7XG4gICAgc2VsZWN0aW9uID0gbmV3IEFycmF5PE5vZGVFbnRyeT4oKTtcbiAgICAkZm9sZGVyTm9kZTogU3ViamVjdDxOb2RlPiA9IG5ldyBTdWJqZWN0PE5vZGU+KCk7XG5cbiAgICAvLyBAZGVwcmVjYXRlZCAzLjAuMFxuICAgIGZvbGRlck5vZGU6IE5vZGU7XG5cbiAgICBwcml2YXRlIF9wYWdpbmF0aW9uOiBQYWdpbmF0aW9uTW9kZWwgPSB0aGlzLkRFRkFVTFRfUEFHSU5BVElPTjtcbiAgICBwYWdpbmF0aW9uOiBCZWhhdmlvclN1YmplY3Q8UGFnaW5hdGlvbk1vZGVsPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UGFnaW5hdGlvbk1vZGVsPih0aGlzLkRFRkFVTFRfUEFHSU5BVElPTik7XG5cbiAgICBwcml2YXRlIGxheW91dFByZXNldHMgPSB7fTtcbiAgICBwcml2YXRlIHJvd01lbnVDYWNoZTogeyBba2V5OiBzdHJpbmddOiBDb250ZW50QWN0aW9uTW9kZWxbXSB9ID0ge307XG4gICAgcHJpdmF0ZSBsb2FkaW5nVGltZW91dDtcbiAgICBwcml2YXRlIG9uRGVzdHJveSQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkb2N1bWVudExpc3RTZXJ2aWNlOiBEb2N1bWVudExpc3RTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgYXBwQ29uZmlnOiBBcHBDb25maWdTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgdXNlclByZWZlcmVuY2VzU2VydmljZTogVXNlclByZWZlcmVuY2VzU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGNvbnRlbnRTZXJ2aWNlOiBDb250ZW50U2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIHRodW1ibmFpbFNlcnZpY2U6IFRodW1ibmFpbFNlcnZpY2UsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBhbGZyZXNjb0FwaVNlcnZpY2U6IEFsZnJlc2NvQXBpU2VydmljZSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIGxvY2tTZXJ2aWNlOiBMb2NrU2VydmljZSkge1xuICAgICAgICB0aGlzLnVzZXJQcmVmZXJlbmNlc1NlcnZpY2VcbiAgICAgICAgICAgIC5zZWxlY3QoVXNlclByZWZlcmVuY2VWYWx1ZXMuUGFnaW5hdGlvblNpemUpXG4gICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5vbkRlc3Ryb3kkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUocGFnU2l6ZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhJdGVtcyA9IHRoaXMuX3BhZ2luYXRpb24ubWF4SXRlbXMgPSBwYWdTaXplO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0Q29udGV4dEFjdGlvbnMobm9kZTogTm9kZUVudHJ5KSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZW50cnkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbnMgPSB0aGlzLmdldE5vZGVBY3Rpb25zKG5vZGUpO1xuICAgICAgICAgICAgaWYgKGFjdGlvbnMgJiYgYWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnMubWFwKChjdXJyZW50QWN0aW9uOiBDb250ZW50QWN0aW9uTW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiBjdXJyZW50QWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3Q6IHRoaXMuY29udGV4dEFjdGlvbkhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBnZXQgaGFzQ3VzdG9tTGF5b3V0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5MaXN0ICYmIHRoaXMuY29sdW1uTGlzdC5jb2x1bW5zICYmIHRoaXMuY29sdW1uTGlzdC5jb2x1bW5zLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0U29ydGluZygpOiBEYXRhU29ydGluZyB7XG4gICAgICAgIGxldCBkZWZhdWx0U29ydGluZzogRGF0YVNvcnRpbmc7XG4gICAgICAgIGlmICh0aGlzLnNvcnRpbmcpIHtcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIGRpcmVjdGlvbl0gPSB0aGlzLnNvcnRpbmc7XG4gICAgICAgICAgICBkZWZhdWx0U29ydGluZyA9IG5ldyBEYXRhU29ydGluZyhrZXksIGRpcmVjdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRTb3J0aW5nO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TGF5b3V0UHJlc2V0KG5hbWU6IHN0cmluZyA9ICdkZWZhdWx0Jyk6IERhdGFDb2x1bW5bXSB7XG4gICAgICAgIHJldHVybiAodGhpcy5sYXlvdXRQcmVzZXRzW25hbWVdIHx8IHRoaXMubGF5b3V0UHJlc2V0c1snZGVmYXVsdCddKS5tYXAoKGNvbCkgPT4gbmV3IE9iamVjdERhdGFDb2x1bW4oY29sKSk7XG4gICAgfVxuXG4gICAgaXNNb2JpbGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIS9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB9XG5cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuZGF0YSB8fCB0aGlzLmRhdGEuZ2V0Um93cygpLmxlbmd0aCA9PT0gMDtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5yb3dNZW51Q2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5sb2FkTGF5b3V0UHJlc2V0cygpO1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgU2hhcmVEYXRhVGFibGVBZGFwdGVyKHRoaXMudGh1bWJuYWlsU2VydmljZSwgdGhpcy5jb250ZW50U2VydmljZSwgbnVsbCwgdGhpcy5nZXREZWZhdWx0U29ydGluZygpLCB0aGlzLnNvcnRpbmdNb2RlKTtcbiAgICAgICAgdGhpcy5kYXRhLnRodW1ibmFpbHMgPSB0aGlzLnRodW1ibmFpbHM7XG4gICAgICAgIHRoaXMuZGF0YS5wZXJtaXNzaW9uc1N0eWxlID0gdGhpcy5wZXJtaXNzaW9uc1N0eWxlO1xuXG4gICAgICAgIGlmICh0aGlzLl9yb3dGaWx0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zZXRGaWx0ZXIodGhpcy5fcm93RmlsdGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmltYWdlUmVzb2x2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zZXRJbWFnZVJlc29sdmVyKHRoaXMuaW1hZ2VSZXNvbHZlcik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbnRleHRBY3Rpb25IYW5kbGVyXG4gICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5vbkRlc3Ryb3kkKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUodmFsID0+IHRoaXMuY29udGV4dEFjdGlvbkNhbGxiYWNrKHZhbCkpO1xuXG4gICAgICAgIHRoaXMuZW5mb3JjZVNpbmdsZUNsaWNrTmF2aWdhdGlvbkZvck1vYmlsZSgpO1xuICAgIH1cblxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uTGlzdCkge1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5MaXN0LmNvbHVtbnMuY2hhbmdlc1xuICAgICAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLm9uRGVzdHJveSQpKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5zZXRUYWJsZVNjaGVtYSgpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFRhYmxlU2NoZW1hKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRUYWJsZVNjaGVtYSgpIHtcbiAgICAgICAgbGV0IHNjaGVtYTogRGF0YUNvbHVtbltdID0gW107XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzQ3VzdG9tTGF5b3V0KSB7XG4gICAgICAgICAgICBzY2hlbWEgPSB0aGlzLmNvbHVtbkxpc3QuY29sdW1ucy5tYXAoKGMpID0+IDxEYXRhQ29sdW1uPiBjKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBuZXcgU2hhcmVEYXRhVGFibGVBZGFwdGVyKHRoaXMudGh1bWJuYWlsU2VydmljZSwgdGhpcy5jb250ZW50U2VydmljZSwgc2NoZW1hLCB0aGlzLmdldERlZmF1bHRTb3J0aW5nKCksIHRoaXMuc29ydGluZ01vZGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHNjaGVtYSAmJiBzY2hlbWEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnNldENvbHVtbnMoc2NoZW1hKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLmRhdGEuZ2V0Q29sdW1ucygpO1xuICAgICAgICBpZiAoIWNvbHVtbnMgfHwgY29sdW1ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBEZWZhdWx0Q29sdW1ucyh0aGlzLl9jdXJyZW50Rm9sZGVySWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLnJlc2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS50aHVtYm5haWxzID0gdGhpcy50aHVtYm5haWxzO1xuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZXMuc29ydGluZ01vZGUgJiYgIWNoYW5nZXMuc29ydGluZ01vZGUuZmlyc3RDaGFuZ2UgJiYgdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEuc29ydGluZ01vZGUgPSBjaGFuZ2VzLnNvcnRpbmdNb2RlLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFuZ2VzLnNvcnRpbmcgJiYgIWNoYW5nZXMuc29ydGluZy5maXJzdENoYW5nZSAmJiB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gY2hhbmdlcy5zb3J0aW5nLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAmJiBuZXdWYWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW2tleSwgZGlyZWN0aW9uXSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5zZXRTb3J0aW5nKG5ldyBEYXRhU29ydGluZyhrZXksIGRpcmVjdGlvbikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgaWYgKGNoYW5nZXMubm9kZSAmJiBjaGFuZ2VzLm5vZGUuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVyZ2UgPSB0aGlzLl9wYWdpbmF0aW9uID8gdGhpcy5fcGFnaW5hdGlvbi5tZXJnZSA6IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmxvYWRQYWdlKGNoYW5nZXMubm9kZS5jdXJyZW50VmFsdWUsIG1lcmdlKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGF0YVJlYWR5KGNoYW5nZXMubm9kZS5jdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGFuZ2VzLmltYWdlUmVzb2x2ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuc2V0SW1hZ2VSZXNvbHZlcihjaGFuZ2VzLmltYWdlUmVzb2x2ZXIuY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbG9hZCgpIHtcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm5vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEubG9hZFBhZ2UodGhpcy5ub2RlLCB0aGlzLl9wYWdpbmF0aW9uLm1lcmdlKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGF0YVJlYWR5KHRoaXMubm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZEZvbGRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb250ZXh0QWN0aW9uQ2FsbGJhY2soYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZUNvbnRlbnRBY3Rpb24oYWN0aW9uLm5vZGUsIGFjdGlvbi5tb2RlbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXROb2RlQWN0aW9ucyhub2RlOiBOb2RlRW50cnkgfCBhbnkpOiBDb250ZW50QWN0aW9uTW9kZWxbXSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZW50cnkpIHtcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAobm9kZS5lbnRyeS5pc0ZpbGUpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSAnZG9jdW1lbnQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLmVudHJ5LmlzRm9sZGVyKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gJ2ZvbGRlcic7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25zID0gdGhpcy5yb3dNZW51Q2FjaGVbbm9kZS5lbnRyeS5pZF07XG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucy5mb3JFYWNoKChhY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaEFjdGlvbihhY3Rpb24sIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uc0J5VGFyZ2V0ID0gdGhpcy5hY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1Zpc2libGUgPSAodHlwZW9mIGVudHJ5LnZpc2libGUgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlbnRyeS52aXNpYmxlKG5vZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBlbnRyeS52aXNpYmxlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWaXNpYmxlICYmIGVudHJ5LnRhcmdldC50b0xvd2VyQ2FzZSgpID09PSB0YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKGFjdGlvbikgPT4gbmV3IENvbnRlbnRBY3Rpb25Nb2RlbChhY3Rpb24pKTtcblxuICAgICAgICAgICAgICAgIGFjdGlvbnNCeVRhcmdldC5mb3JFYWNoKChhY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoQWN0aW9uKGFjdGlvbiwgbm9kZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJvd01lbnVDYWNoZVtub2RlLmVudHJ5LmlkXSA9IGFjdGlvbnNCeVRhcmdldDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uc0J5VGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVmcmVzaEFjdGlvbihhY3Rpb246IENvbnRlbnRBY3Rpb25Nb2RlbCwgbm9kZTogTm9kZUVudHJ5KSB7XG4gICAgICAgIGFjdGlvbi5kaXNhYmxlZCA9IHRoaXMuaXNBY3Rpb25EaXNhYmxlZChhY3Rpb24sIG5vZGUpO1xuICAgICAgICBhY3Rpb24udmlzaWJsZSA9IHRoaXMuaXNBY3Rpb25WaXNpYmxlKGFjdGlvbiwgbm9kZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0FjdGlvblZpc2libGUoYWN0aW9uOiBDb250ZW50QWN0aW9uTW9kZWwsIG5vZGU6IE5vZGVFbnRyeSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbi52aXNpYmxlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLnZpc2libGUobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYWN0aW9uLnZpc2libGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0FjdGlvbkRpc2FibGVkKGFjdGlvbjogQ29udGVudEFjdGlvbk1vZGVsLCBub2RlOiBOb2RlRW50cnkpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24uZGlzYWJsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24uZGlzYWJsZWQobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGFjdGlvbi5wZXJtaXNzaW9uICYmXG4gICAgICAgICAgICBhY3Rpb24uZGlzYWJsZVdpdGhOb1Blcm1pc3Npb24gJiZcbiAgICAgICAgICAgICF0aGlzLmNvbnRlbnRTZXJ2aWNlLmhhc0FsbG93YWJsZU9wZXJhdGlvbnMobm9kZS5lbnRyeSwgYWN0aW9uLnBlcm1pc3Npb24pKSB8fFxuICAgICAgICAgICAgdGhpcy5sb2NrU2VydmljZS5pc0xvY2tlZChub2RlLmVudHJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLmRpc2FibGVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY29udGV4dG1lbnUnLCBbJyRldmVudCddKVxuICAgIG9uU2hvd0NvbnRleHRNZW51KGU/OiBFdmVudCkge1xuICAgICAgICBpZiAoZSAmJiB0aGlzLmNvbnRleHRNZW51QWN0aW9ucykge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmF2aWdhdGVUbyhub2RlOiBOb2RlIHwgc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXROZXdGb2xkZXJQYWdpbmF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50Rm9sZGVySWQgPSBub2RlO1xuICAgICAgICAgICAgdGhpcy5mb2xkZXJDaGFuZ2UuZW1pdChuZXcgTm9kZUVudHJ5RXZlbnQoPE5vZGU+IHsgaWQ6IG5vZGUgfSkpO1xuICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FuTmF2aWdhdGVGb2xkZXIobm9kZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0TmV3Rm9sZGVyUGFnaW5hdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRGb2xkZXJJZCA9IHRoaXMuZ2V0Tm9kZUZvbGRlckRlc3RpbmF0aW9uSWQobm9kZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2xkZXJDaGFuZ2UuZW1pdChuZXcgTm9kZUVudHJ5RXZlbnQoPE5vZGU+IHsgaWQ6IHRoaXMuX2N1cnJlbnRGb2xkZXJJZCB9KSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXROb2RlRm9sZGVyRGVzdGluYXRpb25JZChub2RlOiBOb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzTGlua0ZvbGRlcihub2RlKSA/IG5vZGUucHJvcGVydGllc1snY206ZGVzdGluYXRpb24nXSA6IG5vZGUuaWQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0xpbmtGb2xkZXIobm9kZTogTm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gJ2FwcDpmb2xkZXJsaW5rJyAmJiBub2RlLnByb3BlcnRpZXMgJiZcbiAgICAgICAgICAgIG5vZGUucHJvcGVydGllc1snY206ZGVzdGluYXRpb24nXTtcbiAgICB9XG5cbiAgICB1cGRhdGVDdXN0b21Tb3VyY2VEYXRhKG5vZGVJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRGb2xkZXJJZCA9IG5vZGVJZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIHdoZW4gZXhlY3V0aW5nIGNvbnRlbnQgYWN0aW9uIGZvciBhIGRvY3VtZW50IG9yIGZvbGRlci5cbiAgICAgKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGJlIHRoZSBjb250ZXh0IG9mIHRoZSBleGVjdXRpb24uXG4gICAgICogQHBhcmFtIGFjdGlvbiBBY3Rpb24gdG8gYmUgZXhlY3V0ZWQgYWdhaW5zdCB0aGUgY29udGV4dC5cbiAgICAgKi9cbiAgICBleGVjdXRlQ29udGVudEFjdGlvbihub2RlOiBOb2RlRW50cnksIGFjdGlvbjogQ29udGVudEFjdGlvbk1vZGVsKSB7XG4gICAgICAgIGlmIChub2RlICYmIG5vZGUuZW50cnkgJiYgYWN0aW9uKSB7XG4gICAgICAgICAgICBsZXQgaGFuZGxlclN1YjtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24uaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJTdWIgPSBhY3Rpb24uaGFuZGxlcihub2RlLCB0aGlzLCBhY3Rpb24ucGVybWlzc2lvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJTdWIgPSBvZih0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24uZXhlY3V0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBoYW5kbGVyU3ViKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlclN1YlxuICAgICAgICAgICAgICAgICAgICAucGlwZSh0YWtlVW50aWwodGhpcy5vbkRlc3Ryb3kkKSlcbiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiBhY3Rpb24uZXhlY3V0ZShub2RlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldExvYWRpbmdTdGF0ZSh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRpbmdUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5sb2FkaW5nVGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWRGb2xkZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcGFnaW5hdGlvbi5tZXJnZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRMb2FkaW5nU3RhdGUodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuaGFzQ3VzdG9tTGF5b3V0KSB7XG4gICAgICAgICAgICB0aGlzLnNldHVwRGVmYXVsdENvbHVtbnModGhpcy5fY3VycmVudEZvbGRlcklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50TGlzdFNlcnZpY2UuaXNDdXN0b21Tb3VyY2VTZXJ2aWNlKHRoaXMuX2N1cnJlbnRGb2xkZXJJZCkpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VzdG9tU291cmNlRGF0YSh0aGlzLl9jdXJyZW50Rm9sZGVySWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kb2N1bWVudExpc3RTZXJ2aWNlLmxvYWRGb2xkZXJCeU5vZGVJZCh0aGlzLl9jdXJyZW50Rm9sZGVySWQsIHRoaXMuX3BhZ2luYXRpb24sIHRoaXMuaW5jbHVkZUZpZWxkcywgdGhpcy53aGVyZSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKGRvY3VtZW50Tm9kZTogRG9jdW1lbnRMb2FkZXJOb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50Tm9kZS5jdXJyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvbGRlck5vZGUgPSBkb2N1bWVudE5vZGUuY3VycmVudE5vZGUuZW50cnk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJGZvbGRlck5vZGUubmV4dChkb2N1bWVudE5vZGUuY3VycmVudE5vZGUuZW50cnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm9uUGFnZUxvYWRlZChkb2N1bWVudE5vZGUuY2hpbGRyZW4pO1xuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlc2V0U2VsZWN0aW9uKCkge1xuICAgICAgICB0aGlzLmRhdGFUYWJsZS5yZXNldFNlbGVjdGlvbigpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IFtdO1xuICAgICAgICB0aGlzLm5vUGVybWlzc2lvbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIG9uUGFnZUxvYWRlZChub2RlUGFnaW5nOiBOb2RlUGFnaW5nKSB7XG4gICAgICAgIGlmIChub2RlUGFnaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEubG9hZFBhZ2Uobm9kZVBhZ2luZywgdGhpcy5fcGFnaW5hdGlvbi5tZXJnZSk7XG4gICAgICAgICAgICB0aGlzLnNldExvYWRpbmdTdGF0ZShmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLm9uRGF0YVJlYWR5KG5vZGVQYWdpbmcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvZiBwcmVkZWZpbmVkIGNvbHVtbnMuXG4gICAgICovXG4gICAgc2V0dXBEZWZhdWx0Q29sdW1ucyhwcmVzZXQ6IHN0cmluZyA9ICdkZWZhdWx0Jyk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5kYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBjb2x1bW5zID0gdGhpcy5nZXRMYXlvdXRQcmVzZXQocHJlc2V0KTtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5zZXRDb2x1bW5zKGNvbHVtbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25QcmV2aWV3RmlsZShub2RlOiBOb2RlRW50cnkpIHtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJldmlldy5lbWl0KG5ldyBOb2RlRW50aXR5RXZlbnQobm9kZSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Ob2RlQ2xpY2sobm9kZUVudHJ5OiBOb2RlRW50cnkpIHtcbiAgICAgICAgY29uc3QgZG9tRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ25vZGUtY2xpY2snLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgbm9kZTogbm9kZUVudHJ5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnViYmxlczogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5kaXNwYXRjaEV2ZW50KGRvbUV2ZW50KTtcblxuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBOb2RlRW50aXR5RXZlbnQobm9kZUVudHJ5KTtcbiAgICAgICAgdGhpcy5ub2RlQ2xpY2suZW1pdChldmVudCk7XG5cbiAgICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5uYXZpZ2F0ZSAmJiB0aGlzLm5hdmlnYXRpb25Nb2RlID09PSBEb2N1bWVudExpc3RDb21wb25lbnQuU0lOR0xFX0NMSUNLX05BVklHQVRJT04pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV4ZWN1dGVBY3Rpb25DbGljayhub2RlRW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBvbk5vZGVEYmxDbGljayhub2RlRW50cnk6IE5vZGVFbnRyeSkge1xuICAgICAgICBjb25zdCBkb21FdmVudCA9IG5ldyBDdXN0b21FdmVudCgnbm9kZS1kYmxjbGljaycsIHtcbiAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgIHNlbmRlcjogdGhpcyxcbiAgICAgICAgICAgICAgICBub2RlOiBub2RlRW50cnlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBidWJibGVzOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5kaXNwYXRjaEV2ZW50KGRvbUV2ZW50KTtcblxuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBOb2RlRW50aXR5RXZlbnQobm9kZUVudHJ5KTtcbiAgICAgICAgdGhpcy5ub2RlRGJsQ2xpY2suZW1pdChldmVudCk7XG5cbiAgICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5uYXZpZ2F0ZSAmJiB0aGlzLm5hdmlnYXRpb25Nb2RlID09PSBEb2N1bWVudExpc3RDb21wb25lbnQuRE9VQkxFX0NMSUNLX05BVklHQVRJT04pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV4ZWN1dGVBY3Rpb25DbGljayhub2RlRW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhlY3V0ZUFjdGlvbkNsaWNrKG5vZGVFbnRyeTogTm9kZUVudHJ5KSB7XG4gICAgICAgIGlmIChub2RlRW50cnkgJiYgbm9kZUVudHJ5LmVudHJ5KSB7XG4gICAgICAgICAgICBpZiAobm9kZUVudHJ5LmVudHJ5LmlzRmlsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25QcmV2aWV3RmlsZShub2RlRW50cnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobm9kZUVudHJ5LmVudHJ5LmlzRm9sZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvKG5vZGVFbnRyeS5lbnRyeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChub2RlRW50cnkuZW50cnlbJ2d1aWQnXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGU6IHRoaXMuaW5jbHVkZUZpZWxkc1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFsZnJlc2NvQXBpU2VydmljZS5ub2Rlc0FwaS5nZXROb2RlKG5vZGVFbnRyeS5lbnRyeVsnZ3VpZCddLCBvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigobm9kZTogTm9kZUVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlVG8obm9kZS5lbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Ob2RlU2VsZWN0KGV2ZW50OiB7IHJvdzogU2hhcmVEYXRhUm93LCBzZWxlY3Rpb246IEFycmF5PFNoYXJlRGF0YVJvdz4gfSkge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IGV2ZW50LnNlbGVjdGlvbi5tYXAoKGVudHJ5KSA9PiBlbnRyeS5ub2RlKTtcbiAgICAgICAgY29uc3QgZG9tRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ25vZGUtc2VsZWN0Jywge1xuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgbm9kZTogZXZlbnQucm93Lm5vZGUsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uOiB0aGlzLnNlbGVjdGlvblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQoZG9tRXZlbnQpO1xuICAgIH1cblxuICAgIG9uTm9kZVVuc2VsZWN0KGV2ZW50OiB7IHJvdzogU2hhcmVEYXRhUm93LCBzZWxlY3Rpb246IEFycmF5PFNoYXJlRGF0YVJvdz4gfSkge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IGV2ZW50LnNlbGVjdGlvbi5tYXAoKGVudHJ5KSA9PiBlbnRyeS5ub2RlKTtcbiAgICAgICAgY29uc3QgZG9tRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ25vZGUtdW5zZWxlY3QnLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICBub2RlOiBldmVudC5yb3cgPyBldmVudC5yb3cubm9kZSA6IG51bGwsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uOiB0aGlzLnNlbGVjdGlvblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQoZG9tRXZlbnQpO1xuICAgIH1cblxuICAgIG9uU2hvd1Jvd0NvbnRleHRNZW51KGV2ZW50OiBEYXRhQ2VsbEV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRleHRNZW51QWN0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IGV2ZW50LnZhbHVlO1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9ICg8U2hhcmVEYXRhUm93PiBhcmdzLnJvdykubm9kZTtcbiAgICAgICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgICAgICAgYXJncy5hY3Rpb25zID0gdGhpcy5nZXRDb250ZXh0QWN0aW9ucyhub2RlKSB8fCBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uU2hvd1Jvd0FjdGlvbnNNZW51KGV2ZW50OiBEYXRhQ2VsbEV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRBY3Rpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0gZXZlbnQudmFsdWU7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gKDxTaGFyZURhdGFSb3c+IGFyZ3Mucm93KS5ub2RlO1xuICAgICAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBhcmdzLmFjdGlvbnMgPSB0aGlzLmdldE5vZGVBY3Rpb25zKG5vZGUpIHx8IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25FeGVjdXRlUm93QWN0aW9uKGV2ZW50OiBEYXRhUm93QWN0aW9uRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudEFjdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSBldmVudC52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSAoPFNoYXJlRGF0YVJvdz4gYXJncy5yb3cpLm5vZGU7XG4gICAgICAgICAgICBjb25zdCBhY3Rpb24gPSAoPENvbnRlbnRBY3Rpb25Nb2RlbD4gYXJncy5hY3Rpb24pO1xuICAgICAgICAgICAgdGhpcy5leGVjdXRlQ29udGVudEFjdGlvbihub2RlLCBhY3Rpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBlbmZvcmNlU2luZ2xlQ2xpY2tOYXZpZ2F0aW9uRm9yTW9iaWxlKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pc01vYmlsZSgpKSB7XG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRpb25Nb2RlID0gRG9jdW1lbnRMaXN0Q29tcG9uZW50LlNJTkdMRV9DTElDS19OQVZJR0FUSU9OO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2FuTmF2aWdhdGVGb2xkZXIobm9kZTogTm9kZSk6IGJvb2xlYW4ge1xuICAgICAgICBsZXQgY2FuTmF2aWdhdGVGb2xkZXI6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgICAgICBpZiAobm9kZSAmJiBub2RlLmlzRm9sZGVyKSB7XG4gICAgICAgICAgICBjYW5OYXZpZ2F0ZUZvbGRlciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FuTmF2aWdhdGVGb2xkZXI7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkTGF5b3V0UHJlc2V0cygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZXh0ZXJuYWxTZXR0aW5ncyA9IHRoaXMuYXBwQ29uZmlnLmdldCgnZG9jdW1lbnQtbGlzdC5wcmVzZXRzJywgbnVsbCk7XG5cbiAgICAgICAgaWYgKGV4dGVybmFsU2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0UHJlc2V0cyA9IE9iamVjdC5hc3NpZ24oe30sIHByZXNldHNEZWZhdWx0TW9kZWwsIGV4dGVybmFsU2V0dGluZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sYXlvdXRQcmVzZXRzID0gcHJlc2V0c0RlZmF1bHRNb2RlbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgb25EYXRhUmVhZHkobm9kZVBhZ2luZzogTm9kZVBhZ2luZykge1xuICAgICAgICB0aGlzLnJlYWR5LmVtaXQobm9kZVBhZ2luZyk7XG4gICAgICAgIHRoaXMucGFnaW5hdGlvbi5uZXh0KG5vZGVQYWdpbmcubGlzdC5wYWdpbmF0aW9uKTtcbiAgICB9XG5cbiAgICB1cGRhdGVQYWdpbmF0aW9uKHJlcXVlc3RQYWdpbmF0aW9uTW9kZWw6IFJlcXVlc3RQYWdpbmF0aW9uTW9kZWwpIHtcbiAgICAgICAgdGhpcy5fcGFnaW5hdGlvbi5tYXhJdGVtcyA9IHJlcXVlc3RQYWdpbmF0aW9uTW9kZWwubWF4SXRlbXM7XG4gICAgICAgIHRoaXMuX3BhZ2luYXRpb24ubWVyZ2UgPSByZXF1ZXN0UGFnaW5hdGlvbk1vZGVsLm1lcmdlO1xuICAgICAgICB0aGlzLl9wYWdpbmF0aW9uLnNraXBDb3VudCA9IHJlcXVlc3RQYWdpbmF0aW9uTW9kZWwuc2tpcENvdW50O1xuICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzZXROZXdGb2xkZXJQYWdpbmF0aW9uKCkge1xuICAgICAgICB0aGlzLl9wYWdpbmF0aW9uLnNraXBDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX3BhZ2luYXRpb24ubWF4SXRlbXMgPSB0aGlzLm1heEl0ZW1zO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLm9uRGVzdHJveSQubmV4dCh0cnVlKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnI6IGFueSkge1xuICAgICAgICBpZiAoZXJyLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKEpTT04ucGFyc2UoZXJyLm1lc3NhZ2UpLmVycm9yLnN0YXR1c0NvZGUgPT09IDQwMykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldExvYWRpbmdTdGF0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9QZXJtaXNzaW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXJyb3IuZW1pdChlcnIpO1xuXG4gICAgfVxuXG59XG4iXX0=