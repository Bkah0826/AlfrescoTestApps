{"version":3,"sources":["ng://@alfresco/adf-content-services/material.module.ts","node_modules/tslib/tslib.es6.js","ng://@alfresco/adf-content-services/document-list/models/document-folder.model.ts","ng://@alfresco/adf-content-services/document-list/services/custom-resources.service.ts","ng://@alfresco/adf-content-services/document-list/services/document-list.service.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.component.ts","ng://@alfresco/adf-content-services/dialogs/node-lock.dialog.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-dialog.service.ts","ng://@alfresco/adf-content-services/directives/node-lock.directive.ts","ng://@alfresco/adf-content-services/directives/content-directive.module.ts","ng://@alfresco/adf-content-services/social/services/rating.service.ts","ng://@alfresco/adf-content-services/social/rating.component.ts","ng://@alfresco/adf-content-services/social/like.component.ts","ng://@alfresco/adf-content-services/social/social.module.ts","ng://@alfresco/adf-content-services/tag/services/tag.service.ts","ng://@alfresco/adf-content-services/tag/tag-actions.component.ts","ng://@alfresco/adf-content-services/tag/tag-list.component.ts","ng://@alfresco/adf-content-services/tag/tag-node-list.component.ts","ng://@alfresco/adf-content-services/tag/tag.module.ts","ng://@alfresco/adf-content-services/webscript/webscript.component.ts","ng://@alfresco/adf-content-services/webscript/webscript.module.ts","ng://@alfresco/adf-content-services/document-list/data/share-data-row.model.ts","ng://@alfresco/adf-content-services/document-list/data/share-datatable-adapter.ts","ng://@alfresco/adf-content-services/document-list/models/preset.model.ts","ng://@alfresco/adf-content-services/document-list/models/content-action.model.ts","ng://@alfresco/adf-content-services/document-list/components/node.event.ts","ng://@alfresco/adf-content-services/document-list/components/document-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-column/content-column-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-column/content-column.component.ts","ng://@alfresco/adf-content-services/document-list/models/permissions.model.ts","ng://@alfresco/adf-content-services/document-list/services/node-actions.service.ts","ng://@alfresco/adf-content-services/document-list/services/document-actions.service.ts","ng://@alfresco/adf-content-services/document-list/services/folder-actions.service.ts","ng://@alfresco/adf-content-services/document-list/components/content-action/content-action-list.component.ts","ng://@alfresco/adf-content-services/document-list/components/content-action/content-action.component.ts","ng://@alfresco/adf-content-services/document-list/components/library-name-column/library-name-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/library-role-column/library-role-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/library-status-column/library-status-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/name-column/name-column.component.ts","ng://@alfresco/adf-content-services/document-list/components/trashcan-name-column/trashcan-name-column.component.ts","ng://@alfresco/adf-content-services/document-list/models/document-library.model.ts","ng://@alfresco/adf-content-services/document-list/models/permissions-style.model.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-dialog.component.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-list-row.component.ts","ng://@alfresco/adf-content-services/upload/components/file-uploading-list.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-files.event.ts","ng://@alfresco/adf-content-services/upload/components/base-upload/upload-base.ts","ng://@alfresco/adf-content-services/upload/components/upload-button.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-version-button.component.ts","ng://@alfresco/adf-content-services/upload/components/upload-drag-area.component.ts","ng://@alfresco/adf-content-services/upload/pipes/file-upload-error.pipe.ts","ng://@alfresco/adf-content-services/upload/directives/file-draggable.directive.ts","ng://@alfresco/adf-content-services/upload/upload.module.ts","ng://@alfresco/adf-content-services/document-list/document-list.module.ts","ng://@alfresco/adf-content-services/search/search-query-builder.service.ts","ng://@alfresco/adf-content-services/search/components/search.component.ts","ng://@alfresco/adf-content-services/search/components/animations.ts","ng://@alfresco/adf-content-services/search/components/empty-search-result.component.ts","ng://@alfresco/adf-content-services/search/components/search-control.component.ts","ng://@alfresco/adf-content-services/search/components/search-trigger.directive.ts","ng://@alfresco/adf-content-services/search/components/search-filter/models/search-filter-list.model.ts","ng://@alfresco/adf-content-services/search/components/search-filter/search-filter.component.ts","ng://@alfresco/adf-content-services/search/components/search-text/search-text.component.ts","ng://@alfresco/adf-content-services/search/components/search-radio/search-radio.component.ts","ng://@alfresco/adf-content-services/search/components/search-slider/search-slider.component.ts","ng://@alfresco/adf-content-services/search/forms/live-error-state-matcher.ts","ng://@alfresco/adf-content-services/search/components/search-number-range/search-number-range.component.ts","ng://@alfresco/adf-content-services/search/components/search-check-list/search-check-list.component.ts","ng://@alfresco/adf-content-services/search/components/search-date-range/search-date-range.component.ts","ng://@alfresco/adf-content-services/search/components/search-filter/search-filter.service.ts","ng://@alfresco/adf-content-services/search/components/search-chip-list/search-chip-list.component.ts","ng://@alfresco/adf-content-services/search/components/search-sorting-picker/search-sorting-picker.component.ts","ng://@alfresco/adf-content-services/search/components/search-widget-container/search-widget-container.component.ts","ng://@alfresco/adf-content-services/search/search.module.ts","ng://@alfresco/adf-content-services/site-dropdown/sites-dropdown.component.ts","ng://@alfresco/adf-content-services/site-dropdown/sites-dropdown.module.ts","ng://@alfresco/adf-content-services/breadcrumb/breadcrumb.component.ts","ng://@alfresco/adf-content-services/breadcrumb/dropdown-breadcrumb.component.ts","ng://@alfresco/adf-content-services/breadcrumb/breadcrumb.module.ts","ng://@alfresco/adf-content-services/dialogs/confirm.dialog.ts","ng://@alfresco/adf-content-services/version-manager/version-list.component.ts","ng://@alfresco/adf-content-services/version-manager/version-manager.component.ts","ng://@alfresco/adf-content-services/version-manager/version-upload.component.ts","ng://@alfresco/adf-content-services/version-manager/version-manager.module.ts","ng://@alfresco/adf-content-services/content-node-selector/name-location-cell/name-location-cell.component.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.service.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector-panel.component.ts","ng://@alfresco/adf-content-services/content-node-selector/content-node-selector.module.ts","ng://@alfresco/adf-content-services/dialogs/folder-name.validators.ts","ng://@alfresco/adf-content-services/dialogs/folder.dialog.ts","ng://@alfresco/adf-content-services/dialogs/library/library.dialog.ts","ng://@alfresco/adf-content-services/dialogs/dialog.module.ts","ng://@alfresco/adf-content-services/folder-directive/folder-create.directive.ts","ng://@alfresco/adf-content-services/folder-directive/folder-edit.directive.ts","ng://@alfresco/adf-content-services/folder-directive/folder-directive.module.ts","ng://@alfresco/adf-content-services/content-metadata/components/content-metadata-card/content-metadata-card.component.ts","ng://@alfresco/adf-content-services/content-metadata/services/basic-properties.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/property-groups-translator.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/property-group-reader.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/aspect-oriented-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/indifferent-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/layout-oriented-config.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/config/content-metadata-config.factory.ts","ng://@alfresco/adf-content-services/content-metadata/services/property-descriptors.service.ts","ng://@alfresco/adf-content-services/content-metadata/services/content-metadata.service.ts","ng://@alfresco/adf-content-services/content-metadata/components/content-metadata/content-metadata.component.ts","ng://@alfresco/adf-content-services/content-metadata/content-metadata.module.ts","ng://@alfresco/adf-content-services/permission-manager/models/permission.model.ts","ng://@alfresco/adf-content-services/permission-manager/services/node-permission.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/permission-list/permission-list.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/permission-list/no-permission.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/inherited-button.directive.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission-dialog.component.ts","ng://@alfresco/adf-content-services/permission-manager/services/node-permission-dialog.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/search-config-permission.service.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission-panel.component.ts","ng://@alfresco/adf-content-services/permission-manager/components/add-permission/add-permission.component.ts","ng://@alfresco/adf-content-services/permission-manager/permission-manager.module.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.dialog.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.directive.ts","ng://@alfresco/adf-content-services/content-node-share/content-node-share.module.ts","ng://@alfresco/adf-content-services/tree-view/models/tree-view.model.ts","ng://@alfresco/adf-content-services/tree-view/services/tree-view.service.ts","ng://@alfresco/adf-content-services/tree-view/data/tree-view-datasource.ts","ng://@alfresco/adf-content-services/tree-view/components/tree-view.component.ts","ng://@alfresco/adf-content-services/tree-view/tree-view.module.ts","ng://@alfresco/adf-content-services/content.module.ts"],"names":["modules","MatButtonModule","MatChipsModule","MatDialogModule","MatIconModule","MatCardModule","MatInputModule","MatListModule","MatProgressSpinnerModule","MatProgressBarModule","MatRippleModule","MatMenuModule","MatOptionModule","MatExpansionModule","MatSelectModule","MatCheckboxModule","MatDatepickerModule","MatSlideToggleModule","MatRadioModule","MatSliderModule","MatTreeModule","MaterialModule","NgModule","args","imports","exports","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","r","ar","error","__spread","concat","DocumentLoaderNode","currentNode","children","CustomResourcesService","getRecentFiles","personId","pagination","filters","_this","defaultFilter","Observable","observer","apiService","peopleApi","getPerson","person","username","entry","id","filterQueries","query","join","SearchRequest","language","include","sort","type","field","ascending","paging","maxItems","skipCount","searchApi","search","searchResult","complete","err","pipe","catchError","handleError","loadFavorites","includeFields","includeFieldsRequest","getIncludesFields","options","where","favoritesApi","getFavorites","page","list","entries","map","_a","target","file","folder","properties","cm:title","title","cm:description","description","loadMemberSites","listSiteMembershipsForPerson","SiteMemberPaging","site","allowableOperations","CREATE_PERMISSION","name","loadSites","sitesApi","getSites","loadTrashcan","from","nodesApi","getDeletedNodes","loadSharedLinks","sharedLinksApi","findSharedLinks","isCustomSource","folderId","isCustomSources","indexOf","isSupportedSource","isSupportedSources","loadFolderByNodeId","nodeId","getCorrespondingNodeIds","node","getIdFromEntry","getNode","of","guid","targetGuid","hasCorrespondingNodeIds","tslib_1.__spread","filter","element","index","array","logService","throwError","Injectable","providedIn","AlfrescoApiService","LogService","DocumentListService","deleteNode","getInstance","nodes","copyNode","targetParentId","moveNode","getFolder","opts","rootNodeId","ROOT_ID","rootFolderId","params","includeSource","relativePath","getNodeChildren","contentService","getFolderNode","isCustomSourceService","customResourcesService","retrieveDocumentNode","forkJoin","results","ContentService","ContentNodeSelectorComponent","close","data","select","onSelect","nodeList","chosenNode","onClick","Component","selector","template","encapsulation","ViewEncapsulation","None","Inject","MAT_DIALOG_DATA","buttonActionName","actionName","toUpperCase","NodeLockDialogComponent","ngOnInit","nodeName","form","formBuilder","group","isLocked","allowOwner","isTimeLock","time","moment","defineProperty","duration","diff","asSeconds","NodeBodyLock","timeToExpire","lockTimeInSeconds","lifetime","toggleLock","alfrescoApi","lockNode","nodeBodyLock","unlockNode","submit","dialog","catch","onError","FormBuilder","MatDialogRef","Optional","ContentNodeDialogService","openFileBrowseDialogByFolderId","folderNodeId","documentListService","switchMap","nodeEntry","openUploadFileDialog","openLockNodeDialog","contentEntry","observable","Subject","hasAllowableOperations","AllowableOperationsEnum","LOCK","open","emit","width","openFileBrowseDialogBySite","siteService","response","openFolderBrowseDialogBySite","openFolderBrowseDialogByFolderId","openUploadFolderDialog","openCopyMoveDialog","action","permission","excludeSiteContent","subscribe","bind","getTitleTranslation","currentFolderId","parentId","imageResolver","isSelectionValid","isCopyMoveSelectionValid","nonDocumentSiteContent","openContentNodeDialog","errors","Error","JSON","stringify","statusCode","translation","instant","hasAllowableOperationsOnNodeFolder","isNodeFile","currentPanelClass","chosenWidth","panelClass","row","col","thumbnailService","getMimeTypeIcon","isFile","isNodeFolder","isFolder","hasEntityCreatePermission","isSite","nodeType","closeAll","MatDialog","SitesService","TranslationService","ThumbnailService","Output","EventEmitter","NodeLockDirective","event","preventDefault","contentNodeDialogService","ngAfterViewInit","renderer","setProperty","nativeElement","Directive","ElementRef","Renderer2","Input","HostListener","CommonModule","declarations","ContentDirectiveModule","RatingService","getRating","ratingType","core","ratingsApi","postRating","vote","ratingBody","RatingBody","myRating","rate","deleteRating","removeRating","console","RatingComponent","ngOnChanges","ratingService","takeUntil","onDestroy$","ratingEntry","refreshRating","ngOnDestroy","calculateStars","stars","roundedAverage","Math","round","average","fill","updateVote","ratingValue","unRateItem","rateItem","Number","parseFloat","aggregate","ratingsCounter","numberOfRatings","changeVote","LikeComponent","clean","likesCounter","ratedAt","isLike","likeClick","SocialModule","TagService","getTagsByNodeId","tagsApi","getNodeTags","getAllTheTags","getTags","addTag","tagName","tagBody","TagBody","tag","observableAdd","tagEntry","refresh","removeTag","observableRemove","TagActionsComponent","tagService","refreshTag","tagPaging","tagsEntries","disableAddTag","searchTag","newTagName","errorMsg","translateService","successAdd","searchTagName","find","currentTag","cleanErrorMsg","TagListComponent","defaultPagination","tags","isLoading","loadMoreTags","hasMoreItems","isSizeMinimum","count","size","loadLessTags","slice","TagNodeListComponent","showDelete","FormsModule","ReactiveFormsModule","CoreModule","forChild","TagModule","WebscriptComponent","changes","showData","webScript","executeWebScript","scriptPath","scriptArgs","contextRoot","servicePath","webScriptData","contentType","showDataAsDataTable","success","log","schema","ObjectDataTableAdapter","generateSchema","undefined","isDataTableContent","showError","WebScriptModule","ShareDataRow","obj","cache","getPermissionClass","nodeEntity","permissionsClasses","permissionsStyle","forEach","currentPermissionsStyle","applyPermissionStyleToFolder","applyPermissionStyleToFile","css","isFolderAndHasPermissionToUpload","cacheValue","key","getValue","ObjectUtils","imageErrorResolver","content","mimeType","hasValue","ERR_OBJECT_NOT_FOUND","isSelected","cssClass","isDropTarget","ShareDataTableAdapter","_sortingMode","newValue","toLowerCase","getRows","rows","setRows","getColumns","columns","setColumns","ERR_ROW_NOT_FOUND","ERR_COL_NOT_FOUND","resolved","dataRow","getFolderIcon","thumbnails","getDocumentThumbnailUrl","getDefaultMimeTypeIcon","getSorting","sorting","setSorting","sortRows","direction","DataSorting","setFilter","setImageResolver","resolver","isSmartFolder","isRuleFolder","isALinkFolder","nodeAspects","getNodeAspectNames","aspectNames","sortingMode","includes","numeric","a","left","Date","valueOf","toString","right","localeCompare","loadPage","nodePaging","merge","shareDataRows","nodeEntries","item","sortable","c","listPrunedDuplicate","elementToFilter","currentRow","presetsDefaultModel","-trashcan-","srTitle","format","-sites-","-mysites-","-favorites-","-recent-","-sharedlinks-","default","ContentActionModel","disableWithNoPermission","disabled","visible","icon","handler","execute","Document","Folder","All","tslib_1.__extends","DocumentActionModel","json","_super","FolderActionModel","BaseEvent","NodeEntityEvent","NodeEntryEvent","DocumentListComponent","_rowFilter","rowFilter","_currentFolderId","reload","resetNewFolderPagination","loadFolder","getContextActions","actions","getNodeActions","currentAction","model","subject","contextActionHandler","columnList","getDefaultSorting","defaultSorting","getLayoutPreset","layoutPresets","ObjectDataColumn","isMobile","test","navigator","userAgent","isEmpty","rowMenuCache","loadLayoutPresets","val","contextActionCallback","enforceSingleClickNavigationForMobile","ngAfterContentInit","setTableSchema","hasCustomLayout","setupDefaultColumns","resetSelection","firstChange","currentValue","_pagination","onDataReady","ngZone","run","executeContentAction","target_1","refreshAction","actionsByTarget","isActionDisabled","isActionVisible","lockService","onShowContextMenu","contextMenuActions","navigateTo","folderChange","canNavigateFolder","getNodeFolderDestinationId","isLinkFolder","updateCustomSourceData","handlerSub","setLoadingState","clearTimeout","loadingTimeout","setTimeout","loading","documentNode","folderNode","$folderNode","onPageLoaded","dataTable","selection","noPermission","preset","onPreviewFile","preview","onNodeClick","domEvent","CustomEvent","detail","sender","bubbles","elementRef","dispatchEvent","nodeClick","defaultPrevented","navigate","navigationMode","SINGLE_CLICK_NAVIGATION","executeActionClick","onNodeDblClick","nodeDblClick","DOUBLE_CLICK_NAVIGATION","alfrescoApiService","onNodeSelect","onNodeUnselect","onShowRowContextMenu","onShowRowActionsMenu","contentActions","onExecuteRowAction","externalSettings","appConfig","get","ready","updatePagination","requestPaginationModel","message","parse","host","class","NgZone","AppConfigService","UserPreferencesService","LockService","ContentChild","DataColumnListComponent","CustomLoadingContentTemplateDirective","CustomNoPermissionTemplateDirective","CustomEmptyContentTemplateDirective","ViewChild","userPreferencesService","DEFAULT_PAGINATION","Pagination","totalItems","display","DisplayMode","List","locationFormat","showHeader","selectionMode","multiselect","contentActionsPosition","emptyFolderImageUrl","allowDropFiles","stickyHeader","BehaviorSubject","UserPreferenceValues","PaginationSize","pagSize","ContentColumnListComponent","registerColumn","column","documentList","ContentColumnComponent","register","TemplateRef","PermissionModel","NodeActionsService","downloadNode","NodeDownloadDirective","copyContent","doFileOperation","copyFolder","moveContent","moveFolder","contentDialogService","selections","dialogRef","DocumentActionsService","getHandler","lKey","handlers","setHandler","canExecuteAction","setupActionHandlers","nodeActionsService","actionObservable","prepareHandlers","fileOperationMessage","handlerObservable","permissionEvent","FolderActionsService","ContentActionListComponent","registerAction","unregisterAction","idx","splice","ContentActionComponent","ContentActionTarget","folderActionModel","generateAction","documentActionModel","subscriptions","subscription","unsubscribe","unregister","getSystemHandler","documentActions","folderActions","providers","LibraryNameColumnComponent","updateValue","nodeUpdated","context","displayText$","makeLibraryTitle","displayTooltip$","makeLibraryTooltip","library","isDuplicate","some","changeDetection","ChangeDetectionStrategy","OnPush","LibraryRoleColumnComponent","api","role","Site","RoleEnum","SiteManager","SiteCollaborator","SiteContributor","SiteConsumer","LibraryStatusColumnComponent","visibility","VisibilityEnum","PUBLIC","PRIVATE","MODERATED","NameColumnComponent","TrashcanNameColumnComponent","isLibrary","displayText","displayTooltip","NodePaging","PermissionStyleModel","FileUploadingDialogComponent","position","listSubscription","uploadService","queueChanged","fileList","filesUploadingList","isDialogActive","counterSubscription","fileUploadComplete","fileUploadDeleted","totalCompleted","totalComplete","changeDetector","detectChanges","errorSubscription","fileUploadError","totalErrors","totalError","fileUploadSubscription","fileUpload","fileDeleted","objId","status","FileUploadStatus","Cancelled","textOrientation","toggleConfirmation","isConfirmation","isDialogMinimized","cancelAllUploads","uploadList","cancelAllFiles","toggleMinimized","clearQueue","UploadService","ChangeDetectorRef","HostBinding","FileUploadingListRowComponent","onCancel","cancel","onRemove","remove","showCancelledStatus","Aborted","Deleted","isUploadVersion","newVersion","FileUploadingListComponent","cancelFile","cancelUpload","removeFile","notifyError","cancelNodeVersionInstances","getUploadingFiles","deletedFiles","files","Complete","isUploadCompleted","isUploadCancelled","Boolean","Starting","Progress","Pending","every","permanent","_i","messageError","fileName","total","NodesApiService","UploadFilesEvent","isDefaultPrevented","pauseUpload","resumeUpload","addToQueue","uploadFilesInTheQueue","callback","UploadBase","uploadFiles","filteredFiles","createFileModel","webkitRelativePath","replace","uploadQueue","uploadFilesInfo","fileInfo","relativeFolder","isFileAcceptable","isFileSizeAcceptable","beginUpload","acceptedFilesType","split","ext","trim","extension","path","FileModel","comment","majorVersion","versioning","isFileSizeAllowed","isMaxFileSizeDefined","isFileSizeCorrect","maxFilesSize","acceptableSize","translationService","UploadButtonComponent","permissionValue","checkPermission","isButtonDisabled","onFilesAdded","$event","FileUtils","toFileArray","currentTarget","onDirectoryAdded","res","nodeHasPermission","CREATE","viewProviders","provide","EXTENDIBLE_COMPONENT","useExisting","forwardRef","uploadFolders","multipleFiles","tooltip","UploadVersionButtonComponent","fileModel","UPDATE","UploadDragAreaComponent","onFilesDropped","onFolderEntityDropped","isDirectory","flatten","filesInfo","showUndoNotificationBar","latestFilesAdded","messageTranslate","actionTranslate","notificationService","openSnackMessageAction","onAction","isDroppable","onUploadFiles","stopPropagation","isTargetNodeFolder","destinationFolderName_1","NotificationService","FileUploadErrorPipe","transform","errorCode","Pipe","pure","FileDraggableDirective","runOutsideAngular","addEventListener","onDragEnter","onDragOver","onDragLeave","onDropFiles","removeEventListener","enabled","items","dataTransfer","webkitGetAsEntry","getAsFile","folderEntityDropped","filesDropped","classList","cssClassName","add","el","UploadModule","FlexLayoutModule","entryComponents","DocumentListModule","SearchQueryBuilderService","_userQuery","resetToDefaults","config","categories","category","userFacetBuckets","defaults","addUserFacetBucket","bucket","buckets","facetBucket","getUserFacetBuckets","removeUserFacetBucket","addFilterQuery","filterQuery","removeFilterQuery","getFacetQuery","hasFacetQueries","facetQueries","queries","getFacetField","facetFields","fields","getSupportedLabel","update","buildQuery","updated","resultSetPaging","executed","error_1","getFinalQuery","facetIntervals","highlight","facetFormat","getPrimarySorting","getSortingOptions","getQueryGroup","intervals","def","RequestSortDefinitionInner","hasFacetIntervals","interval","sets","set","start","end","startInclusive","endInclusive","hasFacetHighlight","facet","customQuery","queryFragments","userQuery","keys","subQuery","facets","mincount","limit","offset","prefix","configLabel","ranges","SearchComponent","className","_classList","_elementRef","_isOpen","showPanel","setVisibility","searchTerm","loadSearchResults","resetResults","cleanResults","searchService","maxResults","skipResults","onSearchDataLoaded","onSearchDataError","resultLoaded","isOpen","hidePanel","preserveWhitespaces","exportAs","SearchService","displayWith","keyPressedStream","debounceTime","searchedWord","dataLoaded","searchAnimation","trigger","state","style","margin-left","margin-right","transition","animate","EmptySearchResultComponent","SearchControlComponent","applySearchFocus","animationDoneEvent","toState","searchInput","focus","dir","subscriptAnimationState","getAnimationState","setupFocusEventHandlers","isNoSearchTemplatePresent","emptySearchTemplate","focusSubject","toggleSearch","isLoggedIn","authService","isEcmLoggedIn","searchSubmit","toggleSearchBar","inputChange","searchChange","getAutoComplete","autocomplete","getMimeType","isSearchBarActive","liveSearchEnabled","elementClicked","optionClicked","onFocus","onBlur","activateToolbar","selectFirstResult","listResultElement","_getHostElement","onRowArrowDown","nextElement","getNextElementSibling","onRowArrowUp","previousElement","getPreviousElementSibling","FocusEvent","nextElementSibling","previousElementSibling","toggleAnimation","expandable","animations","AuthenticationService","ViewChildren","MatListItem","inputType","liveSearchMaxResults","noSearchResultTemplate","searchAutocomplete","document","activeElement","blur","SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","SearchTriggerDirective","multi","escapeEventStream","closingActionsSubscription","_panelOpen","searchPanel","openPanel","subscribeToClosingActions","closePanel","changeDetectorRef","outsideClickStream","fromEvent","clickTarget","writeValue","setTriggerValue","registerOnChange","fn","onChange","registerOnTouched","onTouched","handleKeydown","keyCode","ESCAPE","panelOpen","ENTER","handleInput","inputValue","isPanelOptionClicked","isPanelOption","isNoResultOption","panel","contains","firstStable","onStable","asObservable","optionChanges","panelClosingActions","setValueAndClose","toDisplay","textContent","[attr.autocomplete]","aria-autocomplete","[attr.aria-expanded]","(blur)","(input)","(keydown)","DOCUMENT","SearchFilterList","_filterText","applyFilter","_filter","filteredItems","currentPageSize","pageSize","showMoreItems","canShowMoreItems","showLessItems","canShowLessItems","clear","filterText","addItem","deleteItem","removeIndex","pointer","visibleItems","SearchFilterComponent","queryBuilder","onDataLoaded","updateSelectedBuckets","responseFacets","selectedBuckets","this_1","checked","_b","tslib_1.__values","_c","onToggleBucket","selectFacetBucket","unselectFacetBucket","canResetSelectedBuckets","resetSelectedBuckets","resetAllSelectedBuckets","resetAll","shouldExpand","facetExpanded","parseFacets","parseFacetFields","parseFacetIntervals","parseFacetQueries","parseFacetItems","configFacetFields","itemType","responseField","findFacet","responseBuckets","getResponseBuckets","getFilterByMinCount","alreadyExistingField","findResponseFacet","alreadyExistingBuckets","updateExistingBuckets","bucketList","getBucketFilterFunction","DEFAULT_PAGE_SIZE","configFacetIntervals","configGroups","reduce","acc","mincountFilter","getResponseQueryBuckets","facetQueriesPageSize","configField","respBucket","getCountValue","getCorrespondingFilterQuery","configGroup","metrics","getBucketCountDisplay","mincountInput","configFacetItem","bucketLabel","configSet","buildIntervalQuery","fieldName","fieldLabel","bucketsToDelete","responseBucket","selBuckets","oldBucket","pattern","filterWithContains","startsWith","facetQueriesLabel","expanded","displayResetButton","resetButton","SearchTextComponent","settings","match","RegExp","exec","reset","updateQuery","onChangedHandler","SearchRadioComponent","initialValue","getSelectedValue","setValue","selected","opt","changeHandler","SearchSliderComponent","min","max","thumbLabel","LiveErrorStateMatcher","isErrorState","control","isSubmitted","submitted","invalid","dirty","touched","pristine","SearchNumberRangeComponent","validators","Validators","compose","required","FormControl","to","FormGroup","formValidator","formGroup","parseInt","mismatch","isValid","Map","formatString","str","expr","matcher","SearchCheckListComponent","operator","option","flush","DEFAULT_FORMAT_DATE","MOMENT_DATE_FORMATS","SearchDateRangeComponent","getFromValidationMessage","hasError","hasParseError","getToValidationMessage","datePickerDateFormat","dateFormat","overrideDisplayFormat","Locale","locale","setLocale","maxDate","dateAdapter","today","startOf","endOf","formControl","srcElement","formatDate","setErrors","invalidOnChange","getError","text","forcePlaceholder","click","DateAdapter","useClass","MomentDateAdapter","deps","MAT_DATE_LOCALE","MAT_DATE_FORMATS","useValue","ɵ0","SearchFilterService","widgets","radio","slider","number-range","check-list","date-range","SearchChipListComponent","clearAll","SearchSortingPickerComponent","primary","onValueChanged","getSortingOrder","applySorting","onSortingChanged","findOptionByKey","SearchWidgetContainerComponent","componentType","searchFilterService","factory","componentFactoryResolver","resolveComponentFactory","componentRef","createComponent","setupWidget","ref","instance","destroy","ComponentFactoryResolver","read","ViewContainerRef","ALFRESCO_SEARCH_DIRECTIVES","SearchModule","Members","Containers","DropdownSitesComponent","siteSelect","openedChange","loadAllOnScroll","siteList","loadSiteList","isInfiniteScrollingEnabled","isScrollInNextFetchArea","scrollTop","scrollHeight","offsetHeight","ITEM_HEIGHT_TO_WAIT_BEFORE_LOAD_NEXT","selectedSite","change","extendedOptions","MAX_ITEMS","relations","sitesService","sitePaging","Relations","filteredResultsByMember","hideMyFiles","siteEntry","SiteEntry","unshift","showLoading","sites","loggedUserName","getEcmCurrentLoggedUserName","isCurrentUserMember","members","member","placeholder","ITEM_HEIGHT","MY_FILES_VALUE","SitesDropdownModule","BreadcrumbComponent","root","recalculateNodes","route","parseRoute","lastNodes","previousNodes","reverse","dropdown","hasPreviousNodes","elements","rootPos","getElementPosition","rootId","findIndex","onRoutePathClick","DropdownBreadcrumbComponent","BreadcrumbModule","ConfirmDialogComponent","sanitizedHtmlContent","sanitizer","sanitize","SecurityContext","HTML","htmlContent","DomSanitizer","yesLabel","thirdOptionLabel","noLabel","VersionListComponent","loadVersionHistory","canUpdate","versions","canDelete","restore","versionId","versionsApi","revertVersion","getNodeInfo","onVersionRestored","listVersionHistory","versionPaging","downloadVersion","allowDownload","versionDownloadUrl","getVersionContentUrl","downloadContent","deleteVersion","minWidth","afterClosed","onVersionDeleted","deleted","restored","attachment","contentApi","getContentUrl","url","link","createElement","href","appendChild","removeChild","showComments","showActions","VersionManagerComponent","versionListComponent","uploadSuccess","uploadState","onUploadSuccess","onUploadError","uploadError","onUploadCancel","toggleNewVersion","height","opacity","VersionUploadComponent","canUpload","isMajorVersion","semanticVersion","uploadVersion","VersionManagerModule","NameLocationCellComponent","fullPath","ContentNodeSelectorService","extraNodeIds","extraParentFiltering","extraId","defaultSearchNode","scope","locations","searchByQueryBody","defaultValidation","ContentNodeSelectorPanelComponent","createRowFilter","_excludeSiteContent","_chosenNode","valuesArray","valueChanges","debounceSearch","searchValue","folderIdToShow","breadcrumbTransform","isExcludedSiteContent","siteChanged","chosenSite","siteId","setTitleIfCustomSite","updateResults","showingSearchResults","clearSearch","startNewSearch","infinitePaginationComponent","querySearch","loadingSearchResults","nodeIds","contentNodeSelectorService","showSearchResults","onFolderChange","infiniteScroll","onFolderLoaded","attemptNodeSelection","showBreadcrumbs","getNextPageOfSearch","resetChosenNode","breadcrumbFolderTitle","HighlightDirective","InfinitePaginationComponent","dropdownHideMyFiles","dropdownSiteList","inDialog","ContentNodeSelectorModule","I18N_ERRORS_PATH","forbidSpecialCharacters","forbidEndingDot","forbidOnlySpaces","FolderDialogComponent","parentNodeId","createFolder","edit","updateNode","editing","valid","errorMessage","editTitle","createTitle","LibraryDialogComponent","maxLength","minLength","createSiteIdValidator","visibilityOption","visibilityOptions","controls","mergeMap","checkLibraryNameExists","canGenerateId","patchValue","markAsTouched","visibilityChangeHandler","siteBody","createSite","input","libraryTitle","findLibraryByTitle","libraryTitleExists","queriesApi","findSites","timer","getSite","MatMomentDatetimeModule","MatDatetimepickerModule","DialogModule","FolderCreateDirective","openDialog","DIALOG_WIDTH","dialogConfig","dialogInstance","componentInstance","folderCreate","FolderEditDirective","folderEdit","FolderDirectiveModule","ContentMetadataCardComponent","_displayDefaultProperties","onDisplayDefaultPropertiesChange","displayAspect","toggleEdit","editable","toggleExpanded","displayEmpty","readOnly","BasicPropertiesService","getProperties","sizeInBytes","mimeTypeName","author","CardViewTextItemModel","createdByUser","displayName","CardViewDateItemModel","createdAt","pipes","fileSizePipe","modifiedByUser","modifiedAt","multiline","FileSizePipe","D_MLTEXT","D_DATETIME","D_FLOAT","D_DOUBLE","D_BOOLEAN","PropertyGroupTranslatorService","translateToCardViewGroups","propertyGroups","propertyValues","propertyGroup","translatedPropertyGroup","translateArray","property","translate","propertyValue","checkECMTypeValidity","dataType","cardViewItemProperty","propertyDefinition","defaultValue","CardViewIntItemModel","CardViewFloatItemModel","decimalNumberPipe","CardViewDatetimeItemModel","CardViewBoolItemModel","multivalued","multiValued","multiValuePipe","valueSeparator","ecmPropertyType","RECOGNISED_ECM_TYPES","MultiValuePipe","DecimalNumberPipe","emptyGroup","getGroup","groupName","getProperty","propertyName","groupDefinition","convertObjectToArray","object","AspectOrientedConfigService","isGroupAllowed","isIncludeAllEnabled","reorganiseByConfig","aspects","groupAccumulator","aspectName","newGroup","getOrganisedPropertyGroup","organisedPropertyGroup","appendAllPreset","filterExcludedPreset","exclude","includeAll","aspectProperties","props","IndifferentConfigService","LayoutOrientedConfigService","getMatchingGroups","itemsGroup","layoutBlock","flattenItems","explodedItem","excludedConfig","includeAllProperty","accumulator","flattenedProperties","isArray","aspect","ContentMetadataConfigFactory","presetName","presetConfig","appConfigService","presets","DEFAULT_PRESET_NAME","INDIFFERENT_PRESET","createConfig","isLayoutOrientedPreset","isAspectOrientedPreset","freeze","isObject","x","PropertyDescriptorsService","load","groupNames","groupFetchStreams","defer","classesApi","getClass","convertToObject","propertyGroupsArray","ContentMetadataService","getBasicProperties","basicPropertiesService","getGroupedProperties","groupedProperties","contentMetadataConfig_1","contentMetadataConfigFactory","propertyDescriptorsService","groups","iif","filterEmptyPreset","setTitleToNameIfNotSet","propertyGroupTranslatorService","ContentMetadataComponent","cardViewUpdateService","itemUpdated$","saveNode","handleUpdateError","updatedNode","loadProperties","contentMetadataService","basicProperties$","groupedProperties$","nodeBody","changed","nodesApiService","showGroup","displayValue","canExpandTheCard","canExpandProperties","CardViewUpdateService","displayDefaultProperties","ContentMetadataModule","PermissionDisplayModel","isInherited","authorityId","accessStatus","NodePermissionService","getNodeRoles","retrieveSiteQueryBody","buildRetrieveSiteQueryBody","searchApiService","siteNodeList","siteName","getGroupMembersBySiteName","permissions","settable","updatePermissionRole","updatedPermissionRole","permissionBody","locallySet","nodeService","updateNodePermissions","permissionList","nodeRoles","updateLocallySetPermissions","nodeRole","transformNodeToPermissionElement","duplicatedPermissions","getDuplicatedPermissions","duplicatePermissionMessage","nodeLocallySet","permissionListAdded","duplicatePermissions","duplicate","localPermission","isEqualPermission","oldPermission","newPermission","removePermission","permissionToRemove","getGroupMemberByGroupName","groupMemberPaging","displayResult","formattedRoleName","groupsApi","getGroupMembers","nodePath","PermissionListComponent","fetchNodePermissions","actualNode","getPermissionList","nodePermissionService","settableList","settableRoles","allPermissions","permissionElement","inherited","permissionInherited","saveNewRole","permissionRow","buildUpdatedPermission","newRole","permissionRole","NoPermissionTemplateComponent","InheritPermissionDirective","onInheritPermissionClicked","UPDATEPERMISSIONS","isInheritanceEnabled","(click)","AddPermissionDialogComponent","currentSelection","onAddClicked","confirm","NodePermissionDialogService","openAddPermissionDialog","confirm_1","updateNodePermissionByDialog","SearchPermissionConfigurationService","generateQueryBody","AddPermissionPanelComponent","isAlreadySelected","selectedItems","SearchConfigurationService","EVERYONE","NodeEntry","cm:authorityName","AddPermissionComponent","isAddEnabled","applySelection","nodeApiService","PermissionManagerModule","ShareDialogComponent","disable","skip","distinctUntilChanged","updates","formUpdates","updateEntryExpiryDate","baseShareUrl","sharedId","isFileShared","updateForm","createSharedLinks","removeShare","deleteSharedLink","onSlideShareChange","openConfirmationDialog","onToggleExpirationDate","slideToggle","matDatetimepickerToggle","datetimepicker","onDatetimepickerClosed","dateTimePickerInput","slideToggleExpirationDate","closeOnNavigation","beforeClose","isDisabled","sharedLinksApiService","sharedLink","qshare:sharedId","renditionService","generateRenditionForNode","expiryDate","sharedUrl","local","date","qshare:expiryDate","utc","SharedLinksApiService","RenditionsService","minDate","NodeSharedDirective","shareNode","openShareLinkDialog","zone","isShared","ContentNodeShareModule","forRoot","ngModule","TreeBaseNode","level","TreeViewService","getTreeNodes","nodeApi","nodePage","TreeViewDataSource","treeNodes","treeControl","dataNodes","dataChange","connect","collectionViewer","changeSubscription","expansionModel","added","expandTreeNodes","removed","reduceTreeNodes","viewChange","disconnect","childrenSubscription","expandNode","toggleNode","treeViewService","FlatTreeControl","TreeViewComponent","previousValue","loadTreeNode","dataSource","onNodeClicked","nodeClicked","treeNode","getLevel","isExpandable","hasChild","nodeData","TranslateModule","TreeViewModule","ContentModuleLazy","source","ContentModule","TRANSLATION_PROVIDER","ɵ0$2"],"mappings":"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AA,YACAC,EAAAA,oBACA+nC,GACAjN,GACA3Z,GACAH,GACA57B,EACAg4C,GACAkB,GACAiH,GACA+U,GACAvI,GACAtJ,GACAruC,EACAo9C,GACAnV,GACA0a,IAEJv3D,QAAS,CACL0X,EACAiD,GACAqB,GACA2f,GACAH,GACA8Z,GACAsC,GACAkB,GACAiH,GACA+U,GACAvI,GACAhK,GACAU,GACAruC,EACAo9C,GACAnV,GACA0a,QAGwBC,IA7ChC,SAAAA,aA4EsB,CACN7uD,KAAM,uBACN8uD,OAAQ,+BA/BxBC,IAwDWA,GAAA3C,QAAP,WACI,MAAO,CACHC,SAAU0C,GACVrpC,UAAW,CACP,CACI8J,QAASw/B,EAAAA,qBACTjyB,OAAO,EACP0N,SAAU,CACNzqC,KAAM,uBACN8uD,OAAQ,mCAOrBC,GAAAh9C,SAAP,WACI,MAAO,CACHs6C,SAAUwC,0BA1ErB33D,EAAAA,SAAQC,KAAA,CAAC,CACNC,QAAS,CACL0a,EAAAA,WAAWC,WACXhD,EACAiD,GACAjG,EAAAA,aACAsH,GACAzB,EAAAA,YACAC,EAAAA,oBACA+nC,GACAjN,GACA3Z,GACAH,GACA57B,EACAg4C,GACAkB,GACAiH,GACA+U,GACAvI,GACAtJ,GACAruC,EACAo9C,GACAnV,GACA0a,IAEJlpC,UAAW,CACP,CACI8J,QAASw/B,EAAAA,qBACTjyB,OAAO,EACP0N,SAAQwkB,KAMhB53D,QAAS,CACL0X,EACAiD,GACAqB,GACA2f,GACAH,GACA8Z,GACAsC,GACAkB,GACAiH,GACA+U,GACAvI,GACAhK,GACAU,GACAruC,EACAo9C,GACAnV,GACA0a,QAyBRG,IA7EA,SAAAA","sourcesContent":["/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n    MatButtonModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatExpansionModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatDatepickerModule,\n    MatSlideToggleModule,\n    MatRadioModule,\n    MatSliderModule,\n    MatTreeModule\n} from '@angular/material';\n\nexport function modules() {\n    return [\n        MatButtonModule,\n        MatChipsModule,\n        MatDialogModule,\n        MatIconModule,\n        MatCardModule,\n        MatInputModule,\n        MatListModule,\n        MatProgressSpinnerModule,\n        MatProgressBarModule,\n        MatRippleModule,\n        MatMenuModule,\n        MatOptionModule,\n        MatExpansionModule,\n        MatSelectModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatSlideToggleModule,\n        MatRadioModule,\n        MatSliderModule,\n        MatTreeModule\n    ];\n}\n\n@NgModule({\n    imports: modules(),\n    exports: modules()\n})\nexport class MaterialModule {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NodeEntry, NodePaging } from '@alfresco/js-api';\n\nexport class DocumentLoaderNode {\n    currentNode: NodeEntry;\n    children: NodePaging;\n\n    constructor(currentNode: NodeEntry, children: NodePaging) {\n        this.currentNode = currentNode;\n        this.children = children;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AlfrescoApiService,\n    LogService,\n    PaginationModel\n} from '@alfresco/adf-core';\n\nimport {\n    NodePaging,\n    PersonEntry,\n    SitePaging,\n    DeletedNodesPaging,\n    SearchRequest,\n    SharedLinkPaging,\n    FavoritePaging,\n    SiteMemberPaging,\n    SiteRolePaging\n} from '@alfresco/js-api';\nimport { Injectable } from '@angular/core';\nimport { Observable, from, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CustomResourcesService {\n\n    private CREATE_PERMISSION = 'create';\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets files recently accessed by a user.\n     * @param personId ID of the user\n     * @param pagination Specifies how to paginate the results\n     * @param filters Specifies additional filters to apply (joined with **AND**)\n     * @returns List of nodes for the recently used files\n     */\n    getRecentFiles(personId: string, pagination: PaginationModel, filters?: string[]): Observable<NodePaging> {\n        const defaultFilter = [\n            'TYPE:\"content\"',\n            '-PNAME:\"0/wiki\"',\n            '-TYPE:\"app:filelink\"',\n            '-TYPE:\"cm:thumbnail\"',\n            '-TYPE:\"cm:failedThumbnail\"',\n            '-TYPE:\"cm:rating\"',\n            '-TYPE:\"dl:dataList\"',\n            '-TYPE:\"dl:todoList\"',\n            '-TYPE:\"dl:issue\"',\n            '-TYPE:\"dl:contact\"',\n            '-TYPE:\"dl:eventAgenda\"',\n            '-TYPE:\"dl:event\"',\n            '-TYPE:\"dl:task\"',\n            '-TYPE:\"dl:simpletask\"',\n            '-TYPE:\"dl:meetingAgenda\"',\n            '-TYPE:\"dl:location\"',\n            '-TYPE:\"fm:topic\"',\n            '-TYPE:\"fm:post\"',\n            '-TYPE:\"ia:calendarEvent\"',\n            '-TYPE:\"lnk:link\"'\n        ];\n\n        return new Observable((observer) => {\n            this.apiService.peopleApi.getPerson(personId)\n                .then((person: PersonEntry) => {\n                        const username = person.entry.id;\n                        const filterQueries = [\n                            { query: `cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]` },\n                            { query: `cm:modifier:${username} OR cm:creator:${username}` },\n                            { query: defaultFilter.join(' AND ') }\n                        ];\n\n                        if (filters && filters.length > 0) {\n                            filterQueries.push({\n                                query: filters.join()\n                            });\n                        }\n\n                        const query: SearchRequest = new SearchRequest({\n                            query: {\n                                query: '*',\n                                language: 'afts'\n                            },\n                            filterQueries,\n                            include: ['path', 'properties', 'allowableOperations'],\n                            sort: [{\n                                type: 'FIELD',\n                                field: 'cm:modified',\n                                ascending: false\n                            }],\n                            paging: {\n                                maxItems: pagination.maxItems,\n                                skipCount: pagination.skipCount\n                            }\n                        });\n                        return this.apiService.searchApi.search(query)\n                            .then((searchResult) => {\n                                    observer.next(searchResult);\n                                    observer.complete();\n                                },\n                                (err) => {\n                                    observer.error(err);\n                                    observer.complete();\n                                });\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets favorite files for the current user.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of favorite files\n     */\n    loadFavorites(pagination: PaginationModel, includeFields: string[] = []): Observable<NodePaging> {\n        const includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount,\n            where: '(EXISTS(target/file) OR EXISTS(target/folder))',\n            include: includeFieldsRequest\n        };\n\n        return new Observable((observer) => {\n            this.apiService.favoritesApi.getFavorites('-me-', options)\n                .then((result: FavoritePaging) => {\n                        const page: FavoritePaging = {\n                            list: {\n                                entries: result.list.entries\n                                    .map(({ entry: { target } }: any) => ({\n                                        entry: target.file || target.folder\n                                    }))\n                                    .map(({ entry }: any) => {\n                                        entry.properties = {\n                                            'cm:title': entry.title,\n                                            'cm:description': entry.description\n                                        };\n                                        return { entry };\n                                    }),\n                                pagination: result.list.pagination\n                            }\n                        };\n\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets sites that the current user is a member of.\n     * @param pagination Specifies how to paginate the results\n     * @returns List of sites\n     */\n    loadMemberSites(pagination: PaginationModel): Observable<SiteMemberPaging> {\n        const options = {\n            include: ['properties'],\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return new Observable((observer) => {\n            this.apiService.peopleApi.listSiteMembershipsForPerson('-me-', options)\n                .then((result: SiteRolePaging) => {\n                        const page: SiteMemberPaging = new SiteMemberPaging( {\n                            list: {\n                                entries: result.list.entries\n                                    .map(({ entry: { site } }: any) => {\n                                        site.allowableOperations = site.allowableOperations ? site.allowableOperations : [this.CREATE_PERMISSION];\n                                        site.name = site.name || site.title;\n                                        return {\n                                            entry: site\n                                        };\n                                    }),\n                                pagination: result.list.pagination\n                            }\n                        });\n\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets all sites in the repository.\n     * @param pagination Specifies how to paginate the results\n     * @returns List of sites\n     */\n    loadSites(pagination: PaginationModel): Observable<NodePaging> {\n        const options = {\n            include: ['properties', 'aspectNames'],\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return new Observable((observer) => {\n            this.apiService.sitesApi.getSites(options)\n                .then((page: SitePaging) => {\n                        page.list.entries.map(\n                            ({ entry }: any) => {\n                                entry.name = entry.name || entry.title;\n                                return { entry };\n                            }\n                        );\n                        observer.next(page);\n                        observer.complete();\n                    },\n                    (err) => {\n                        observer.error(err);\n                        observer.complete();\n                    });\n        }).pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Gets all items currently in the trash.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of deleted items\n     */\n    loadTrashcan(pagination: PaginationModel, includeFields: string[] = []): Observable<DeletedNodesPaging> {\n        const includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            include: includeFieldsRequest,\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return from(this.apiService.nodesApi.getDeletedNodes(options))\n            .pipe(catchError((err) => this.handleError(err)));\n\n    }\n\n    /**\n     * Gets shared links for the current user.\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of shared links\n     */\n    loadSharedLinks(pagination: PaginationModel, includeFields: string[] = []): Observable<SharedLinkPaging> {\n        const includeFieldsRequest = this.getIncludesFields(includeFields);\n\n        const options = {\n            include: includeFieldsRequest,\n            maxItems: pagination.maxItems,\n            skipCount: pagination.skipCount\n        };\n\n        return from(this.apiService.sharedLinksApi.findSharedLinks(options))\n            .pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Is the folder ID one of the well-known aliases?\n     * @param folderId Folder ID name to check\n     * @returns True if the ID is a well-known name, false otherwise\n     */\n    isCustomSource(folderId: string): boolean {\n        let isCustomSources = false;\n        const sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            isCustomSources = true;\n        }\n\n        return isCustomSources;\n    }\n\n    /**\n     * Is the folder ID a \"-my\", \"-root-\", or \"-shared-\" alias?\n     * @param folderId Folder ID name to check\n     * @returns True if the ID is one of the supported sources, false otherwise\n     */\n    isSupportedSource(folderId: string): boolean {\n        let isSupportedSources = false;\n        const sources = ['-my-', '-root-', '-shared-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            isSupportedSources = true;\n        }\n\n        return isSupportedSources;\n    }\n\n    /**\n     * Gets a folder's contents.\n     * @param nodeId ID of the target folder node\n     * @param pagination Specifies how to paginate the results\n     * @param includeFields List of data field names to include in the results\n     * @returns List of items contained in the folder\n     */\n    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields: string[] = []): any {\n        if (nodeId === '-trashcan-') {\n            return this.loadTrashcan(pagination, includeFields);\n        } else if (nodeId === '-sharedlinks-') {\n            return this.loadSharedLinks(pagination, includeFields);\n        } else if (nodeId === '-sites-') {\n            return this.loadSites(pagination);\n        } else if (nodeId === '-mysites-') {\n            return this.loadMemberSites(pagination);\n        } else if (nodeId === '-favorites-') {\n            return this.loadFavorites(pagination, includeFields);\n        } else if (nodeId === '-recent-') {\n            return this.getRecentFiles('-me-', pagination);\n        }\n    }\n\n    // TODO: remove it from here\n\n    /**\n     * Gets the contents of one of the well-known aliases in the form of node ID strings.\n     * @param nodeId ID of the target folder node\n     * @param pagination Specifies how to paginate the results\n     * @returns List of node IDs\n     */\n    getCorrespondingNodeIds(nodeId: string, pagination: PaginationModel = {}): Observable<string[]> {\n        if (this.isCustomSource(nodeId)) {\n\n            return this.loadFolderByNodeId(nodeId, pagination)\n                .pipe(map((result: any): string[] => {\n                    return result.list.entries.map((node: any): string => this.getIdFromEntry(node, nodeId));\n                }));\n\n        } else if (nodeId) {\n            // cases when nodeId is '-my-', '-root-' or '-shared-'\n            return from(this.apiService.nodesApi.getNode(nodeId)\n                .then((node) => [node.entry.id]));\n        }\n\n        return of([]);\n    }\n\n    /**\n     * Chooses the correct ID for a node entry.\n     * @param node Node object\n     * @param nodeId ID of the node object\n     * @returns ID value\n     */\n    getIdFromEntry(node: any, nodeId: string): string {\n        if (nodeId === '-sharedlinks-') {\n            return node.entry.nodeId;\n        } else if (nodeId === '-sites-' || nodeId === '-mysites-') {\n            return node.entry.guid;\n        } else if (nodeId === '-favorites-') {\n            return node.entry.targetGuid;\n        } else {\n            return node.entry.id;\n        }\n    }\n\n    /**\n     * Does the well-known alias have a corresponding node ID?\n     * @param nodeId Node to check\n     * @returns True if the alias has a corresponding node ID, false otherwise\n     */\n    hasCorrespondingNodeIds(nodeId: string): boolean {\n        return this.isCustomSource(nodeId) || this.isSupportedSource(nodeId);\n    }\n\n    private getIncludesFields(includeFields: string[]): string[] {\n        return ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n    }\n\n    private handleError(error: Response) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    AlfrescoApiService, ContentService, LogService, PaginationModel\n} from '@alfresco/adf-core';\n\nimport { Injectable } from '@angular/core';\nimport { NodeEntry, NodePaging } from '@alfresco/js-api';\nimport { DocumentLoaderNode } from '../models/document-folder.model';\nimport { Observable, from, throwError, forkJoin } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { DocumentListLoader } from '../interfaces/document-list-loader.interface';\nimport { CustomResourcesService } from './custom-resources.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentListService implements DocumentListLoader {\n\n    static ROOT_ID = '-root-';\n\n    constructor(private contentService: ContentService,\n                private apiService: AlfrescoApiService,\n                private logService: LogService,\n                private customResourcesService: CustomResourcesService) {\n    }\n\n    /**\n     * Deletes a node.\n     * @param nodeId ID of the node to delete\n     * @returns Empty response when the operation is complete\n     */\n    deleteNode(nodeId: string): Observable<any> {\n        return from(this.apiService.getInstance().nodes.deleteNode(nodeId));\n    }\n\n    /**\n     * Copy a node to destination node\n     *\n     * @param nodeId The id of the node to be copied\n     * @param targetParentId The id of the folder where the node will be copied\n     * @returns NodeEntry for the copied node\n     */\n    copyNode(nodeId: string, targetParentId: string) {\n        return from(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId })).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Moves a node to destination node.\n     *\n     * @param nodeId The id of the node to be moved\n     * @param targetParentId The id of the folder where the node will be moved\n     * @returns NodeEntry for the moved node\n     */\n    moveNode(nodeId: string, targetParentId: string) {\n        return from(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId })).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets the folder node with the specified relative name path below the root node.\n     * @param folder Path to folder.\n     * @param opts Options.\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getFolder(folder: string, opts?: any, includeFields: string[] = []): Observable<NodePaging> {\n        let rootNodeId = DocumentListService.ROOT_ID;\n        if (opts && opts.rootFolderId) {\n            rootNodeId = opts.rootFolderId;\n        }\n\n        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        const params: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        if (folder) {\n            params.relativePath = folder;\n        }\n\n        if (opts) {\n            if (opts.maxItems) {\n                params.maxItems = opts.maxItems;\n            }\n            if (opts.skipCount) {\n                params.skipCount = opts.skipCount;\n            }\n            if (opts.where) {\n                params.where = opts.where;\n            }\n        }\n\n        return from(this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params)).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets a node via its node ID.\n     * @param nodeId ID of the target node\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getNode(nodeId: string, includeFields: string[] = []): Observable<NodeEntry> {\n\n        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        const opts: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        return this.contentService.getNode(nodeId, opts);\n    }\n\n    /**\n     * Gets a folder node via its node ID.\n     * @param nodeId ID of the folder node\n     * @param includeFields Extra information to include (available options are \"aspectNames\", \"isLink\" and \"association\")\n     * @returns Details of the folder\n     */\n    getFolderNode(nodeId: string, includeFields: string[] = []): Observable<NodeEntry> {\n\n        const includeFieldsRequest = ['path', 'properties', 'allowableOperations', 'permissions', 'aspectNames', ...includeFields]\n            .filter((element, index, array) => index === array.indexOf(element));\n\n        const opts: any = {\n            includeSource: true,\n            include: includeFieldsRequest\n        };\n\n        return from(this.apiService.getInstance().nodes.getNode(nodeId, opts)).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    isCustomSourceService(nodeId): boolean {\n        return this.customResourcesService.isCustomSource(nodeId);\n    }\n\n    loadFolderByNodeId(nodeId: string, pagination: PaginationModel, includeFields: string[], where?: string): Observable<DocumentLoaderNode> {\n        if (this.customResourcesService.isCustomSource(nodeId)) {\n            return this.customResourcesService.loadFolderByNodeId(nodeId, pagination, includeFields).pipe(\n                map((result: any) => new DocumentLoaderNode(null, result))\n            );\n        } else {\n            return this.retrieveDocumentNode(nodeId, pagination, includeFields, where);\n        }\n    }\n\n    private retrieveDocumentNode(nodeId: string, pagination: PaginationModel, includeFields: string[], where?: string): Observable<DocumentLoaderNode> {\n        return forkJoin(\n            this.getFolderNode(nodeId, includeFields),\n            this.getFolder(null, {\n                maxItems: pagination.maxItems,\n                skipCount: pagination.skipCount,\n                rootFolderId: nodeId,\n                where: where\n            }, includeFields)).pipe(\n                map((results) => new DocumentLoaderNode(results[0], results[1]))\n            );\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { Node } from '@alfresco/js-api';\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\n\n@Component({\n    selector: 'adf-content-node-selector',\n    templateUrl: './content-node-selector.component.html',\n    styleUrls: ['./content-node-selector.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentNodeSelectorComponent {\n\n    buttonActionName: string;\n    chosenNode: Node[];\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: ContentNodeSelectorComponentData) {\n        this.buttonActionName = data.actionName ? `NODE_SELECTOR.${data.actionName.toUpperCase()}` : 'NODE_SELECTOR.CHOOSE';\n    }\n\n    close() {\n        this.data.select.complete();\n    }\n\n    onSelect(nodeList: Node[]) {\n        this.chosenNode = nodeList;\n    }\n\n    onClick(): void {\n        this.data.select.next(this.chosenNode);\n        this.data.select.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport moment from 'moment-es6';\n\nimport { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\nimport { NodeBodyLock, Node, NodeEntry } from '@alfresco/js-api';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-node-lock',\n    styleUrls: ['./folder.dialog.scss'],\n    templateUrl: './node-lock.dialog.html'\n})\nexport class NodeLockDialogComponent implements OnInit {\n\n    form: FormGroup;\n    node: Node = null;\n    nodeName: string;\n\n    constructor(\n        private formBuilder: FormBuilder,\n        public dialog: MatDialogRef<NodeLockDialogComponent>,\n        private alfrescoApi: AlfrescoApiService,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        public data: any\n    ) {\n    }\n\n    ngOnInit() {\n        const { node } = this.data;\n        this.nodeName = node.name;\n\n        this.form = this.formBuilder.group({\n            isLocked: node.isLocked || false,\n            allowOwner: node.properties['cm:lockType'] === 'WRITE_LOCK',\n            isTimeLock: !!node.properties['cm:expiryDate'],\n            time: !!node.properties['cm:expiryDate'] ? moment(node.properties['cm:expiryDate']) : moment()\n        });\n    }\n\n    private get lockTimeInSeconds(): number {\n        if (this.form.value.isTimeLock) {\n            const duration = moment.duration(moment(this.form.value.time).diff(moment()));\n            return duration.asSeconds();\n        }\n\n        return 0;\n    }\n\n    private get nodeBodyLock(): NodeBodyLock {\n        return new NodeBodyLock({\n            'timeToExpire': this.lockTimeInSeconds,\n            'type': this.form.value.allowOwner ? 'ALLOW_OWNER_CHANGES' : 'FULL',\n            'lifetime': 'PERSISTENT'\n        });\n    }\n\n    private toggleLock(): Promise<NodeEntry> {\n        const { alfrescoApi: { nodesApi }, data: { node } } = this;\n\n        if (this.form.value.isLocked) {\n            return nodesApi.lockNode(node.id, this.nodeBodyLock);\n        }\n\n        return nodesApi.unlockNode(node.id);\n    }\n\n    submit(): void {\n        this.toggleLock()\n            .then((node: NodeEntry) => {\n                this.data.node.isLocked = this.form.value.isLocked;\n                this.dialog.close(node.entry);\n            })\n            .catch((error: any) => this.data.onError(error));\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ContentService, ThumbnailService } from '@alfresco/adf-core';\nimport { Subject, Observable, throwError } from 'rxjs';\nimport { ShareDataRow } from '../document-list/data/share-data-row.model';\nimport { Node, NodeEntry, SitePaging } from '@alfresco/js-api';\nimport { DataColumn, SitesService, TranslationService, AllowableOperationsEnum } from '@alfresco/adf-core';\nimport { DocumentListService } from '../document-list/services/document-list.service';\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\nimport { NodeLockDialogComponent } from '../dialogs/node-lock.dialog';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentNodeDialogService {\n    static nonDocumentSiteContent = [\n        'blog',\n        'calendar',\n        'dataLists',\n        'discussions',\n        'links',\n        'wiki'\n    ];\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private dialog: MatDialog,\n                private contentService: ContentService,\n                private documentListService: DocumentListService,\n                private siteService: SitesService,\n                private translation: TranslationService,\n                private thumbnailService: ThumbnailService) {\n    }\n\n    /**\n     * Opens a file browser at a chosen folder location.\n     * @param folderNodeId ID of the folder to use\n     * @returns Information about the selected file(s)\n     */\n    openFileBrowseDialogByFolderId(folderNodeId: string): Observable<Node[]> {\n        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((nodeEntry: NodeEntry) => {\n            return this.openUploadFileDialog('Choose', nodeEntry.entry);\n        }));\n    }\n\n    /**\n     * Opens a lock node dialog.\n     * @param contentEntry Node to lock\n     * @returns Error/status message (if any)\n     */\n    public openLockNodeDialog(contentEntry: Node): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        if (this.contentService.hasAllowableOperations(contentEntry, AllowableOperationsEnum.LOCK)) {\n            this.dialog.open(NodeLockDialogComponent, {\n                data: {\n                    node: contentEntry,\n                    onError: (error) => {\n                        this.error.emit(error);\n                        observable.error(error);\n                    }\n                },\n                width: '400px'\n            });\n        } else {\n            observable.error('OPERATION.FAIL.NODE.NO_PERMISSION');\n        }\n\n        return observable;\n    }\n\n    /**\n     * Opens a file browser at a chosen site location.\n     * @returns Information about the selected file(s)\n     */\n    openFileBrowseDialogBySite(): Observable<Node[]> {\n        return this.siteService.getSites().pipe(switchMap((response: SitePaging) => {\n            return this.openFileBrowseDialogByFolderId(response.list.entries[0].entry.guid);\n        }));\n    }\n\n    /**\n     * Opens a folder browser at a chosen site location.\n     * @returns Information about the selected folder(s)\n     */\n    openFolderBrowseDialogBySite(): Observable<Node[]> {\n        return this.openFolderBrowseDialogByFolderId('-my-');\n    }\n\n    /**\n     * Opens a folder browser at a chosen folder location.\n     * @param folderNodeId ID of the folder to use\n     * @returns Information about the selected folder(s)\n     */\n    openFolderBrowseDialogByFolderId(folderNodeId: string): Observable<Node[]> {\n        return this.documentListService.getFolderNode(folderNodeId).pipe(switchMap((node: NodeEntry) => {\n            return this.openUploadFolderDialog('Choose', node.entry);\n        }));\n    }\n\n    /**\n     * Opens a dialog to copy or move an item to a new location.\n     * @param action Name of the action (eg, \"Copy\" or \"Move\") to show in the title\n     * @param contentEntry Item to be copied or moved\n     * @param permission Permission for the operation\n     * @param excludeSiteContent The site content that should be filtered out\n     * @returns Information about files that were copied/moved\n     */\n    openCopyMoveDialog(action: string, contentEntry: Node, permission?: string, excludeSiteContent?: string[]): Observable<Node[]> {\n        if (this.contentService.hasAllowableOperations(contentEntry, permission)) {\n\n            const select = new Subject<Node[]>();\n            select.subscribe({\n                complete: this.close.bind(this)\n            });\n\n            const title = this.getTitleTranslation(action, contentEntry.name);\n\n            const data: ContentNodeSelectorComponentData = {\n                title: title,\n                actionName: action,\n                currentFolderId: contentEntry.parentId,\n                imageResolver: this.imageResolver.bind(this),\n                where: '(isFolder=true)',\n                isSelectionValid: this.isCopyMoveSelectionValid.bind(this),\n                excludeSiteContent: excludeSiteContent || ContentNodeDialogService.nonDocumentSiteContent,\n                select: select\n            };\n\n            this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n\n            return select;\n        } else {\n            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));\n            return throwError(errors);\n        }\n    }\n\n    /**\n     * Gets the translation of the dialog title.\n     * @param action Name of the action to display in the dialog title\n     * @param name Name of the item on which the action is being performed\n     * @returns Translated version of the title\n     */\n    getTitleTranslation(action: string, name: string): string {\n        return this.translation.instant(`NODE_SELECTOR.${action.toUpperCase()}_ITEM`, { name });\n    }\n\n    /**\n     * Opens a dialog to choose folders to upload.\n     * @param action Name of the action to show in the title\n     * @param contentEntry  Item to upload\n     * @returns Information about the chosen folder(s)\n     */\n    openUploadFolderDialog(action: string, contentEntry: Node): Observable<Node[]> {\n        const select = new Subject<Node[]>();\n        select.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: ContentNodeSelectorComponentData = {\n            title: `${action} '${contentEntry.name}' to ...`,\n            actionName: action,\n            currentFolderId: contentEntry.id,\n            imageResolver: this.imageResolver.bind(this),\n            isSelectionValid: this.hasAllowableOperationsOnNodeFolder.bind(this),\n            where: '(isFolder=true)',\n            select: select\n        };\n\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n        return select;\n    }\n\n    /**\n     * Opens a dialog to choose a file to upload.\n     * @param action Name of the action to show in the title\n     * @param contentEntry Item to upload\n     * @returns Information about the chosen file(s)\n     */\n    openUploadFileDialog(action: string, contentEntry: Node): Observable<Node[]> {\n        const select = new Subject<Node[]>();\n        select.subscribe({\n            complete: this.close.bind(this)\n        });\n\n        const data: ContentNodeSelectorComponentData = {\n            title: `${action} '${contentEntry.name}' to ...`,\n            actionName: action,\n            currentFolderId: contentEntry.id,\n            imageResolver: this.imageResolver.bind(this),\n            isSelectionValid: this.isNodeFile.bind(this),\n            select: select\n        };\n\n        this.openContentNodeDialog(data, 'adf-content-node-selector-dialog', '630px');\n        return select;\n    }\n\n    private openContentNodeDialog(data: ContentNodeSelectorComponentData, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    private imageResolver(row: ShareDataRow, col: DataColumn): string | null {\n        const entry: Node = row.node.entry;\n        if (!this.contentService.hasAllowableOperations(entry, 'create')) {\n            return this.thumbnailService.getMimeTypeIcon('disable/folder');\n        }\n\n        return null;\n    }\n\n    private isNodeFile(entry: Node): boolean {\n        return entry.isFile;\n    }\n\n    private hasAllowableOperationsOnNodeFolder(entry: Node): boolean {\n        return this.isNodeFolder(entry) && this.contentService.hasAllowableOperations(entry, 'create');\n    }\n\n    private isNodeFolder(entry: Node): boolean {\n        return entry.isFolder;\n    }\n\n    private isCopyMoveSelectionValid(entry: Node): boolean {\n        return this.hasEntityCreatePermission(entry) && !this.isSite(entry);\n    }\n\n    private hasEntityCreatePermission(entry: Node): boolean {\n        return this.contentService.hasAllowableOperations(entry, 'create');\n    }\n\n    private isSite(entry) {\n        return !!entry.guid || entry.nodeType === 'st:site' || entry.nodeType === 'st:sites';\n    }\n\n    /** Closes the currently open dialog. */\n    close() {\n        this.dialog.closeAll();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, ElementRef, Renderer2, HostListener, Input, AfterViewInit } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { AllowableOperationsEnum, ContentService } from '@alfresco/adf-core';\nimport { ContentNodeDialogService } from '../content-node-selector/content-node-dialog.service';\n\n@Directive({\n    selector: '[adf-node-lock]'\n})\nexport class NodeLockDirective implements AfterViewInit {\n\n    /** Node to lock/unlock. */\n    @Input('adf-node-lock')\n    node: Node;\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        this.contentNodeDialogService.openLockNodeDialog(this.node);\n    }\n\n    constructor(\n        public element: ElementRef,\n        private renderer: Renderer2,\n        private contentService: ContentService,\n        private contentNodeDialogService: ContentNodeDialogService\n    ) {}\n\n    ngAfterViewInit() {\n        const hasAllowableOperations = this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.LOCK);\n        this.renderer.setProperty(this.element.nativeElement, 'disabled', !hasAllowableOperations);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { NodeLockDirective } from './node-lock.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        NodeLockDirective\n    ],\n    exports: [\n        NodeLockDirective\n    ]\n})\nexport class ContentDirectiveModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { RatingEntry, RatingBody } from '@alfresco/js-api';\nimport { from, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/internal/Observable';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RatingService {\n\n    constructor(private apiService: AlfrescoApiService) {\n    }\n\n    /**\n     * Gets the current user's rating for a node.\n     * @param nodeId Node to get the rating from\n     * @param ratingType Type of rating (can be \"likes\" or \"fiveStar\")\n     * @returns The rating value\n     */\n    getRating(nodeId: string, ratingType: any): Observable<RatingEntry | {}> {\n        return from(this.apiService.getInstance().core.ratingsApi.getRating(nodeId, ratingType))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    /**\n     * Adds the current user's rating for a node.\n     * @param nodeId Target node for the rating\n     * @param ratingType Type of rating (can be \"likes\" or \"fiveStar\")\n     * @param vote Rating value (boolean for \"likes\", numeric 0..5 for \"fiveStar\")\n     * @returns Details about the rating, including the new value\n     */\n    postRating(nodeId: string, ratingType: string, vote: any): Observable<RatingEntry | {}> {\n        const ratingBody: RatingBody = new RatingBody({\n            'id': ratingType,\n            'myRating': vote\n        });\n        return from(this.apiService.getInstance().core.ratingsApi.rate(nodeId, ratingBody))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    /**\n     * Removes the current user's rating for a node.\n     * @param nodeId Target node\n     * @param ratingType Type of rating to remove (can be \"likes\" or \"fiveStar\")\n     * @returns Null response indicating that the operation is complete\n     */\n    deleteRating(nodeId: string, ratingType: any): Observable<any> {\n        return from(this.apiService.getInstance().core.ratingsApi.removeRating(nodeId, ratingType))\n            .pipe(\n                catchError(this.handleError)\n            );\n    }\n\n    private handleError(error: any): any {\n        console.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\nimport { RatingEntry } from '@alfresco/js-api';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'adf-rating',\n    styleUrls: ['./rating.component.scss'],\n    templateUrl: './rating.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class RatingComponent implements OnChanges {\n\n    /** Identifier of the node to apply the rating to. */\n    @Input()\n    nodeId: string;\n\n    average: number = 0;\n\n    ratingsCounter = 0;\n\n    ratingType: string = 'fiveStar';\n\n    ratingValue: number;\n\n    /** Emitted when the \"vote\" gets changed. */\n    @Output()\n    changeVote = new EventEmitter();\n\n    stars: Array<any> = [];\n\n    onDestroy$ = new Subject<boolean>();\n\n    constructor(private ratingService: RatingService) {\n    }\n\n    ngOnChanges() {\n        this.ratingService.getRating(this.nodeId, this.ratingType)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(\n            (ratingEntry: RatingEntry) => {\n                this.refreshRating(ratingEntry);\n            }\n        );\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    calculateStars() {\n        this.stars = [];\n        const roundedAverage = Math.round(this.average);\n\n        for (let i = 0; i < 5; i++) {\n            if (i < roundedAverage) {\n                this.stars.push({fill: true});\n            } else {\n                this.stars.push({fill: false});\n            }\n        }\n    }\n\n    updateVote(vote: number) {\n        if (this.ratingValue === vote) {\n            this.unRateItem();\n        } else {\n            this.rateItem(vote);\n        }\n    }\n\n    rateItem(vote: number) {\n        this.ratingService.postRating(this.nodeId, this.ratingType, vote)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(\n            (ratingEntry: RatingEntry) => {\n                this.refreshRating(ratingEntry);\n            }\n        );\n    }\n\n    unRateItem() {\n        this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(\n            () => {\n                this.ratingService.getRating(this.nodeId, this.ratingType)\n                    .pipe(takeUntil(this.onDestroy$))\n                    .subscribe(\n                    (ratingEntry: RatingEntry) => {\n                        this.refreshRating(ratingEntry);\n                    }\n                );\n            });\n    }\n\n    refreshRating(ratingEntry: RatingEntry) {\n        this.ratingValue = Number.parseFloat(ratingEntry.entry.myRating);\n        this.average = ratingEntry.entry.aggregate.average;\n        this.ratingsCounter = ratingEntry.entry.aggregate.numberOfRatings;\n        this.calculateStars();\n        this.changeVote.emit(this.average);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\nimport { RatingEntry } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-like',\n    styleUrls: ['./like.component.scss'],\n    templateUrl: './like.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class LikeComponent implements OnChanges {\n    /** Identifier of a node to apply likes to. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the \"vote\" gets changed. */\n    @Output()\n    changeVote = new EventEmitter();\n\n    likesCounter: number = 0;\n    ratingType: string = 'likes';\n    isLike: boolean = false;\n\n    constructor(private ratingService: RatingService) {\n    }\n\n    ngOnChanges() {\n        this.clean();\n\n        this.ratingService.getRating(this.nodeId, this.ratingType).subscribe(\n            (ratingEntry: RatingEntry) => {\n                if (ratingEntry.entry.aggregate) {\n                    this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;\n                    if (ratingEntry.entry.ratedAt) {\n                        this.isLike = true;\n                    }\n                }\n            }\n        );\n    }\n\n    likeClick() {\n        if (this.isLike) {\n            this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(\n                () => {\n                    this.likesCounter -= 1;\n                    this.isLike = false;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        } else {\n            this.ratingService.postRating(this.nodeId, this.ratingType, true).subscribe(\n                (ratingEntry: RatingEntry) => {\n                    this.likesCounter = ratingEntry.entry.aggregate.numberOfRatings;\n                    this.isLike = true;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        }\n    }\n\n    clean() {\n        this.isLike = false;\n        this.likesCounter = 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { LikeComponent } from './like.component';\nimport { RatingComponent } from './rating.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    exports: [\n        RatingComponent,\n        LikeComponent\n    ],\n    declarations: [\n        RatingComponent,\n        LikeComponent\n    ]\n})\nexport class SocialModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Observable, from, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { TagBody,  TagPaging, TagEntry } from '@alfresco/js-api';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TagService {\n\n    /** Emitted when tag information is updated. */\n    @Output()\n    refresh = new EventEmitter();\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    /**\n     * Gets a list of tags added to a node.\n     * @param nodeId ID of the target node\n     * @returns TagPaging object (defined in JS-API) containing the tags\n     */\n    getTagsByNodeId(nodeId: string): Observable<TagPaging> {\n        return from(this.apiService.getInstance().core.tagsApi.getNodeTags(nodeId)).pipe(\n            catchError((err) => this.handleError(err))\n        );\n    }\n\n    /**\n     * Gets a list of all the tags already defined in the repository.\n     * @param opts Options supported by JS-API\n     * @returns TagPaging object (defined in JS-API) containing the tags\n     */\n    getAllTheTags(opts?: any): Observable<TagPaging> {\n        return from(this.apiService.getInstance().core.tagsApi.getTags(opts))\n            .pipe(catchError((err) => this.handleError(err)));\n    }\n\n    /**\n     * Adds a tag to a node.\n     * @param nodeId ID of the target node\n     * @param tagName Name of the tag to add\n     * @returns TagEntry object (defined in JS-API) with details of the new tag\n     */\n    addTag(nodeId: string, tagName: string): Observable<TagEntry> {\n        const tagBody = new TagBody();\n        tagBody.tag = tagName;\n\n        const observableAdd = from(this.apiService.getInstance().core.tagsApi.addTag(nodeId, tagBody));\n\n        observableAdd.subscribe((tagEntry: TagEntry) => {\n            this.refresh.emit(tagEntry);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return observableAdd;\n    }\n\n    /**\n     * Removes a tag from a node.\n     * @param nodeId ID of the target node\n     * @param tag Name of the tag to remove\n     * @returns Null object when the operation completes\n     */\n    removeTag(nodeId: string, tag: string): Observable<any> {\n        const observableRemove = from(this.apiService.getInstance().core.tagsApi.removeTag(nodeId, tag));\n\n        observableRemove.subscribe((data) => {\n            this.refresh.emit(data);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return observableRemove;\n    }\n\n    private handleError(error: any) {\n        this.logService.error(error);\n        return throwError(error || 'Server error');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TranslationService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation, OnDestroy, OnInit } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { Subject } from 'rxjs';\nimport { TagPaging } from '@alfresco/js-api';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n *\n * This component, provide a list of the tags relative a node with actions button to add or remove new tag\n */\n\n@Component({\n    selector: 'adf-tag-node-actions-list',\n    templateUrl: './tag-actions.component.html',\n    styleUrls: ['./tag-actions.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagActionsComponent implements OnChanges, OnInit, OnDestroy {\n\n    /** The identifier of a node. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when a tag is added successfully. */\n    @Output()\n    successAdd: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when an action is chosen. */\n    @Output()\n    result = new EventEmitter();\n\n    newTagName: string;\n    tagsEntries: any;\n    errorMsg: string;\n    disableAddTag: boolean = true;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(private tagService: TagService, private translateService: TranslationService) {\n    }\n\n    ngOnInit() {\n        this.tagService.refresh\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => this.refreshTag());\n    }\n\n    ngOnChanges() {\n        return this.refreshTag();\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    refreshTag() {\n        if (this.nodeId) {\n            this.tagService.getTagsByNodeId(this.nodeId).subscribe((tagPaging: TagPaging) => {\n                this.tagsEntries = tagPaging.list.entries;\n                this.disableAddTag = false;\n                this.result.emit(this.tagsEntries);\n            }, () => {\n                this.tagsEntries = null;\n                this.disableAddTag = true;\n                this.result.emit(this.tagsEntries);\n            });\n        }\n    }\n\n    addTag() {\n        if (this.searchTag(this.newTagName)) {\n            this.errorMsg = this.translateService.instant('TAG.MESSAGES.EXIST');\n            this.error.emit(this.errorMsg);\n        } else {\n            this.tagService.addTag(this.nodeId, this.newTagName).subscribe(() => {\n                this.newTagName = '';\n                this.successAdd.emit(this.nodeId);\n            });\n        }\n    }\n\n    searchTag(searchTagName: string) {\n        if (this.tagsEntries) {\n            return this.tagsEntries.find((currentTag) => {\n                return (searchTagName === currentTag.entry.tag);\n            });\n        }\n    }\n\n    cleanErrorMsg() {\n        this.errorMsg = '';\n    }\n\n    removeTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, OnInit, Output, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { PaginationModel } from '@alfresco/adf-core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * This component provide a list of all the tag inside the ECM\n */\n@Component({\n    selector: 'adf-tag-list',\n    templateUrl: './tag-list.component.html',\n    styleUrls: ['./tag-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagListComponent implements OnInit, OnDestroy {\n\n    /** Emitted when a tag is selected. */\n    @Output()\n    result = new EventEmitter();\n\n    /**\n     * Array of tags that are displayed\n     */\n    tagsEntries: any = [];\n\n    /**\n     * Number of items per iteration\n     */\n    size: number = 10;\n\n    defaultPagination: PaginationModel;\n    pagination: PaginationModel;\n\n    isLoading = false;\n    isSizeMinimum = true;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    /**\n     * Constructor\n     * @param tagService\n     */\n    constructor(private tagService: TagService) {\n\n        this.defaultPagination = {\n            skipCount: 0,\n            maxItems: this.size,\n            hasMoreItems: false\n        };\n\n        this.pagination = this.defaultPagination;\n\n        this.tagService.refresh\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => {\n                this.tagsEntries = [];\n                this.refreshTag(this.defaultPagination);\n            });\n    }\n\n    ngOnInit() {\n        this.refreshTag(this.defaultPagination);\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    refreshTag(opts?: any) {\n        this.tagService.getAllTheTags(opts).subscribe((tags: any) => {\n            this.tagsEntries = this.tagsEntries.concat(tags.list.entries);\n            this.pagination = tags.list.pagination;\n            this.result.emit(this.tagsEntries);\n            this.isLoading = false;\n        });\n    }\n\n    loadMoreTags() {\n        if (this.pagination.hasMoreItems) {\n            this.isLoading = true;\n            this.isSizeMinimum = false;\n\n            this.refreshTag({\n                skipCount: this.pagination.skipCount + this.pagination.count,\n                maxItems: this.size\n            });\n        }\n    }\n\n    loadLessTags() {\n        this.isSizeMinimum = false;\n        this.tagsEntries = this.tagsEntries.slice(0, this.tagsEntries.length - this.pagination.count);\n        this.pagination.skipCount = this.pagination.skipCount - this.pagination.count;\n        this.pagination.hasMoreItems = true;\n\n        if (this.tagsEntries.length <= this.size) {\n            this.isSizeMinimum = true;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation, OnDestroy, OnInit } from '@angular/core';\nimport { TagService } from './services/tag.service';\nimport { TagPaging } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n *\n * This component, ShowNodeTag a list of the tag on relative a node\n */\n\n@Component({\n    selector: 'adf-tag-node-list',\n    templateUrl: './tag-node-list.component.html',\n    styleUrls: ['./tag-node-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class TagNodeListComponent implements OnChanges, OnDestroy, OnInit {\n    /** The identifier of a node. */\n    @Input()\n    nodeId: string;\n\n    /** Show delete button */\n    @Input()\n    showDelete = true;\n\n    tagsEntries: any;\n\n    /** Emitted when a tag is selected. */\n    @Output()\n    results = new EventEmitter();\n\n    private onDestroy$ = new Subject<boolean>();\n\n    /**\n     * Constructor\n     * @param tagService\n     */\n    constructor(private tagService: TagService) {\n    }\n\n    ngOnChanges() {\n        this.refreshTag();\n    }\n\n    ngOnInit() {\n        this.tagService.refresh\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => this.refreshTag());\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    refreshTag() {\n        if (this.nodeId) {\n            this.tagService.getTagsByNodeId(this.nodeId).subscribe((tagPaging: TagPaging) => {\n                this.tagsEntries = tagPaging.list.entries;\n                this.results.emit(this.tagsEntries);\n            });\n        }\n    }\n\n    removeTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag).subscribe(() => {\n            this.refreshTag();\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../material.module';\nimport { TagActionsComponent } from './tag-actions.component';\nimport { TagListComponent } from './tag-list.component';\nimport { TagNodeListComponent } from './tag-node-list.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ],\n    declarations: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ]\n})\nexport class TagModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ObjectDataTableAdapter } from '@alfresco/adf-core';\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\n\n/**\n * <adf-webscript-get [scriptPath]=\"string\"\n *                         [scriptArgs]=\"Object\"\n *                         [contextRoot]=\"string\"\n *                         [servicePath]=\"string\"\n *                         [contentType]=\"JSON|HTML|DATATABLE\"\n *                         (success)=\"customMethod($event)>\n * </adf-webscript-get>\n *\n * This component, provide a get webscript viewer\n *\n * @InputParam {string} scriptPath path to Web Script (as defined by Web Script)\n * @InputParam {Object} scriptArgs arguments to pass to Web Script\n * @InputParam {string} contextRoot path where application is deployed default value 'alfresco'\n * @InputParam {string} servicePath path where Web Script service is mapped default value 'service'\n * @InputParam {string} contentType JSON | HTML | DATATABLE | TEXT\n *\n * @Output - success - The event is emitted when the data are received\n *\n */\n@Component({\n    selector: 'adf-webscript-get',\n    templateUrl: 'webscript.component.html'\n})\nexport class WebscriptComponent implements OnChanges {\n\n    /** (required) Path to the webscript (as defined by webscript). */\n    @Input()\n    scriptPath: string;\n\n    /** Arguments to pass to the webscript. */\n    @Input()\n    scriptArgs: any;\n\n    /** Toggles whether to show or hide the data. */\n    @Input()\n    showData: boolean = true;\n\n    /** Path where the application is deployed */\n    @Input()\n    contextRoot: string = 'alfresco';\n\n    /** Path that the webscript service is mapped to. */\n    @Input()\n    servicePath: string = 'service';\n\n    /** Content type to interpret the data received from the webscript.\n     * Can be \"JSON\" , \"HTML\" , \"DATATABLE\" or \"TEXT\"\n     */\n    @Input()\n    contentType: string = 'TEXT';\n\n    /** Emitted when the operation succeeds. You can get the plain data from\n     * the webscript through the **success** event parameter and use it as you\n     * need in your application.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    data: any = undefined;\n    showError: boolean = false;\n\n    constructor(private apiService: AlfrescoApiService,\n                private logService: LogService) {\n    }\n\n    ngOnChanges(changes) {\n        if (this.showData) {\n            this.clean();\n        }\n\n        return new Promise((resolve, reject) => {\n            this.apiService.getInstance().webScript.executeWebScript('GET', this.scriptPath, this.scriptArgs, this.contextRoot, this.servicePath).then((webScriptData) => {\n\n                this.data = webScriptData;\n\n                if (this.showData) {\n                    if (this.contentType === 'DATATABLE') {\n                        this.data = this.showDataAsDataTable(webScriptData);\n                    }\n                }\n\n                this.success.emit(this.data);\n\n                resolve();\n            }, (error) => {\n                this.logService.log('Error' + error);\n                reject();\n            });\n        });\n    }\n\n    /**\n     * show the data in a ng2-alfresco-datatable\n     *\n     * @param data\n     *\n     * @returns the data as datatable\n     */\n    showDataAsDataTable(data: any) {\n        const datatableData: any = null;\n        try {\n\n            if (!data.schema) {\n                data.schema = ObjectDataTableAdapter.generateSchema(data.data);\n            }\n\n            if (data.schema && data.schema.length > 0) {\n                this.data = new ObjectDataTableAdapter(data.data, data.schema);\n            }\n\n        } catch (error) {\n            this.logService.error('error during the cast as datatable');\n        }\n\n        return datatableData;\n    }\n\n    clean() {\n        this.data = undefined;\n    }\n\n    isDataTableContent() {\n        return this.contentType === 'DATATABLE';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CoreModule } from '@alfresco/adf-core';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { MaterialModule } from '../material.module';\nimport { WebscriptComponent } from './webscript.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        WebscriptComponent\n    ],\n    declarations: [\n        WebscriptComponent\n    ]\n})\nexport class WebScriptModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataRow, ObjectUtils, ThumbnailService, ContentService } from '@alfresco/adf-core';\nimport { MinimalNode, NodeEntry } from '@alfresco/js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\n\nexport class ShareDataRow implements DataRow {\n\n    static ERR_OBJECT_NOT_FOUND: string = 'Object source not found';\n\n    cache: { [key: string]: any } = {};\n    isSelected: boolean = false;\n    isDropTarget: boolean;\n    cssClass: string = '';\n\n    get node(): NodeEntry {\n        return this.obj;\n    }\n\n    set node(value: NodeEntry) {\n        this.obj = value;\n        this.cache = {};\n    }\n\n    constructor(private obj: NodeEntry,\n                private contentService: ContentService,\n                private permissionsStyle: PermissionStyleModel[],\n                private thumbnailService?: ThumbnailService) {\n        if (!obj) {\n            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);\n        }\n\n        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);\n\n        if (permissionsStyle) {\n            this.cssClass = this.getPermissionClass(obj);\n        }\n    }\n\n    getPermissionClass(nodeEntity: NodeEntry): string {\n        let permissionsClasses = '';\n\n        this.permissionsStyle.forEach((currentPermissionsStyle: PermissionStyleModel) => {\n\n            if (this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {\n\n                if (this.contentService.hasAllowableOperations(nodeEntity.entry, currentPermissionsStyle.permission)) {\n                    permissionsClasses += ` ${currentPermissionsStyle.css}`;\n                }\n            }\n\n        });\n\n        return permissionsClasses;\n    }\n\n    private applyPermissionStyleToFile(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFile && node.isFile);\n    }\n\n    private applyPermissionStyleToFolder(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFolder && node.isFolder);\n    }\n\n    isFolderAndHasPermissionToUpload(nodeEntry: NodeEntry): boolean {\n        return this.isFolder(nodeEntry) && this.contentService.hasAllowableOperations(nodeEntry.entry, 'create');\n    }\n\n    isFolder(nodeEntry: NodeEntry): boolean {\n        return nodeEntry.entry && nodeEntry.entry.isFolder;\n    }\n\n    cacheValue(key: string, value: any): any {\n        this.cache[key] = value;\n        return value;\n    }\n\n    getValue(key: string): any {\n        if (this.cache[key] !== undefined) {\n            return this.cache[key];\n        }\n        return ObjectUtils.getValue(this.obj.entry, key);\n    }\n\n    imageErrorResolver(event: Event): any {\n        if (this.obj.entry.content) {\n            return this.thumbnailService.getMimeTypeIcon(this.obj.entry.content.mimeType);\n        }\n    }\n\n    hasValue(key: string): boolean {\n        return this.getValue(key) !== undefined;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    DataColumn,\n    DataRow,\n    DataSorting,\n    DataTableAdapter,\n    ThumbnailService,\n    ContentService\n} from '@alfresco/adf-core';\nimport { NodePaging } from '@alfresco/js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { ShareDataRow } from './share-data-row.model';\nimport { NodeEntry } from '@alfresco/js-api/src/api/content-rest-api/model/nodeEntry';\nimport { RowFilter } from './row-filter.model';\n\nexport class ShareDataTableAdapter implements DataTableAdapter {\n\n    ERR_ROW_NOT_FOUND: string = 'Row not found';\n    ERR_COL_NOT_FOUND: string = 'Column not found';\n\n    private _sortingMode: string;\n    private sorting: DataSorting;\n    private rows: DataRow[];\n    private columns: DataColumn[];\n\n    private filter: RowFilter;\n    private imageResolver: any;\n\n    thumbnails: boolean = false;\n    permissionsStyle: PermissionStyleModel[];\n    selectedRow: DataRow;\n\n    set sortingMode(value: string) {\n        let newValue = (value || 'client').toLowerCase();\n        if (newValue !== 'client' && newValue !== 'server') {\n            newValue = 'client';\n        }\n        this._sortingMode = newValue;\n    }\n\n    get sortingMode(): string {\n        return this._sortingMode;\n    }\n\n    constructor(private thumbnailService: ThumbnailService,\n                private contentService: ContentService,\n                schema: DataColumn[] = [],\n                sorting?: DataSorting,\n                sortingMode: string = 'client') {\n        this.rows = [];\n        this.columns = schema || [];\n        this.sorting = sorting;\n        this.sortingMode = sortingMode;\n    }\n\n    getRows(): Array<DataRow> {\n        return this.rows;\n    }\n\n    // TODO: disable this api\n    setRows(rows: Array<DataRow>) {\n        this.rows = rows || [];\n        this.sort();\n    }\n\n    getColumns(): Array<DataColumn> {\n        return this.columns;\n    }\n\n    setColumns(columns: Array<DataColumn>) {\n        this.columns = columns || [];\n    }\n\n    getValue(row: DataRow, col: DataColumn): any {\n        if (!row) {\n            throw new Error(this.ERR_ROW_NOT_FOUND);\n        }\n        if (!col) {\n            throw new Error(this.ERR_COL_NOT_FOUND);\n        }\n        const dataRow: ShareDataRow = <ShareDataRow> row;\n        const value: any = row.getValue(col.key);\n        if (dataRow.cache[col.key] !== undefined) {\n            return dataRow.cache[col.key];\n        }\n\n        if (col.key === '$thumbnail') {\n\n            if (this.imageResolver) {\n                const resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n\n            const node = (<ShareDataRow> row).node;\n\n            if (node.entry.isFolder) {\n                return this.getFolderIcon(node);\n            }\n\n            if (node.entry.isFile) {\n                if (this.thumbnails) {\n                    return this.thumbnailService.getDocumentThumbnailUrl(node);\n                }\n            }\n\n            if (node.entry.content) {\n                const mimeType = node.entry.content.mimeType;\n                if (mimeType) {\n                    return this.thumbnailService.getMimeTypeIcon(mimeType);\n                }\n            }\n\n            return this.thumbnailService.getDefaultMimeTypeIcon();\n        }\n\n        if (col.type === 'image') {\n\n            if (this.imageResolver) {\n                const resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n        }\n\n        return dataRow.cacheValue(col.key, value);\n    }\n\n    getSorting(): DataSorting {\n        return this.sorting;\n    }\n\n    setSorting(sorting: DataSorting): void {\n        this.sorting = sorting;\n\n        this.sortRows(this.rows, this.sorting);\n    }\n\n    sort(key?: string, direction?: string): void {\n        const sorting = this.sorting || new DataSorting();\n        if (key) {\n            sorting.key = key;\n            sorting.direction = direction || 'asc';\n        }\n        this.setSorting(sorting);\n    }\n\n    setFilter(filter: RowFilter) {\n        this.filter = filter;\n    }\n\n    setImageResolver(resolver: any) {\n        this.imageResolver = resolver;\n    }\n\n    private getFolderIcon(node: any) {\n        if (this.isSmartFolder(node)) {\n            return this.thumbnailService.getMimeTypeIcon('smartFolder');\n        } else if (this.isRuleFolder(node)) {\n            return this.thumbnailService.getMimeTypeIcon('ruleFolder');\n        } else if (this.isALinkFolder(node)) {\n            return this.thumbnailService.getMimeTypeIcon('linkFolder');\n        } else {\n            return this.thumbnailService.getMimeTypeIcon('folder');\n        }\n    }\n\n    isSmartFolder(node: any) {\n        const nodeAspects = this.getNodeAspectNames(node);\n        return nodeAspects.indexOf('smf:customConfigSmartFolder') > -1 ||\n            (nodeAspects.indexOf('smf:systemConfigSmartFolder') > -1);\n    }\n\n    isRuleFolder(node: any) {\n        const nodeAspects = this.getNodeAspectNames(node);\n        return nodeAspects.indexOf('rule:rules') > -1 ||\n            (nodeAspects.indexOf('rule:rules') > -1);\n    }\n\n    isALinkFolder(node: any) {\n        const nodeType = node.entry ? node.entry.nodeType : node.nodeType;\n        return nodeType === 'app:folderlink';\n    }\n\n    private getNodeAspectNames(node: any): any[] {\n        return node.entry && node.entry.aspectNames ? node.entry.aspectNames : node.aspectNames ? node.aspectNames : [];\n    }\n\n    private sortRows(rows: DataRow[], sorting: DataSorting) {\n        if (this.sortingMode === 'server') {\n            return;\n        }\n\n        const options: Intl.CollatorOptions = {};\n\n        if (sorting && sorting.key && rows && rows.length > 0) {\n\n            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {\n                options.numeric = true;\n            }\n\n            rows.sort((a: ShareDataRow, b: ShareDataRow) => {\n                if (a.node.entry.isFolder !== b.node.entry.isFolder) {\n                    return a.node.entry.isFolder ? -1 : 1;\n                }\n\n                let left = a.getValue(sorting.key);\n                if (left) {\n                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();\n                } else {\n                    left = '';\n                }\n\n                let right = b.getValue(sorting.key);\n                if (right) {\n                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();\n                } else {\n                    right = '';\n                }\n\n                return sorting.direction === 'asc'\n                    ? left.localeCompare(right, undefined, options)\n                    : right.localeCompare(left, undefined, options);\n            });\n        }\n    }\n\n    public loadPage(nodePaging: NodePaging, merge: boolean = false) {\n        let shareDataRows: ShareDataRow[] = [];\n\n        if (nodePaging && nodePaging.list) {\n            const nodeEntries: NodeEntry[] = nodePaging.list.entries;\n            if (nodeEntries && nodeEntries.length > 0) {\n                shareDataRows = nodeEntries.map((item) => new ShareDataRow(item, this.contentService, this.permissionsStyle, this.thumbnailService));\n\n                if (this.filter) {\n                    shareDataRows = shareDataRows.filter(this.filter);\n                }\n\n                if (this.sortingMode !== 'server') {\n                    // Sort by first sortable or just first column\n                    if (this.columns && this.columns.length > 0) {\n                        const sorting = this.getSorting();\n                        if (sorting) {\n                            this.sortRows(shareDataRows, sorting);\n                        } else {\n                            const sortable = this.columns.filter((c) => c.sortable);\n                            if (sortable.length > 0) {\n                                this.sort(sortable[0].key, 'asc');\n                            } else {\n                                this.sort(this.columns[0].key, 'asc');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (merge) {\n            const listPrunedDuplicate = shareDataRows.filter((elementToFilter: any) => {\n                const isPresent = this.rows.find((currentRow: any) => {\n                    return currentRow.obj.entry.id === elementToFilter.obj.entry.id;\n                });\n\n                return !isPresent;\n            });\n\n            this.rows = this.rows.concat(listPrunedDuplicate);\n        } else {\n            this.rows = shareDataRows;\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let presetsDefaultModel = {\n    '-trashcan-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'archivedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'archivedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_BY',\n            sortable: true\n        }\n    ],\n    '-sites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-mysites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-favorites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ],\n    '-recent-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        }\n    ],\n    '-sharedlinks-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        },\n        {\n            key: 'sharedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SHARED_BY',\n            sortable: true\n        }\n    ],\n    'default': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class ContentActionModel {\n    icon: string;\n    title: string;\n    handler: ContentActionHandler;\n    execute: Function;\n    target: string;\n    permission: string;\n    disableWithNoPermission: boolean = false;\n    disabled: boolean | Function = false;\n    visible: boolean | Function = true;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.icon = obj.icon;\n            this.title = obj.title;\n            this.handler = obj.handler;\n            this.execute = obj.execute;\n            this.target = obj.target;\n            this.permission = obj.permission;\n            this.disableWithNoPermission = obj.disableWithNoPermission;\n\n            if (obj.hasOwnProperty('disabled')) {\n                this.disabled = obj.disabled;\n            }\n\n            if (obj.hasOwnProperty('visible')) {\n                this.visible = obj.visible;\n            }\n        }\n    }\n}\n\nexport enum ContentActionTarget {\n    Document = 'document',\n    Folder = 'folder',\n    All = 'all'\n}\n\nexport type ContentActionHandler = (obj: any, target?: any, permission?: string) => any;\n\nexport class DocumentActionModel extends ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'document';\n    }\n}\n\nexport class FolderActionModel extends  ContentActionModel {\n    constructor(json?: any)  {\n        super(json);\n        this.target = 'folder';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseEvent } from '@alfresco/adf-core';\nimport { NodeEntry, Node } from '@alfresco/js-api';\n\nexport class NodeEntityEvent extends BaseEvent<NodeEntry> {\n\n    value: NodeEntry;\n\n    defaultPrevented: boolean;\n\n    constructor(nodeEntry: NodeEntry) {\n        super();\n        this.value = nodeEntry;\n    }\n}\n\nexport class NodeEntryEvent extends BaseEvent<Node> {\n\n    value: Node;\n\n    defaultPrevented: boolean;\n\n    constructor(node: Node) {\n        super();\n        this.value = node;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:rxjs-no-subject-value */\n\nimport {\n    AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone,\n    OnChanges, OnDestroy, OnInit, Output, SimpleChanges, ViewChild, ViewEncapsulation\n} from '@angular/core';\n\nimport {\n    ContentService,\n    DataCellEvent,\n    DataColumn,\n    DataRowActionEvent,\n    DataSorting,\n    DataTableComponent,\n    DisplayMode,\n    ObjectDataColumn,\n    PaginatedComponent,\n    AppConfigService,\n    DataColumnListComponent,\n    UserPreferencesService,\n    PaginationModel,\n    ThumbnailService,\n    CustomLoadingContentTemplateDirective,\n    CustomNoPermissionTemplateDirective,\n    CustomEmptyContentTemplateDirective,\n    RequestPaginationModel,\n    AlfrescoApiService,\n    UserPreferenceValues,\n    LockService\n} from '@alfresco/adf-core';\n\nimport { Node, NodeEntry, NodePaging, Pagination } from '@alfresco/js-api';\nimport { Subject, BehaviorSubject, of } from 'rxjs';\nimport { ShareDataRow } from './../data/share-data-row.model';\nimport { ShareDataTableAdapter } from './../data/share-datatable-adapter';\nimport { presetsDefaultModel } from '../models/preset.model';\nimport { ContentActionModel } from './../models/content-action.model';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { NodeEntityEvent, NodeEntryEvent } from './node.event';\nimport { NavigableComponentInterface } from '../../breadcrumb/navigable-component.interface';\nimport { RowFilter } from '../data/row-filter.model';\nimport { DocumentListService } from '../services/document-list.service';\nimport { DocumentLoaderNode } from '../models/document-folder.model';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-document-list',\n    styleUrls: ['./document-list.component.scss'],\n    templateUrl: './document-list.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-document-list' }\n})\nexport class DocumentListComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, PaginatedComponent, NavigableComponentInterface {\n\n    static SINGLE_CLICK_NAVIGATION: string = 'click';\n    static DOUBLE_CLICK_NAVIGATION: string = 'dblclick';\n\n    DEFAULT_PAGINATION: Pagination = new Pagination({\n        hasMoreItems: false,\n        skipCount: 0,\n        maxItems: 25,\n        totalItems: 0\n    });\n\n    @ContentChild(DataColumnListComponent)\n    columnList: DataColumnListComponent;\n\n    @ContentChild(CustomLoadingContentTemplateDirective)\n    customLoadingContent: CustomLoadingContentTemplateDirective;\n\n    @ContentChild(CustomNoPermissionTemplateDirective)\n    customNoPermissionsTemplate: CustomNoPermissionTemplateDirective;\n\n    @ContentChild(CustomEmptyContentTemplateDirective)\n    customNoContentTemplate: CustomEmptyContentTemplateDirective;\n\n    /** Include additional information about the node in the server request. For example: association, isLink, isLocked and others. */\n    @Input()\n    includeFields: string[];\n\n    /**\n     * Filters the Node list using the *where* condition of the REST API\n     * (for example, isFolder=true). See the REST API documentation for more information.\n     */\n    @Input()\n    where: string;\n\n    /** Change the display mode of the table. Can be \"list\" or \"gallery\". */\n    @Input()\n    display: string = DisplayMode.List;\n\n    /** Define a set of CSS styles to apply depending on the permission\n     * of the user on that node. See the Permission Style model\n     * page for further details and examples.\n     */\n    @Input()\n    permissionsStyle: PermissionStyleModel[] = [];\n\n    /** The default route for all the location-based columns (if declared). */\n    @Input()\n    locationFormat: string = '/';\n\n    /** Toggles navigation to folder content or file preview */\n    @Input()\n    navigate: boolean = true;\n\n    /** Toggles the header */\n    @Input()\n    showHeader: boolean = true;\n\n    /** User interaction for folder navigation or file preview.\n     * Valid values are \"click\" and \"dblclick\". Default value: \"dblclick\"\n     */\n    @Input()\n    navigationMode: string = DocumentListComponent.DOUBLE_CLICK_NAVIGATION; // click|dblclick\n\n    /** Show document thumbnails rather than icons */\n    @Input()\n    thumbnails: boolean = false;\n\n    /** Row selection mode. Can be null, `single` or `multiple`. For `multiple` mode,\n     * you can use Cmd (macOS) or Ctrl (Win) modifier key to toggle selection for multiple rows.\n     */\n    @Input()\n    selectionMode: string = 'single'; // null|single|multiple\n\n    /** Toggles multiselect mode */\n    @Input()\n    multiselect: boolean = false;\n\n    /** Toggles content actions for each row */\n    @Input()\n    contentActions: boolean = false;\n\n    /** Position of the content actions dropdown menu. Can be set to \"left\" or \"right\". */\n    @Input()\n    contentActionsPosition: string = 'right'; // left|right\n\n    /** Toggles context menus for each row */\n    @Input()\n    contextMenuActions: boolean = false;\n\n    /** Custom image for empty folder. Default value: './assets/images/empty_doc_lib.svg' */\n    @Input()\n    emptyFolderImageUrl: string = './assets/images/empty_doc_lib.svg';\n\n    /**\n     * When true, this enables you to drop files directly into subfolders shown\n     * as items in the list. When false, the dropped file will be added to the\n     * current folder (ie, the one containing all the items shown in the list).\n     * See the Upload directive for further details about how the file drop is\n     * handled.\n     */\n    @Input()\n    allowDropFiles: boolean = false;\n\n    /** Defines default sorting. The format is an array of 2 strings `[key, direction]`\n     * i.e. `['name', 'desc']` or `['name', 'asc']`. Set this value only if you want to\n     * override the default sorting detected by the component based on columns.\n     */\n    @Input()\n    sorting = ['name', 'asc'];\n\n    /** Defines sorting mode. Can be either `client` (items in the list\n     * are sorted client-side) or `server` (the ordering supplied by the\n     * server is used without further client-side sorting).\n     * Note that the `server` option *does not* request the server to sort the data\n     * before delivering it.\n     */\n    @Input()\n    sortingMode = 'client';\n\n    /** The inline style to apply to every row. See\n     * the Angular NgStyle\n     * docs for more details and usage examples.\n     */\n    @Input()\n    rowStyle: string;\n\n    /** The CSS class to apply to every row */\n    @Input()\n    rowStyleClass: string;\n\n    /** Toggles the loading state and animated spinners for the component. Used in\n     * combination with `navigate=false` to perform custom navigation and loading\n     * state indication.\n     */\n    @Input()\n    loading: boolean = false;\n\n    /** @hidden */\n    @Input()\n    _rowFilter: RowFilter | null = null;\n\n    /**\n     * Custom function to choose whether to show or hide rows.\n     * See the [Row Filter Model](row-filter.model.md) page for\n     * more information.\n     */\n    @Input()\n    set rowFilter(rowFilter: RowFilter) {\n        this._rowFilter = rowFilter;\n        if (this.data) {\n            this.data.setFilter(this._rowFilter);\n            if (this._currentFolderId) {\n                this.reload();\n            }\n        }\n    }\n\n    get rowFilter(): RowFilter {\n        return this._rowFilter;\n    }\n\n    /**\n     * Custom function to choose image file paths to show. See the\n     * [Image Resolver Model](image-resolver.model.md) page for\n     * more information.\n     */\n    @Input()\n    imageResolver: any | null = null;\n\n    /** Toggles the sticky header mode. */\n    @Input()\n    stickyHeader: boolean = false;\n\n    _currentFolderId: string = null;\n\n    /** The ID of the folder node to display or a reserved string alias for special sources */\n    @Input()\n    set currentFolderId(currentFolderId: string) {\n        if (this._currentFolderId !== currentFolderId) {\n            this._currentFolderId = currentFolderId;\n            if (this.data) {\n                this.data.loadPage(null, false);\n                this.resetNewFolderPagination();\n            }\n\n            if (this._currentFolderId) {\n                this.loadFolder();\n            }\n        }\n    }\n\n    get currentFolderId(): string {\n        return this._currentFolderId;\n    }\n\n    /** The Document list will show all the nodes contained in the NodePaging entity */\n    @Input()\n    node: NodePaging = null;\n\n    /** Default value is stored in the user preference settings. Use this only if you are not using pagination. */\n    @Input()\n    maxItems: number = this.DEFAULT_PAGINATION.maxItems;\n\n    /** Emitted when the user clicks a list node */\n    @Output()\n    nodeClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the user double-clicks a list node */\n    @Output()\n    nodeDblClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the current display folder changes */\n    @Output()\n    folderChange: EventEmitter<NodeEntryEvent> = new EventEmitter<NodeEntryEvent>();\n\n    /** Emitted when the user acts upon files with either single or double click\n     * (depends on `navigation-mode`). Useful for integration with the\n     * Viewer component.\n     */\n    @Output()\n    preview: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    /** Emitted when the Document List has loaded all items and is ready for use */\n    @Output()\n    ready: EventEmitter<NodePaging> = new EventEmitter();\n\n    /** Emitted when the API fails to get the Document List data */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('dataTable')\n    dataTable: DataTableComponent;\n\n    actions: ContentActionModel[] = [];\n    contextActionHandler: Subject<any> = new Subject();\n    data: ShareDataTableAdapter;\n    noPermission: boolean = false;\n    selection = new Array<NodeEntry>();\n    $folderNode: Subject<Node> = new Subject<Node>();\n\n    // @deprecated 3.0.0\n    folderNode: Node;\n\n    private _pagination: PaginationModel = this.DEFAULT_PAGINATION;\n    pagination: BehaviorSubject<PaginationModel> = new BehaviorSubject<PaginationModel>(this.DEFAULT_PAGINATION);\n\n    private layoutPresets = {};\n    private rowMenuCache: { [key: string]: ContentActionModel[] } = {};\n    private loadingTimeout;\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(private documentListService: DocumentListService,\n                private ngZone: NgZone,\n                private elementRef: ElementRef,\n                private appConfig: AppConfigService,\n                private userPreferencesService: UserPreferencesService,\n                private contentService: ContentService,\n                private thumbnailService: ThumbnailService,\n                private alfrescoApiService: AlfrescoApiService,\n                private lockService: LockService) {\n        this.userPreferencesService\n            .select(UserPreferenceValues.PaginationSize)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(pagSize => {\n                this.maxItems = this._pagination.maxItems = pagSize;\n            });\n    }\n\n    getContextActions(node: NodeEntry) {\n        if (node && node.entry) {\n            const actions = this.getNodeActions(node);\n            if (actions && actions.length > 0) {\n                return actions.map((currentAction: ContentActionModel) => {\n                    return {\n                        model: currentAction,\n                        node: node,\n                        subject: this.contextActionHandler\n                    };\n                });\n            }\n        }\n        return null;\n    }\n\n    get hasCustomLayout(): boolean {\n        return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;\n    }\n\n    private getDefaultSorting(): DataSorting {\n        let defaultSorting: DataSorting;\n        if (this.sorting) {\n            const [key, direction] = this.sorting;\n            defaultSorting = new DataSorting(key, direction);\n        }\n        return defaultSorting;\n    }\n\n    private getLayoutPreset(name: string = 'default'): DataColumn[] {\n        return (this.layoutPresets[name] || this.layoutPresets['default']).map((col) => new ObjectDataColumn(col));\n    }\n\n    isMobile(): boolean {\n        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    }\n\n    isEmpty() {\n        return !this.data || this.data.getRows().length === 0;\n    }\n\n    ngOnInit() {\n        this.rowMenuCache = {};\n        this.loadLayoutPresets();\n        this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, null, this.getDefaultSorting(), this.sortingMode);\n        this.data.thumbnails = this.thumbnails;\n        this.data.permissionsStyle = this.permissionsStyle;\n\n        if (this._rowFilter) {\n            this.data.setFilter(this._rowFilter);\n        }\n\n        if (this.imageResolver) {\n            this.data.setImageResolver(this.imageResolver);\n        }\n\n        this.contextActionHandler\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(val => this.contextActionCallback(val));\n\n        this.enforceSingleClickNavigationForMobile();\n    }\n\n    ngAfterContentInit() {\n        if (this.columnList) {\n            this.columnList.columns.changes\n                .pipe(takeUntil(this.onDestroy$))\n                .subscribe(() => this.setTableSchema());\n        }\n        this.setTableSchema();\n    }\n\n    private setTableSchema() {\n        let schema: DataColumn[] = [];\n\n        if (this.hasCustomLayout) {\n            schema = this.columnList.columns.map((c) => <DataColumn> c);\n        }\n\n        if (!this.data) {\n            this.data = new ShareDataTableAdapter(this.thumbnailService, this.contentService, schema, this.getDefaultSorting(), this.sortingMode);\n        } else if (schema && schema.length > 0) {\n            this.data.setColumns(schema);\n        }\n\n        const columns = this.data.getColumns();\n        if (!columns || columns.length === 0) {\n            this.setupDefaultColumns(this._currentFolderId);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.resetSelection();\n        if (this.data) {\n            this.data.thumbnails = this.thumbnails;\n\n        }\n        if (changes.sortingMode && !changes.sortingMode.firstChange && this.data) {\n            this.data.sortingMode = changes.sortingMode.currentValue;\n        }\n\n        if (changes.sorting && !changes.sorting.firstChange && this.data) {\n            const newValue = changes.sorting.currentValue;\n            if (newValue && newValue.length > 0) {\n                const [key, direction] = newValue;\n                this.data.setSorting(new DataSorting(key, direction));\n            }\n        }\n\n        if (this.data) {\n            if (changes.node && changes.node.currentValue) {\n                const merge = this._pagination ? this._pagination.merge : false;\n\n                this.data.loadPage(changes.node.currentValue, merge);\n                this.onDataReady(changes.node.currentValue);\n            } else if (changes.imageResolver) {\n                this.data.setImageResolver(changes.imageResolver.currentValue);\n            }\n        }\n    }\n\n    reload() {\n        this.ngZone.run(() => {\n            this.resetSelection();\n            if (this.node) {\n                this.data.loadPage(this.node, this._pagination.merge);\n                this.onDataReady(this.node);\n            } else {\n                this.loadFolder();\n            }\n        });\n    }\n\n    contextActionCallback(action) {\n        if (action) {\n            this.executeContentAction(action.node, action.model);\n        }\n    }\n\n    getNodeActions(node: NodeEntry | any): ContentActionModel[] {\n        if (node && node.entry) {\n            let target = null;\n\n            if (node.entry.isFile) {\n                target = 'document';\n            } else if (node.entry.isFolder) {\n                target = 'folder';\n            }\n\n            if (target) {\n                const actions = this.rowMenuCache[node.entry.id];\n                if (actions) {\n                    actions.forEach((action) => {\n                        this.refreshAction(action, node);\n                    });\n                    return actions;\n                }\n\n                const actionsByTarget = this.actions\n                    .filter((entry) => {\n                        const isVisible = (typeof entry.visible === 'function')\n                            ? entry.visible(node)\n                            : entry.visible;\n\n                        return isVisible && entry.target.toLowerCase() === target;\n                    })\n                    .map((action) => new ContentActionModel(action));\n\n                actionsByTarget.forEach((action) => {\n                    this.refreshAction(action, node);\n                });\n\n                this.rowMenuCache[node.entry.id] = actionsByTarget;\n                return actionsByTarget;\n            }\n        }\n\n        return [];\n    }\n\n    private refreshAction(action: ContentActionModel, node: NodeEntry) {\n        action.disabled = this.isActionDisabled(action, node);\n        action.visible = this.isActionVisible(action, node);\n    }\n\n    private isActionVisible(action: ContentActionModel, node: NodeEntry): boolean {\n        if (typeof action.visible === 'function') {\n            return action.visible(node);\n        }\n\n        return action.visible;\n    }\n\n    private isActionDisabled(action: ContentActionModel, node: NodeEntry): boolean {\n        if (typeof action.disabled === 'function') {\n            return action.disabled(node);\n        }\n\n        if ((action.permission &&\n            action.disableWithNoPermission &&\n            !this.contentService.hasAllowableOperations(node.entry, action.permission)) ||\n            this.lockService.isLocked(node.entry)) {\n            return true;\n        } else {\n            return action.disabled;\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onShowContextMenu(e?: Event) {\n        if (e && this.contextMenuActions) {\n            e.preventDefault();\n        }\n    }\n\n    navigateTo(node: Node | string): boolean {\n        if (typeof node === 'string') {\n            this.resetNewFolderPagination();\n            this._currentFolderId = node;\n            this.folderChange.emit(new NodeEntryEvent(<Node> { id: node }));\n            this.reload();\n            return true;\n        } else {\n            if (this.canNavigateFolder(node)) {\n                this.resetNewFolderPagination();\n                this._currentFolderId = this.getNodeFolderDestinationId(node);\n                this.folderChange.emit(new NodeEntryEvent(<Node> { id: this._currentFolderId }));\n                this.reload();\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private getNodeFolderDestinationId(node: Node) {\n        return this.isLinkFolder(node) ? node.properties['cm:destination'] : node.id;\n    }\n\n    private isLinkFolder(node: Node) {\n        return node.nodeType === 'app:folderlink' && node.properties &&\n            node.properties['cm:destination'];\n    }\n\n    updateCustomSourceData(nodeId: string): void {\n        this._currentFolderId = nodeId;\n    }\n\n    /**\n     * Invoked when executing content action for a document or folder.\n     * @param node Node to be the context of the execution.\n     * @param action Action to be executed against the context.\n     */\n    executeContentAction(node: NodeEntry, action: ContentActionModel) {\n        if (node && node.entry && action) {\n            let handlerSub;\n\n            if (typeof action.handler === 'function') {\n                handlerSub = action.handler(node, this, action.permission);\n            } else {\n                handlerSub = of(true);\n            }\n\n            if (typeof action.execute === 'function' && handlerSub) {\n                handlerSub\n                    .pipe(takeUntil(this.onDestroy$))\n                    .subscribe(() => action.execute(node));\n            }\n        }\n    }\n\n    private setLoadingState(value: boolean) {\n        if (value) {\n            clearTimeout(this.loadingTimeout);\n            this.loadingTimeout = setTimeout(() => {\n                this.loading = true;\n            }, 1000);\n        } else {\n            clearTimeout(this.loadingTimeout);\n            this.loading = false;\n        }\n    }\n\n    loadFolder() {\n        if (!this._pagination.merge) {\n            this.setLoadingState(true);\n        }\n\n        if (!this.hasCustomLayout) {\n            this.setupDefaultColumns(this._currentFolderId);\n        }\n\n        if (this.documentListService.isCustomSourceService(this._currentFolderId)) {\n            this.updateCustomSourceData(this._currentFolderId);\n        }\n\n        this.documentListService.loadFolderByNodeId(this._currentFolderId, this._pagination, this.includeFields, this.where)\n            .subscribe((documentNode: DocumentLoaderNode) => {\n                if (documentNode.currentNode) {\n                    this.folderNode = documentNode.currentNode.entry;\n                    this.$folderNode.next(documentNode.currentNode.entry);\n                }\n                this.onPageLoaded(documentNode.children);\n            }, (err) => {\n                this.handleError(err);\n            });\n    }\n\n    resetSelection() {\n        this.dataTable.resetSelection();\n        this.selection = [];\n        this.noPermission = false;\n    }\n\n    onPageLoaded(nodePaging: NodePaging) {\n        if (nodePaging) {\n            this.data.loadPage(nodePaging, this._pagination.merge);\n            this.setLoadingState(false);\n            this.onDataReady(nodePaging);\n        }\n    }\n\n    /**\n     * Creates a set of predefined columns.\n     */\n    setupDefaultColumns(preset: string = 'default'): void {\n        if (this.data) {\n            const columns = this.getLayoutPreset(preset);\n            this.data.setColumns(columns);\n        }\n    }\n\n    onPreviewFile(node: NodeEntry) {\n        if (node) {\n            this.preview.emit(new NodeEntityEvent(node));\n        }\n    }\n\n    onNodeClick(nodeEntry: NodeEntry) {\n        const domEvent = new CustomEvent('node-click', {\n            detail: {\n                sender: this,\n                node: nodeEntry\n            },\n            bubbles: true\n        });\n\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(nodeEntry);\n        this.nodeClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {\n                this.executeActionClick(nodeEntry);\n            }\n        }\n\n    }\n\n    onNodeDblClick(nodeEntry: NodeEntry) {\n        const domEvent = new CustomEvent('node-dblclick', {\n            detail: {\n                sender: this,\n                node: nodeEntry\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const event = new NodeEntityEvent(nodeEntry);\n        this.nodeDblClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {\n                this.executeActionClick(nodeEntry);\n            }\n        }\n    }\n\n    executeActionClick(nodeEntry: NodeEntry) {\n        if (nodeEntry && nodeEntry.entry) {\n            if (nodeEntry.entry.isFile) {\n                this.onPreviewFile(nodeEntry);\n            }\n\n            if (nodeEntry.entry.isFolder) {\n                this.navigateTo(nodeEntry.entry);\n            }\n\n            if (nodeEntry.entry['guid']) {\n                const options = {\n                    include: this.includeFields\n                };\n\n                this.alfrescoApiService.nodesApi.getNode(nodeEntry.entry['guid'], options)\n                    .then((node: NodeEntry) => {\n                        this.navigateTo(node.entry);\n                    });\n            }\n        }\n    }\n\n    onNodeSelect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map((entry) => entry.node);\n        const domEvent = new CustomEvent('node-select', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onNodeUnselect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map((entry) => entry.node);\n        const domEvent = new CustomEvent('node-unselect', {\n            detail: {\n                node: event.row ? event.row.node : null,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n\n    onShowRowContextMenu(event: DataCellEvent) {\n        if (this.contextMenuActions) {\n            const args = event.value;\n            const node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getContextActions(node) || [];\n            }\n        }\n    }\n\n    onShowRowActionsMenu(event: DataCellEvent) {\n        if (this.contentActions) {\n            const args = event.value;\n            const node = (<ShareDataRow> args.row).node;\n            if (node) {\n                args.actions = this.getNodeActions(node) || [];\n            }\n        }\n    }\n\n    onExecuteRowAction(event: DataRowActionEvent) {\n        if (this.contentActions) {\n            const args = event.value;\n            const node = (<ShareDataRow> args.row).node;\n            const action = (<ContentActionModel> args.action);\n            this.executeContentAction(node, action);\n        }\n    }\n\n    private enforceSingleClickNavigationForMobile(): void {\n        if (this.isMobile()) {\n            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;\n        }\n    }\n\n    canNavigateFolder(node: Node): boolean {\n        let canNavigateFolder: boolean = false;\n\n        if (node && node.isFolder) {\n            canNavigateFolder = true;\n        }\n\n        return canNavigateFolder;\n    }\n\n    private loadLayoutPresets(): void {\n        const externalSettings = this.appConfig.get('document-list.presets', null);\n\n        if (externalSettings) {\n            this.layoutPresets = Object.assign({}, presetsDefaultModel, externalSettings);\n        } else {\n            this.layoutPresets = presetsDefaultModel;\n        }\n    }\n\n    private onDataReady(nodePaging: NodePaging) {\n        this.ready.emit(nodePaging);\n        this.pagination.next(nodePaging.list.pagination);\n    }\n\n    updatePagination(requestPaginationModel: RequestPaginationModel) {\n        this._pagination.maxItems = requestPaginationModel.maxItems;\n        this._pagination.merge = requestPaginationModel.merge;\n        this._pagination.skipCount = requestPaginationModel.skipCount;\n        this.reload();\n    }\n\n    private resetNewFolderPagination() {\n        this._pagination.skipCount = 0;\n        this._pagination.maxItems = this.maxItems;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    private handleError(err: any) {\n        if (err.message) {\n            try {\n                if (JSON.parse(err.message).error.statusCode === 403) {\n                    this.setLoadingState(false);\n                    this.noPermission = true;\n                }\n            } catch (error) {\n            }\n        }\n        this.error.emit(err);\n\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { Component } from '@angular/core';\n\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-columns',\n    template: ''\n})\nexport class ContentColumnListComponent {\n\n    constructor(private documentList: DocumentListComponent, private logService: LogService ) {\n        this.logService.log('ContentColumnListComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnListComponent instead.');\n    }\n\n    /**\n     * Registers column model within the parent document list component.\n     * @param column Column definition model to register.\n     */\n    registerColumn(column: DataColumn): boolean {\n        if (this.documentList && column) {\n            const columns = this.documentList.data.getColumns();\n            columns.push(column);\n            return true;\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector no-input-rename  */\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\n\nimport { ContentColumnListComponent } from './content-column-list.component';\n\n@Component({\n    selector: 'content-column',\n    template: ''\n})\nexport class ContentColumnComponent implements OnInit, AfterContentInit, DataColumn {\n\n    @Input()\n    key: string;\n\n    @Input()\n    type: string = 'text';\n\n    @Input()\n    format: string;\n\n    @Input()\n    sortable: boolean = false;\n\n    @Input()\n    title: string = '';\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    /**\n     * Title to be used for screen readers.\n     */\n    @Input('sr-title')\n    srTitle: string;\n\n    @Input('class')\n    cssClass: string;\n\n    constructor(private list: ContentColumnListComponent, private logService: LogService) {\n        this.logService.log('ContentColumnComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnComponent instead.');\n    }\n\n    ngOnInit() {\n        if (!this.srTitle && this.key === '$thumbnail') {\n            this.srTitle = 'Thumbnail';\n        }\n    }\n\n    ngAfterContentInit() {\n        this.register();\n    }\n\n    register(): boolean {\n        if (this.list) {\n            return this.list.registerColumn(this);\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class PermissionModel {\n    type: string;\n    action: string;\n    permission: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.type = obj.type || null;\n            this.action = obj.action || null;\n            this.permission = obj.permission || null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Output, EventEmitter } from '@angular/core';\nimport { Node, NodeEntry } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\nimport { AlfrescoApiService, ContentService, NodeDownloadDirective } from '@alfresco/adf-core';\nimport { MatDialog } from '@angular/material';\n\nimport { DocumentListService } from './document-list.service';\nimport { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NodeActionsService {\n\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private contentDialogService: ContentNodeDialogService,\n                public dialogRef: MatDialog,\n                public content: ContentService,\n                private documentListService?: DocumentListService,\n                private apiService?: AlfrescoApiService,\n                private dialog?: MatDialog) {}\n\n    downloadNode(node: NodeEntry) {\n        new NodeDownloadDirective(this.apiService, this.dialog)\n            .downloadNode(node);\n    }\n\n    /**\n     * Copy content node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyContent(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Copy folder node\n     *\n     * @param contentEntry node to copy\n     * @param permission permission which is needed to apply the action\n     */\n    public copyFolder(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * Move content node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveContent(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'content', contentEntry, permission);\n    }\n\n    /**\n     * Move folder node\n     *\n     * @param contentEntry node to move\n     * @param permission permission which is needed to apply the action\n     */\n    public moveFolder(contentEntry: Node, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'folder', contentEntry, permission);\n    }\n\n    /**\n     * General method for performing the given operation (copy|move)\n     *\n     * @param action the action to perform (copy|move)\n     * @param type type of the content (content|folder)\n     * @param contentEntry the contentEntry which has to have the action performed on\n     * @param permission permission which is needed to apply the action\n     */\n    private doFileOperation(action: string, type: string, contentEntry: Node, permission?: string): Subject<string> {\n        const observable: Subject<string> = new Subject<string>();\n\n        this.contentDialogService\n            .openCopyMoveDialog(action, contentEntry, permission)\n            .subscribe((selections: Node[]) => {\n                const selection = selections[0];\n                this.documentListService[`${action}Node`].call(this.documentListService, contentEntry.id, selection.id)\n                    .subscribe(\n                    observable.next.bind(observable, `OPERATION.SUCCESS.${type.toUpperCase()}.${action.toUpperCase()}`),\n                    observable.error.bind(observable)\n                    );\n            },\n            (error) => {\n                observable.error(error);\n                return observable;\n            });\n        return observable;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, TranslationService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\nimport { ContentNodeDialogService } from '../../content-node-selector/content-node-dialog.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DocumentActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private contentNodeDialogService: ContentNodeDialogService,\n                private translation: TranslationService,\n                private documentListService?: DocumentListService,\n                private contentService?: ContentService) {\n        this.setupActionHandlers();\n    }\n\n    /**\n     * Gets the handler for an action.\n     * @param key Identifier of the action\n     * @returns The handler for the action\n     */\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            const lKey = key.toLowerCase();\n            return this.handlers[lKey] || null;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a new handler for an action.\n     * @param key Identifier of the action\n     * @param handler Handler for the action\n     * @returns False if the key was an empty/null string, true otherwise\n     */\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            const lKey = key.toLowerCase();\n            this.handlers[lKey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if actions can be executed for an item.\n     * @param nodeEntry Item to receive an action\n     * @returns True if the action can be executed on this item, false otherwise\n     */\n    canExecuteAction(nodeEntry: NodeEntry): boolean {\n        return this.documentListService && nodeEntry && nodeEntry.entry.isFile === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n        this.handlers['download'] = this.downloadNode.bind(this);\n        this.handlers['lock'] = this.lockNode.bind(this);\n    }\n\n    private lockNode(node: NodeEntry, target?: any, permission?: string) {\n        return this.contentNodeDialogService.openLockNodeDialog(node.entry);\n    }\n\n    private downloadNode(obj: NodeEntry, target?: any, permission?: string) {\n        this.nodeActionsService.downloadNode(obj);\n    }\n\n    private copyNode(node: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(node: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(node: NodeEntry, target?: any, permission?: string): Observable<any> {\n        let handlerObservable;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasAllowableOperations(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    const message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });\n                    this.success.next(message);\n                }, () => {\n                    const message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });\n                    this.error.next(message);\n                });\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({\n                    type: 'content',\n                    action: 'delete',\n                    permission: permission\n                }));\n                return throwError(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentService, TranslationService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { Observable, Subject, throwError } from 'rxjs';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class FolderActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\n\n    private handlers: { [id: string]: ContentActionHandler; } = {};\n\n    constructor(private nodeActionsService: NodeActionsService,\n                private documentListService: DocumentListService,\n                private contentService: ContentService,\n                private translation: TranslationService) {\n        this.setupActionHandlers();\n    }\n\n    /**\n     * Gets the handler function for an action.\n     * @param key Identifier for the action\n     * @returns The handler function\n     */\n    getHandler(key: string): ContentActionHandler {\n        if (key) {\n            const lKey = key.toLowerCase();\n            return this.handlers[lKey] || null;\n        }\n        return null;\n    }\n\n    /**\n     * Sets a new handler function for an action.\n     * @param key Identifier for the action\n     * @param handler The new handler function\n     * @returns True if the key was a valid action identifier, false otherwise\n     */\n    setHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            const lKey = key.toLowerCase();\n            this.handlers[lKey] = handler;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if an action is available for a particular item.\n     * @param nodeEntry Item to check\n     * @returns True if the action is available, false otherwise\n     */\n    canExecuteAction(nodeEntry: NodeEntry): boolean {\n        return this.documentListService && nodeEntry && nodeEntry.entry.isFolder === true;\n    }\n\n    private setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n        this.handlers['download'] = this.downloadNode.bind(this);\n    }\n\n    private downloadNode(nodeEntry: NodeEntry) {\n        this.nodeActionsService.downloadNode(nodeEntry);\n    }\n\n    private copyNode(nodeEntry: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.copyFolder(nodeEntry.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'copy', target, permission);\n        return actionObservable;\n    }\n\n    private moveNode(nodeEntry: NodeEntry, target?: any, permission?: string) {\n        const actionObservable = this.nodeActionsService.moveFolder(nodeEntry.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'move', target, permission);\n        return actionObservable;\n    }\n\n    private prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                if (target && typeof target.reload === 'function') {\n                    target.reload();\n                }\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n\n    private deleteNode(node: NodeEntry, target?: any, permission?: string): Observable<any> {\n        let handlerObservable: Observable<any>;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasAllowableOperations(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    if (target && typeof target.reload === 'function') {\n                        target.reload();\n                    }\n\n                    const message = this.translation.instant('CORE.DELETE_NODE.SINGULAR', { name: node.entry.name });\n                    this.success.next(message);\n                }, () => {\n                    const message = this.translation.instant('CORE.DELETE_NODE.ERROR_SINGULAR', { name: node.entry.name });\n                    this.error.next(message);\n                });\n\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({type: 'folder', action: 'delete', permission: permission}));\n                return throwError(new Error('No permission to delete'));\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component } from '@angular/core';\n\nimport { ContentActionModel } from './../../models/content-action.model';\nimport { DocumentListComponent } from './../document-list.component';\n\n@Component({\n    selector: 'content-actions',\n    template: ''\n})\nexport class ContentActionListComponent {\n\n    constructor(private documentList: DocumentListComponent) {\n    }\n\n    /**\n     * Registers action handler within the parent document list component.\n     * @param action Action model to register.\n     */\n    registerAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            this.documentList.actions.push(action);\n            return true;\n        }\n        return false;\n    }\n\n    unregisterAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            const idx = this.documentList.actions.indexOf(action);\n            if (idx >= 0) {\n                this.documentList.actions.splice(idx, 1);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\nimport { Component, EventEmitter, Input, OnInit, Output, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\n\nimport { ContentActionHandler } from '../../models/content-action.model';\nimport { DocumentActionsService } from '../../services/document-actions.service';\nimport { FolderActionsService } from '../../services/folder-actions.service';\nimport { ContentActionModel, ContentActionTarget } from './../../models/content-action.model';\nimport { ContentActionListComponent } from './content-action-list.component';\nimport { Subscription } from 'rxjs';\n\n@Component({\n    selector: 'content-action',\n    template: '',\n    providers: [\n        DocumentActionsService,\n        FolderActionsService\n    ]\n})\nexport class ContentActionComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** The title of the action as shown in the menu. */\n    @Input()\n    title: string = 'Action';\n\n    /** The name of the icon to display next to the menu command (can be left blank). */\n    @Input()\n    icon: string;\n\n    /** Visibility state (see examples). */\n    @Input()\n    visible: boolean | Function = true;\n\n    /** System actions. Can be \"delete\", \"download\", \"copy\" or \"move\". */\n    @Input()\n    handler: string;\n\n    /** Type of item that the action applies to. Can be \"document\" or \"folder\" */\n    @Input()\n    target: string = ContentActionTarget.All;\n\n    /** The permission type. */\n    @Input()\n    permission: string;\n\n    /** Should this action be disabled in the menu if the user doesn't have permission for it? */\n    @Input()\n    disableWithNoPermission: boolean;\n\n    /** Is the menu item disabled? */\n    @Input()\n    disabled: boolean | Function = false;\n\n    /** Emitted when the user selects the action from the menu. */\n    @Output()\n    execute = new EventEmitter();\n\n    /** Emitted when a permission error occurs */\n    @Output()\n    permissionEvent = new EventEmitter();\n\n    /** Emitted when an error occurs during the action.\n     * Applies to copy and move actions.\n     */\n    @Output()\n    error = new EventEmitter();\n\n    /** Emitted when the action succeeds with the success string message.\n     * Applies to copy, move and delete actions.\n     */\n    @Output()\n    success = new EventEmitter();\n\n    documentActionModel: ContentActionModel;\n    folderActionModel: ContentActionModel;\n\n    private subscriptions: Subscription[] = [];\n\n    constructor(\n        private list: ContentActionListComponent,\n        private documentActions: DocumentActionsService,\n        private folderActions: FolderActionsService) {\n    }\n\n    ngOnInit() {\n        if (this.target === ContentActionTarget.All) {\n            this.folderActionModel = this.generateAction(ContentActionTarget.Folder);\n            this.documentActionModel = this.generateAction(ContentActionTarget.Document);\n        } else {\n            this.documentActionModel = this.generateAction(this.target);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.visible && !changes.visible.firstChange) {\n            if (this.documentActionModel) {\n                this.documentActionModel.visible = changes.visible.currentValue;\n            }\n            if (this.folderActionModel) {\n                this.folderActionModel.visible = changes.visible.currentValue;\n            }\n        }\n\n        if (changes.disabled && !changes.disabled.firstChange) {\n            if (this.documentActionModel) {\n                this.documentActionModel.disabled = changes.disabled.currentValue;\n            }\n            if (this.folderActionModel) {\n                this.folderActionModel.disabled = changes.disabled.currentValue;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n        this.subscriptions = [];\n\n        if (this.documentActionModel) {\n            this.unregister(this.documentActionModel);\n            this.documentActionModel = null;\n        }\n\n        if (this.folderActionModel) {\n            this.unregister(this.folderActionModel);\n            this.folderActionModel = null;\n        }\n    }\n\n    register(model: ContentActionModel): boolean {\n        if (this.list) {\n            return this.list.registerAction(model);\n        }\n        return false;\n    }\n\n    unregister(model: ContentActionModel): boolean {\n        if (this.list) {\n            return this.list.unregisterAction(model);\n        }\n        return false;\n    }\n\n    private generateAction(target: string): ContentActionModel {\n        const model = new ContentActionModel({\n            title: this.title,\n            icon: this.icon,\n            permission: this.permission,\n            disableWithNoPermission: this.disableWithNoPermission,\n            target: target,\n            disabled: this.disabled,\n            visible: this.visible\n        });\n        if (this.handler) {\n            model.handler = this.getSystemHandler(target, this.handler);\n        }\n\n        if (this.execute) {\n            model.execute = (value: any): void => {\n                this.execute.emit({ value });\n            };\n        }\n\n        this.register(model);\n        return model;\n    }\n\n    getSystemHandler(target: string, name: string): ContentActionHandler {\n        if (target) {\n            target = target.toLowerCase();\n\n            if (target === ContentActionTarget.Document) {\n                if (this.documentActions) {\n                    this.subscriptions.push(\n                        this.documentActions.permissionEvent.subscribe((permission) => {\n                            this.permissionEvent.emit(permission);\n                        }),\n                        this.documentActions.error.subscribe((errors) => {\n                            this.error.emit(errors);\n                        }),\n                        this.documentActions.success.subscribe((message) => {\n                            this.success.emit(message);\n                        })\n                    );\n\n                    return this.documentActions.getHandler(name);\n                }\n                return null;\n            }\n\n            if (target === ContentActionTarget.Folder) {\n                if (this.folderActions) {\n                    this.subscriptions.push(\n                        this.folderActions.permissionEvent.subscribe((permission) => {\n                            this.permissionEvent.emit(permission);\n                        }),\n                        this.folderActions.error.subscribe((errors) => {\n                            this.error.emit(errors);\n                        }),\n                        this.folderActions.success.subscribe((message) => {\n                            this.success.emit(message);\n                        })\n                    );\n\n                    return this.folderActions.getHandler(name);\n                }\n                return null;\n            }\n        }\n        return null;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    OnInit,\n    Input,\n    ElementRef,\n    OnDestroy\n} from '@angular/core';\nimport { NodeEntry, Site } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-library-name-column',\n    template: `\n        <span class=\"adf-datatable-cell-value\" title=\"{{ displayTooltip$ | async }}\" (click)=\"onClick()\">\n            {{ displayText$ | async }}\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'adf-datatable-content-cell adf-datatable-link adf-library-name-column'\n    }\n})\nexport class LibraryNameColumnComponent implements OnInit, OnDestroy {\n    @Input()\n    context: any;\n\n    displayTooltip$ = new BehaviorSubject<string>('');\n    displayText$ = new BehaviorSubject<string>('');\n    node: NodeEntry;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private element: ElementRef,\n        private alfrescoApiService: AlfrescoApiService\n    ) {}\n\n    ngOnInit() {\n        this.updateValue();\n\n        this.alfrescoApiService.nodeUpdated\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(node => {\n                const row: ShareDataRow = this.context.row;\n                if (row) {\n                    const { entry } = row.node;\n\n                    if (entry === node) {\n                        row.node = { entry };\n                        this.updateValue();\n                    }\n                }\n            });\n    }\n\n    protected updateValue() {\n        this.node = this.context.row.node;\n        const rows: Array<ShareDataRow> = this.context.data.rows || [];\n        if (this.node && this.node.entry) {\n            this.displayText$.next(\n                this.makeLibraryTitle(<any> this.node.entry, rows)\n            );\n            this.displayTooltip$.next(this.makeLibraryTooltip(this.node.entry));\n        }\n    }\n\n    onClick() {\n        this.element.nativeElement.dispatchEvent(\n            new CustomEvent('name-click', {\n                bubbles: true,\n                detail: {\n                    node: this.node\n                }\n            })\n        );\n    }\n\n    makeLibraryTooltip(library: any): string {\n        const { description, title } = library;\n\n        return description || title || '';\n    }\n\n    makeLibraryTitle(library: Site, rows: Array<ShareDataRow>): string {\n        const entries = rows.map((row: ShareDataRow) => row.node.entry);\n        const { title, id } = library;\n\n        let isDuplicate = false;\n\n        if (entries) {\n            isDuplicate = entries.some((entry: any) => {\n                return entry.id !== id && entry.title === title;\n            });\n        }\n\n        return isDuplicate ? `${title} (${id})` : `${title}`;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    OnInit,\n    Input,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    OnDestroy\n} from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { SiteEntry, Site } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-library-role-column',\n    template: `\n        <span class=\"adf-datatable-cell-value\" title=\"{{ (displayText$ | async) | translate }}\">\n            {{ (displayText$ | async) | translate }}\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-library-role-column adf-datatable-content-cell' }\n})\nexport class LibraryRoleColumnComponent implements OnInit, OnDestroy {\n    @Input()\n    context: any;\n\n    displayText$ = new BehaviorSubject<string>('');\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(private api: AlfrescoApiService) {}\n\n    ngOnInit() {\n        this.updateValue();\n\n        this.api.nodeUpdated\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(node => {\n                const row: ShareDataRow = this.context.row;\n                if (row) {\n                    const { entry } = row.node;\n\n                    if (entry === node) {\n                        row.node = { entry };\n                        this.updateValue();\n                    }\n                }\n            });\n    }\n\n    protected updateValue() {\n        const node: SiteEntry = this.context.row.node;\n        if (node && node.entry) {\n            const role: string = node.entry.role;\n            switch (role) {\n                case Site.RoleEnum.SiteManager:\n                    this.displayText$.next('LIBRARY.ROLE.MANAGER');\n                    break;\n                case Site.RoleEnum.SiteCollaborator:\n                    this.displayText$.next('LIBRARY.ROLE.COLLABORATOR');\n                    break;\n                case Site.RoleEnum.SiteContributor:\n                    this.displayText$.next('LIBRARY.ROLE.CONTRIBUTOR');\n                    break;\n                case Site.RoleEnum.SiteConsumer:\n                    this.displayText$.next('LIBRARY.ROLE.CONSUMER');\n                    break;\n                default:\n                    this.displayText$.next('');\n                    break;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { Site, SiteEntry } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-library-status-column',\n    template: `\n        <span class=\"adf-datatable-cell-value\" title=\"{{ (displayText$ | async) | translate }}\">\n            {{ (displayText$ | async) | translate }}\n        </span>\n    `,\n    host: { class: 'adf-library-status-column adf-datatable-content-cell' }\n})\nexport class LibraryStatusColumnComponent implements OnInit, OnDestroy {\n    @Input()\n    context: any;\n\n    displayText$ = new BehaviorSubject<string>('');\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(private api: AlfrescoApiService) {}\n\n    ngOnInit() {\n        this.updateValue();\n\n        this.api.nodeUpdated\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(node => {\n                const row: ShareDataRow = this.context.row;\n                if (row) {\n                    const { entry } = row.node;\n\n                    if (entry === node) {\n                        row.node = { entry };\n                        this.updateValue();\n                    }\n                }\n            });\n    }\n\n    protected updateValue() {\n        const node: SiteEntry = this.context.row.node;\n        if (node && node.entry) {\n            const visibility: string = node.entry.visibility;\n\n            switch (visibility) {\n                case Site.VisibilityEnum.PUBLIC:\n                    this.displayText$.next('LIBRARY.VISIBILITY.PUBLIC');\n                    break;\n                case Site.VisibilityEnum.PRIVATE:\n                    this.displayText$.next('LIBRARY.VISIBILITY.PRIVATE');\n                    break;\n                case Site.VisibilityEnum.MODERATED:\n                    this.displayText$.next('LIBRARY.VISIBILITY.MODERATED');\n                    break;\n                default:\n                    this.displayText$.next('UNKNOWN');\n                    break;\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    Input,\n    OnInit,\n    ChangeDetectionStrategy,\n    ViewEncapsulation,\n    ElementRef,\n    OnDestroy\n} from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { ShareDataRow } from '../../data/share-data-row.model';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-name-column',\n    template: `\n        <span class=\"adf-datatable-cell-value\" title=\"{{ node | adfNodeNameTooltip }}\" (click)=\"onClick()\">\n            {{ displayText$ | async }}\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-datatable-content-cell adf-datatable-link adf-name-column' }\n})\nexport class NameColumnComponent implements OnInit, OnDestroy {\n    @Input()\n    context: any;\n\n    displayText$ = new BehaviorSubject<string>('');\n    node: NodeEntry;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private alfrescoApiService: AlfrescoApiService) {}\n\n    ngOnInit() {\n        this.updateValue();\n\n        this.alfrescoApiService.nodeUpdated\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(node => {\n                const row: ShareDataRow = this.context.row;\n                if (row) {\n                    const { entry } = row.node;\n\n                    if (entry === node) {\n                        row.node = { entry };\n                        this.updateValue();\n                    }\n                }\n            });\n    }\n\n    protected updateValue() {\n        this.node = this.context.row.node;\n\n        if (this.node && this.node.entry) {\n            this.displayText$.next(this.node.entry.name || this.node.entry.id);\n        }\n    }\n\n    onClick() {\n        this.element.nativeElement.dispatchEvent(\n            new CustomEvent('name-click', {\n                bubbles: true,\n                detail: {\n                    node: this.node\n                }\n            })\n        );\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  OnInit,\n  Input\n} from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { ShareDataRow } from '../../data/share-data-row.model';\n\n@Component({\n  selector: 'adf-trashcan-name-column',\n  template: `\n    <ng-container *ngIf=\"!isLibrary\">\n      <span class=\"adf-datatable-cell-value\" title=\"{{ node | adfNodeNameTooltip }}\">{{ displayText }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"isLibrary\">\n      <span class=\"adf-datatable-cell-value\" title=\"{{ displayTooltip }}\">{{ displayText }}</span>\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: { class: 'adf-datatable-content-cell adf-trashcan-name-column' }\n})\nexport class TrashcanNameColumnComponent implements OnInit {\n  @Input()\n  context: any;\n\n  isLibrary = false;\n  displayText: string;\n  displayTooltip: string;\n  node: NodeEntry;\n\n  ngOnInit() {\n    this.node = this.context.row.node;\n    const rows: Array<ShareDataRow> = this.context.data.rows || [];\n\n    if (this.node && this.node.entry) {\n      this.isLibrary = this.node.entry.nodeType === 'st:site';\n\n      if (this.isLibrary) {\n        const { properties } = this.node.entry;\n\n        this.displayText = this.makeLibraryTitle(this.node.entry, rows);\n        this.displayTooltip =\n          properties['cm:description'] || properties['cm:title'];\n      } else {\n        this.displayText = this.node.entry.name || this.node.entry.id;\n      }\n    }\n  }\n\n  makeLibraryTitle(library: any, rows: Array<ShareDataRow>): string {\n    const entries = rows.map((r: ShareDataRow) => r.node.entry);\n    const { id } = library;\n    const title = library.properties['cm:title'];\n\n    let isDuplicate = false;\n\n    if (entries) {\n      isDuplicate = entries.some((entry: any) => {\n        return entry.id !== id && entry.properties['cm:title'] === title;\n      });\n    }\n\n    return isDuplicate\n      ? `${library.properties['cm:title']} (${library.name})`\n      : `${library.properties['cm:title']}`;\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// note: contains only limited subset of available fields\n\nimport { NodeEntry, Node } from '@alfresco/js-api';\n\nexport class NodePaging {\n    list: NodePagingList;\n}\n\nexport class NodePagingList {\n    pagination: Pagination;\n    entries: NodeMinimalEntry[];\n}\n\nexport class NodeMinimalEntry implements NodeEntry {\n    entry: NodeMinimal;\n}\n\nexport class Pagination {\n    count: number;\n    hasMoreItems: boolean;\n    totalItems: number;\n    skipCount: number;\n    maxItems: number;\n}\n\nexport class NodeMinimal implements Node {\n    id: string;\n    parentId: string;\n    name: string;\n    nodeType: string;\n    isFolder: boolean;\n    isFile: boolean;\n    modifiedAt: Date;\n    modifiedByUser: UserInfo;\n    createdAt: Date;\n    createdByUser: UserInfo;\n    content: ContentInfo;\n    path: PathInfoEntity;\n    properties: NodeProperties = {};\n    aspectNames: string[];\n}\n\nexport class UserInfo {\n    displayName: string;\n    id: string;\n}\n\nexport class ContentInfo {\n    mimeType: string;\n    mimeTypeName: string;\n    sizeInBytes: number;\n    encoding: string;\n}\n\nexport class PathInfoEntity {\n    elements: PathElementEntity[];\n    isComplete: boolean;\n    name: string;\n}\n\nexport class PathElementEntity {\n    id: string;\n    name: string;\n}\n\nexport interface NodeProperties {\n    [key: string]: any;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AllowableOperationsEnum } from '@alfresco/adf-core';\n\nexport class PermissionStyleModel {\n    css: string;\n    permission: AllowableOperationsEnum;\n    isFolder: boolean = true;\n    isFile: boolean = true;\n\n    constructor(css: string, permission: AllowableOperationsEnum, isFile: boolean = true, isFolder: boolean = true) {\n        this.css = css;\n        this.permission = permission;\n        this.isFile = isFile;\n        this.isFolder = isFolder;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileUploadStatus, UploadService, UserPreferencesService } from '@alfresco/adf-core';\nimport { ChangeDetectorRef, Component, Input, Output, EventEmitter, OnDestroy, OnInit, ViewChild, HostBinding } from '@angular/core';\nimport { Subscription, merge, Subject } from 'rxjs';\nimport { FileUploadingListComponent } from './file-uploading-list.component';\nimport { Direction } from '@angular/cdk/bidi';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-file-uploading-dialog',\n    templateUrl: './file-uploading-dialog.component.html',\n    styleUrls: ['./file-uploading-dialog.component.scss']\n})\nexport class FileUploadingDialogComponent implements OnInit, OnDestroy {\n    /** Dialog direction. Can be 'ltr' or 'rtl. */\n    private direction: Direction = 'ltr';\n    private onDestroy$ = new Subject<boolean>();\n\n    @ViewChild('uploadList')\n    uploadList: FileUploadingListComponent;\n\n    /** Dialog position. Can be 'left' or 'right'. */\n    @Input()\n    position: string = 'right';\n\n    /** Emitted when a file in the list has an error. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    @HostBinding('attr.adfUploadDialogRight')\n    public get isPositionRight(): boolean {\n        return (this.direction === 'ltr' && this.position === 'right')\n            || (this.direction === 'rtl' && this.position === 'left')\n            || null;\n    }\n    @HostBinding('attr.adfUploadDialogLeft')\n    public get isPositionLeft(): boolean {\n        return (this.direction === 'ltr' && this.position === 'left')\n            || (this.direction === 'rtl' && this.position === 'right')\n            || null;\n    }\n\n    filesUploadingList: FileModel[] = [];\n    isDialogActive: boolean = false;\n    totalCompleted: number = 0;\n    totalErrors: number = 0;\n    isDialogMinimized: boolean = false;\n    isConfirmation: boolean = false;\n\n    private listSubscription: Subscription;\n    private counterSubscription: Subscription;\n    private fileUploadSubscription: Subscription;\n    private errorSubscription: Subscription;\n\n    constructor(\n        private uploadService: UploadService,\n        private changeDetector: ChangeDetectorRef,\n        private userPreferencesService: UserPreferencesService\n        ) {\n    }\n\n    ngOnInit() {\n        this.listSubscription = this.uploadService.queueChanged\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(fileList => {\n                this.filesUploadingList = fileList;\n\n                if (this.filesUploadingList.length) {\n                    this.isDialogActive = true;\n                }\n            });\n\n        this.counterSubscription = merge(\n                this.uploadService.fileUploadComplete,\n                this.uploadService.fileUploadDeleted\n            )\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(event => {\n                this.totalCompleted = event.totalComplete;\n                this.changeDetector.detectChanges();\n            });\n\n        this.errorSubscription = this.uploadService.fileUploadError\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(event => {\n                this.totalErrors = event.totalError;\n                this.changeDetector.detectChanges();\n            });\n\n        this.fileUploadSubscription = this.uploadService.fileUpload\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => {\n                this.changeDetector.detectChanges();\n            });\n\n        this.uploadService.fileDeleted\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(objId => {\n                if (this.filesUploadingList) {\n                    const file = this.filesUploadingList.find((item) => {\n                        return item.data.entry.id === objId;\n                    });\n                    if (file) {\n                        file.status = FileUploadStatus.Cancelled;\n                        this.changeDetector.detectChanges();\n                    }\n                }\n            });\n\n        this.userPreferencesService.select('textOrientation')\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((textOrientation: Direction) => {\n                this.direction = textOrientation;\n            });\n    }\n\n    /**\n     * Toggle confirmation message.\n     */\n    toggleConfirmation() {\n        this.isConfirmation = !this.isConfirmation;\n\n        if (this.isDialogMinimized) {\n            this.isDialogMinimized = false;\n        }\n    }\n\n    /**\n     * Cancel uploads and hide confirmation\n     */\n    cancelAllUploads() {\n        this.toggleConfirmation();\n\n        this.uploadList.cancelAllFiles();\n    }\n\n    /**\n     * Toggle dialog minimized state.\n     */\n    toggleMinimized(): void {\n        this.isDialogMinimized = !this.isDialogMinimized;\n        this.changeDetector.detectChanges();\n    }\n\n    /**\n     * Dismiss dialog\n     */\n    close(): void {\n        this.isConfirmation = false;\n        this.totalCompleted = 0;\n        this.totalErrors = 0;\n        this.filesUploadingList = [];\n        this.isDialogActive = false;\n        this.isDialogMinimized = false;\n        this.uploadService.clearQueue();\n        this.changeDetector.detectChanges();\n    }\n\n    ngOnDestroy() {\n        this.uploadService.clearQueue();\n        this.listSubscription.unsubscribe();\n        this.counterSubscription.unsubscribe();\n        this.fileUploadSubscription.unsubscribe();\n        this.errorSubscription.unsubscribe();\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileUploadStatus } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'adf-file-uploading-list-row',\n    templateUrl: './file-uploading-list-row.component.html',\n    styleUrls: ['./file-uploading-list-row.component.scss']\n})\nexport class FileUploadingListRowComponent {\n    @Input()\n    file: FileModel;\n\n    @Output()\n    cancel: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    @Output()\n    remove: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    FileUploadStatus = FileUploadStatus;\n\n    onCancel(file: FileModel): void {\n        this.cancel.emit(file);\n    }\n\n    onRemove(file: FileModel): void {\n        this.remove.emit(file);\n    }\n\n    showCancelledStatus(): boolean {\n        return this.file.status === FileUploadStatus.Cancelled ||\n            this.file.status === FileUploadStatus.Aborted ||\n            this.file.status === FileUploadStatus.Deleted;\n    }\n\n    get versionNumber(): string {\n        return this.file.data.entry.properties['cm:versionLabel'];\n    }\n\n    get mimeType(): string {\n        if (this.file && this.file.file && this.file.file.type) {\n            return this.file.file.type;\n        }\n\n        return 'default';\n    }\n\n    isUploadVersion(): boolean {\n        return (\n            !!this.file.data &&\n            this.file.options &&\n            this.file.options.newVersion &&\n            this.file.data.entry.properties &&\n            this.file.data.entry.properties['cm:versionLabel']\n        );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    FileModel,\n    FileUploadStatus,\n    NodesApiService,\n    TranslationService,\n    UploadService\n} from '@alfresco/adf-core';\nimport {\n    Component,\n    ContentChild,\n    Input,\n    Output,\n    TemplateRef,\n    EventEmitter\n} from '@angular/core';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-file-uploading-list',\n    templateUrl: './file-uploading-list.component.html',\n    styleUrls: ['./file-uploading-list.component.scss']\n})\nexport class FileUploadingListComponent {\n    FileUploadStatus = FileUploadStatus;\n\n    @ContentChild(TemplateRef)\n    template: any;\n\n    @Input()\n    files: FileModel[] = [];\n\n    /** Emitted when a file in the list has an error. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    constructor(\n        private uploadService: UploadService,\n        private nodesApi: NodesApiService,\n        private translateService: TranslationService\n    ) {}\n\n    /**\n     * Cancel file upload\n     *\n     * @param file File model to cancel upload for.\n     *\n     * @memberOf FileUploadingListComponent\n     */\n    cancelFile(file: FileModel): void {\n        this.uploadService.cancelUpload(file);\n    }\n\n    /**\n     * Remove uploaded file\n     *\n     * @param file File model to remove upload for.\n     *\n     * @memberOf FileUploadingListComponent\n     */\n    removeFile(file: FileModel): void {\n        this.deleteNode(file).subscribe(() => {\n            if (file.status === FileUploadStatus.Error) {\n                this.notifyError(file);\n            }\n\n            this.cancelNodeVersionInstances(file);\n            this.uploadService.cancelUpload(file);\n        });\n    }\n\n    /**\n     * Call the appropriate method for each file, depending on state\n     */\n    cancelAllFiles(): void {\n        this.getUploadingFiles().forEach((file) =>\n            this.uploadService.cancelUpload(file)\n        );\n\n        const deletedFiles = this.files\n            .filter((file) => file.status === FileUploadStatus.Complete)\n            .map((file) => this.deleteNode(file));\n\n        forkJoin(...deletedFiles).subscribe((files: FileModel[]) => {\n            const errors = files.filter(\n                (file) => file.status === FileUploadStatus.Error\n            );\n\n            if (errors.length) {\n                this.notifyError(...errors);\n            }\n\n            this.uploadService.cancelUpload(...files);\n        });\n    }\n\n    /**\n     * Checks if all the files are uploaded false if there is at least one file in Progress | Starting | Pending\n     */\n    isUploadCompleted(): boolean {\n        return (\n            !this.isUploadCancelled() &&\n            Boolean(this.files.length) &&\n            !this.files.some(\n                ({ status }) =>\n                    status === FileUploadStatus.Starting ||\n                    status === FileUploadStatus.Progress ||\n                    status === FileUploadStatus.Pending\n            )\n        );\n    }\n\n    /**\n     * Check if all the files are Cancelled | Aborted | Error. false if there is at least one file in uploading states\n     */\n    isUploadCancelled(): boolean {\n        return (\n            !!this.files.length &&\n            this.files.every(\n                ({ status }) =>\n                    status === FileUploadStatus.Aborted ||\n                    status === FileUploadStatus.Cancelled ||\n                    status === FileUploadStatus.Deleted\n            )\n        );\n    }\n\n    private deleteNode(file: FileModel): Observable<FileModel> {\n        const { id } = file.data.entry;\n\n        return this.nodesApi.deleteNode(id, { permanent: true }).pipe(\n            map(() => {\n                file.status = FileUploadStatus.Deleted;\n                return file;\n            }),\n            catchError(() => {\n                file.status = FileUploadStatus.Error;\n                return of(file);\n            })\n        );\n    }\n\n    private cancelNodeVersionInstances(file) {\n        this.files\n            .filter(\n                (item) =>\n                    item.data.entry.id === file.data.entry.id &&\n                    item.options.newVersion\n            )\n            .map((item) => {\n                item.status = FileUploadStatus.Deleted;\n            });\n    }\n\n    private notifyError(...files: FileModel[]) {\n        let messageError: string = null;\n\n        if (files.length === 1) {\n            messageError = this.translateService.instant(\n                'FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR',\n                { fileName: files[0].name }\n            );\n        } else {\n            messageError = this.translateService.instant(\n                'FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR',\n                { total: files.length }\n            );\n        }\n\n        this.error.emit(messageError);\n    }\n\n    private getUploadingFiles() {\n        return this.files.filter((item) => {\n            if (\n                item.status === FileUploadStatus.Pending ||\n                item.status === FileUploadStatus.Progress ||\n                item.status === FileUploadStatus.Starting\n            ) {\n                return item;\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, UploadService } from '@alfresco/adf-core';\nimport { EventEmitter } from '@angular/core';\n\nexport class UploadFilesEvent {\n    private isDefaultPrevented: boolean = false;\n\n    get defaultPrevented() {\n        return this.isDefaultPrevented;\n    }\n\n    preventDefault() {\n        this.isDefaultPrevented = true;\n    }\n\n    constructor(\n        public files: Array<FileModel>,\n        private uploadService: UploadService,\n        private callback: EventEmitter<any>\n    ) {}\n\n    pauseUpload() {\n        this.preventDefault();\n    }\n\n    resumeUpload() {\n        if (this.files && this.files.length > 0) {\n            this.uploadService.addToQueue(...this.files);\n            this.uploadService.uploadFilesInTheQueue(this.callback);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FileModel, FileInfo } from '@alfresco/adf-core';\nimport { EventEmitter, Input, Output, OnInit, OnDestroy, NgZone } from '@angular/core';\nimport { UploadService, TranslationService } from '@alfresco/adf-core';\nimport { Subject } from 'rxjs';\nimport { UploadFilesEvent } from '../upload-files.event';\nimport { takeUntil } from 'rxjs/operators';\n\nexport abstract class UploadBase implements OnInit, OnDestroy {\n\n    /** Sets a limit on the maximum size (in bytes) of a file to be uploaded.\n     * Has no effect if undefined.\n     */\n    @Input()\n    maxFilesSize: number;\n\n    /** The ID of the root. Use the nodeId for\n     * Content Services or the taskId/processId for Process Services.\n     */\n    @Input()\n    rootFolderId: string = '-root-';\n\n    /** Toggles component disabled state (if there is no node permission checking). */\n    @Input()\n    disabled: boolean = false;\n\n    /** Filter for accepted file types. */\n    @Input()\n    acceptedFilesType: string = '*';\n\n    /** Toggles versioning. */\n    @Input()\n    versioning: boolean = false;\n\n    /** majorVersion boolean field to true to indicate a major version should be created. */\n    @Input()\n    majorVersion: boolean = false;\n\n    /** When you overwrite existing content, you can use the comment field to add a version comment that appears in the version history */\n    @Input()\n    comment: string;\n\n    /** Custom node type for uploaded file */\n    @Input()\n    nodeType: string = 'cm:content';\n\n    /** Emitted when the file is uploaded successfully. */\n    @Output()\n    success = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error = new EventEmitter();\n\n    /** Emitted when the upload begins. */\n    @Output()\n    beginUpload = new EventEmitter<UploadFilesEvent>();\n\n    protected onDestroy$ = new Subject<boolean>();\n\n    constructor(protected uploadService: UploadService,\n                protected translationService: TranslationService,\n                protected ngZone: NgZone) {\n    }\n\n    ngOnInit() {\n        this.uploadService.fileUploadError\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(error => this.error.emit(error));\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    /**\n     * Upload a list of file in the specified path\n     * @param files\n     * @param path\n     */\n    uploadFiles(files: File[]): void {\n        const filteredFiles: FileModel[] = files\n            .map<FileModel>((file: File) => {\n                return this.createFileModel(file, this.rootFolderId, ((<any> file).webkitRelativePath || '').replace(/\\/[^\\/]*$/, ''));\n            });\n\n        this.uploadQueue(filteredFiles);\n    }\n\n    uploadFilesInfo(files: FileInfo[]): void {\n        const filteredFiles: FileModel[] = files\n            .map<FileModel>((fileInfo: FileInfo) => {\n                return this.createFileModel(fileInfo.file, this.rootFolderId, fileInfo.relativeFolder);\n            });\n\n        this.uploadQueue(filteredFiles);\n    }\n\n    private uploadQueue(files: FileModel[]) {\n        const filteredFiles = files\n            .filter(this.isFileAcceptable.bind(this))\n            .filter(this.isFileSizeAcceptable.bind(this));\n\n        this.ngZone.run(() => {\n            const event = new UploadFilesEvent(\n                [...filteredFiles],\n                this.uploadService,\n                this.success\n            );\n            this.beginUpload.emit(event);\n\n            if (!event.defaultPrevented) {\n                if (filteredFiles.length > 0) {\n                    this.uploadService.addToQueue(...filteredFiles);\n                    this.uploadService.uploadFilesInTheQueue(this.success);\n                }\n            }\n        });\n    }\n\n    /**\n     * Checks if the given file is allowed by the extension filters\n     *\n     * @param file FileModel\n     */\n    protected isFileAcceptable(file: FileModel): boolean {\n        if (this.acceptedFilesType === '*') {\n            return true;\n        }\n\n        const allowedExtensions = this.acceptedFilesType\n            .split(',')\n            .map((ext) => ext.trim().replace(/^\\./, ''));\n\n        if (allowedExtensions.indexOf(file.extension) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Creates FileModel from File\n     *\n     * @param file\n     */\n    protected createFileModel(file: File, parentId: string, path: string, id?: string): FileModel {\n        return new FileModel(file, {\n            comment: this.comment,\n            majorVersion: this.majorVersion,\n            newVersion: this.versioning,\n            parentId: parentId,\n            path: path,\n            nodeType: this.nodeType\n        }, id);\n    }\n\n    protected isFileSizeAllowed(file: FileModel) {\n        let isFileSizeAllowed = true;\n        if (this.isMaxFileSizeDefined()) {\n            isFileSizeAllowed = this.isFileSizeCorrect(file);\n        }\n\n        return isFileSizeAllowed;\n    }\n\n    protected isMaxFileSizeDefined() {\n        return this.maxFilesSize !== undefined && this.maxFilesSize !== null;\n    }\n\n    protected isFileSizeCorrect(file: FileModel) {\n        return this.maxFilesSize >= 0 && file.size <= this.maxFilesSize;\n    }\n\n    /**\n     * Checks if the given file is an acceptable size\n     *\n     * @param file FileModel\n     */\n    private isFileSizeAcceptable(file: FileModel): boolean {\n        let acceptableSize = true;\n\n        if (!this.isFileSizeAllowed(file)) {\n            acceptableSize = false;\n\n            const message = this.translationService.instant(\n                'FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE',\n                { fileName: file.name }\n            );\n\n            this.error.emit(message);\n        }\n\n        return acceptableSize;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    ContentService, EXTENDIBLE_COMPONENT, FileUtils,\n    LogService, NodeAllowableOperationSubject, TranslationService, UploadService, AllowableOperationsEnum\n} from '@alfresco/adf-core';\nimport {\n    Component, EventEmitter, forwardRef, Input,\n    OnChanges, OnInit, Output, SimpleChanges, ViewEncapsulation, NgZone\n} from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\nimport { PermissionModel } from '../../document-list/models/permissions.model';\nimport { UploadBase } from './base-upload/upload-base';\n\n@Component({\n    selector: 'adf-upload-button',\n    templateUrl: './upload-button.component.html',\n    styleUrls: ['./upload-button.component.scss'],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadButtonComponent extends UploadBase implements OnInit, OnChanges, NodeAllowableOperationSubject {\n\n    /** Allows/disallows upload folders (only for Chrome). */\n    @Input()\n    uploadFolders: boolean = false;\n\n    /** Allows/disallows multiple files */\n    @Input()\n    multipleFiles: boolean = false;\n\n    /** Defines the text of the upload button. */\n    @Input()\n    staticTitle: string;\n\n    /** Custom tooltip text. */\n    @Input()\n    tooltip: string = null;\n\n    /** Emitted when create permission is missing. */\n    @Output()\n    permissionEvent: EventEmitter<PermissionModel> = new EventEmitter<PermissionModel>();\n\n    private hasAllowableOperations: boolean = false;\n\n    protected permissionValue: Subject<boolean> = new Subject<boolean>();\n\n    constructor(protected uploadService: UploadService,\n                private contentService: ContentService,\n                protected translationService: TranslationService,\n                protected logService: LogService,\n                protected ngZone: NgZone) {\n        super(uploadService, translationService, ngZone);\n    }\n\n    ngOnInit() {\n        this.permissionValue.subscribe((permission: boolean) => {\n            this.hasAllowableOperations = permission;\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const rootFolderId = changes['rootFolderId'];\n        if (rootFolderId && rootFolderId.currentValue) {\n            this.checkPermission();\n        }\n    }\n\n    isButtonDisabled(): boolean {\n        return this.disabled ? true : undefined;\n    }\n\n    onFilesAdded($event: any): void {\n        const files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n\n        if (this.hasAllowableOperations) {\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    onDirectoryAdded($event: any): void {\n        if (this.hasAllowableOperations) {\n            const files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({ type: 'content', action: 'upload', permission: 'create' }));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n\n    checkPermission() {\n        if (this.rootFolderId) {\n            const opts: any = {\n                includeSource: true,\n                include: ['allowableOperations']\n            };\n\n            this.contentService.getNode(this.rootFolderId, opts).subscribe(\n                (res) => this.permissionValue.next(this.nodeHasPermission(res.entry, AllowableOperationsEnum.CREATE)),\n                (error) => this.error.emit(error)\n            );\n        }\n    }\n\n    nodeHasPermission(node: Node, permission: AllowableOperationsEnum | string): boolean {\n        return this.contentService.hasAllowableOperations(node, permission);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AllowableOperationsEnum  } from '@alfresco/adf-core';\nimport { Component, forwardRef, Input, OnChanges, ViewEncapsulation, OnInit } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { UploadButtonComponent } from './upload-button.component';\nimport { FileModel, EXTENDIBLE_COMPONENT } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-upload-version-button',\n    templateUrl: './upload-button.component.html',\n    styleUrls: ['./upload-button.component.scss'],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadVersionButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadVersionButtonComponent extends UploadButtonComponent implements OnChanges, OnInit {\n\n    /** (**Required**) The node to be versioned. */\n    @Input()\n    node: Node;\n\n    protected createFileModel(file: File): FileModel {\n        const fileModel = super.createFileModel(file, this.rootFolderId, ((<any> file).webkitRelativePath || '').replace(/\\/[^\\/]*$/, ''), this.node.id);\n\n        if (!this.isFileAcceptable(fileModel)) {\n            const message = this.translationService.instant('FILE_UPLOAD.VERSION.MESSAGES.INCOMPATIBLE_VERSION');\n            this.error.emit(message);\n        }\n\n        return fileModel;\n    }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this.checkPermission();\n    }\n\n    checkPermission() {\n        this.permissionValue.next(this.nodeHasPermission(this.node, AllowableOperationsEnum.UPDATE));\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    EXTENDIBLE_COMPONENT, FileInfo, FileModel, FileUtils, NodeAllowableOperationSubject,\n    NotificationService, TranslationService, UploadService, ContentService, AllowableOperationsEnum\n} from '@alfresco/adf-core';\nimport { Component, forwardRef, ViewEncapsulation, NgZone } from '@angular/core';\nimport { UploadBase } from './base-upload/upload-base';\n\n@Component({\n    selector: 'adf-upload-drag-area',\n    templateUrl: './upload-drag-area.component.html',\n    styleUrls: ['./upload-drag-area.component.scss'],\n    host: { 'class': 'adf-upload-drag-area' },\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadDragAreaComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class UploadDragAreaComponent extends UploadBase implements NodeAllowableOperationSubject {\n\n    constructor(protected uploadService: UploadService,\n                protected translationService: TranslationService,\n                private notificationService: NotificationService,\n                private contentService: ContentService,\n                protected ngZone: NgZone) {\n        super(uploadService, translationService, ngZone);\n    }\n\n    /**\n     * Method called when files are dropped in the drag area.\n     *\n     * @param files - files dropped in the drag area.\n     */\n    onFilesDropped(files: File[]): void {\n        if (!this.disabled && files.length) {\n            this.uploadFiles(files);\n        }\n    }\n\n    /**\n     * Called when a folder are dropped in the drag area\n     *\n     * @param folder - name of the dropped folder\n     */\n    onFolderEntityDropped(folder: any): void {\n        if (!this.disabled && folder.isDirectory) {\n            FileUtils.flatten(folder).then((filesInfo) => {\n                this.uploadFilesInfo(filesInfo);\n            });\n        }\n    }\n\n    /**\n     * Show undo notification bar.\n     *\n     * @param latestFilesAdded - files in the upload queue enriched with status flag and xhr object.\n     */\n    showUndoNotificationBar(latestFilesAdded: FileModel[]) {\n        let messageTranslate: any, actionTranslate: any;\n        messageTranslate = this.translationService.get('FILE_UPLOAD.MESSAGES.PROGRESS');\n        actionTranslate = this.translationService.get('FILE_UPLOAD.ACTION.UNDO');\n\n        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(() => {\n            this.uploadService.cancelUpload(...latestFilesAdded);\n        });\n    }\n\n    /** Returns true or false considering the component options and node permissions */\n    isDroppable(): boolean {\n        return !this.disabled;\n    }\n\n    /**\n     * Handles 'upload-files' events raised by child components.\n     *\n     * @param event DOM event\n     */\n    onUploadFiles(event: CustomEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        const isAllowed: boolean = this.contentService.hasAllowableOperations(event.detail.data.obj.entry, AllowableOperationsEnum.CREATE);\n        if (isAllowed) {\n            const fileInfo: FileInfo[] = event.detail.files;\n            if (this.isTargetNodeFolder(event)) {\n                const destinationFolderName = event.detail.data.obj.entry.name;\n                fileInfo.map((file) => file.relativeFolder = destinationFolderName ? destinationFolderName.concat(file.relativeFolder) : file.relativeFolder);\n            }\n            if (fileInfo && fileInfo.length > 0) {\n                this.uploadFilesInfo(fileInfo);\n            }\n        }\n    }\n\n    private isTargetNodeFolder(event: CustomEvent): boolean {\n        return event.detail.data.obj && event.detail.data.obj.entry.isFolder;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { TranslationService } from '@alfresco/adf-core';\n\n@Pipe({\n    name: 'adfFileUploadError',\n    pure: true\n})\nexport class FileUploadErrorPipe implements PipeTransform {\n\n    constructor(private translation: TranslationService) {\n    }\n\n    transform(errorCode: number): string {\n        return this.translation.instant(`FILE_UPLOAD.ERRORS.${errorCode || 'GENERIC'}`);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { FileUtils } from '@alfresco/adf-core';\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({\n    selector: '[adf-file-draggable]'\n})\nexport class FileDraggableDirective implements OnInit, OnDestroy {\n\n    files: File [];\n\n    /** Enables/disables drag-and-drop functionality. */\n    @Input('adf-file-draggable')\n    enabled: boolean = true;\n\n    /** Emitted when one or more files are dragged and dropped onto the draggable element. */\n    @Output()\n    filesDropped: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    /** Emitted when a directory is dragged and dropped onto the draggable element. */\n    @Output()\n    folderEntityDropped: EventEmitter<any> = new EventEmitter();\n\n    private cssClassName: string = 'adf-file-draggable__input-focus';\n    private element: HTMLElement;\n\n    constructor(el: ElementRef, private ngZone: NgZone) {\n        this.element = el.nativeElement;\n    }\n\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.element.addEventListener('dragenter', this.onDragEnter.bind(this));\n            this.element.addEventListener('dragover', this.onDragOver.bind(this));\n            this.element.addEventListener('dragleave', this.onDragLeave.bind(this));\n            this.element.addEventListener('drop', this.onDropFiles.bind(this));\n        });\n    }\n\n    ngOnDestroy() {\n        this.element.removeEventListener('dragenter', this.onDragEnter);\n        this.element.removeEventListener('dragover', this.onDragOver);\n        this.element.removeEventListener('dragleave', this.onDragLeave);\n        this.element.removeEventListener('drop', this.onDropFiles);\n    }\n\n    /**\n     * Method called when files is dropped in the drag and drop area.\n     * @param event DOM event.\n     */\n    onDropFiles(event: any): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n\n            // Chrome, Edge, Firefox, Opera (Files + Folders)\n            const items = event.dataTransfer.items;\n            if (items) {\n                const files: File[] = [];\n\n                for (let i = 0; i < items.length; i++) {\n                    if (items[i].webkitGetAsEntry) {\n                        const item = items[i].webkitGetAsEntry();\n\n                        if (item) {\n                            if (item.isFile) {\n                                const file = items[i].getAsFile();\n\n                                if (file) {\n                                    files.push(file);\n                                }\n                            } else if (item.isDirectory) {\n                                this.folderEntityDropped.emit(item);\n                            }\n                        }\n                    }\n                }\n                if (files.length > 0) {\n                    this.filesDropped.emit(files);\n                }\n            } else {\n                // IE, Safari, Chrome, Edge, Firefox, Opera (Files only)\n                const files = FileUtils.toFileArray(event.dataTransfer.files);\n                this.filesDropped.emit(files);\n            }\n\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag in.\n     *\n     * @param event - DOM event.\n     */\n    onDragEnter(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file drag out.\n     *\n     * @param event - DOM event.\n     */\n    onDragLeave(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n\n    /**\n     * Change the style of the drag area when a file is over the drag area.\n     *\n     * @param event\n     */\n    onDragOver(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n\n    /**\n     * Prevent default and stop propagation of the DOM event.\n     *\n     * @param $event - DOM event.\n     */\n    preventDefault(event: Event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { FileUploadingDialogComponent } from './components/file-uploading-dialog.component';\nimport { FileUploadingListRowComponent } from './components/file-uploading-list-row.component';\nimport { FileUploadingListComponent } from './components/file-uploading-list.component';\nimport { UploadButtonComponent } from './components/upload-button.component';\nimport { UploadVersionButtonComponent } from './components/upload-version-button.component';\nimport { UploadDragAreaComponent } from './components/upload-drag-area.component';\nimport { FileUploadErrorPipe } from './pipes/file-upload-error.pipe';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { FileDraggableDirective } from './directives/file-draggable.directive';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        UploadVersionButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent,\n        FileUploadErrorPipe\n    ],\n    exports: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        UploadVersionButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent,\n        FileUploadErrorPipe\n    ]\n})\nexport class UploadModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { MaterialModule } from '../material.module';\nimport { UploadModule } from '../upload/upload.module';\n\nimport { ContentActionListComponent } from './components/content-action/content-action-list.component';\nimport { ContentActionComponent } from './components/content-action/content-action.component';\nimport { ContentColumnListComponent } from './components/content-column/content-column-list.component';\nimport { ContentColumnComponent } from './components/content-column/content-column.component';\nimport { DocumentListComponent } from './components/document-list.component';\n\nimport { TrashcanNameColumnComponent } from './components/trashcan-name-column/trashcan-name-column.component';\nimport { LibraryStatusColumnComponent } from './components/library-status-column/library-status-column.component';\nimport { LibraryRoleColumnComponent } from './components/library-role-column/library-role-column.component';\nimport { LibraryNameColumnComponent } from './components/library-name-column/library-name-column.component';\nimport { NameColumnComponent } from './components/name-column/name-column.component';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        FlexLayoutModule,\n        MaterialModule,\n        UploadModule\n    ],\n    declarations: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        TrashcanNameColumnComponent,\n        LibraryStatusColumnComponent,\n        LibraryRoleColumnComponent,\n        LibraryNameColumnComponent,\n        NameColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent\n    ],\n    exports: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        TrashcanNameColumnComponent,\n        LibraryStatusColumnComponent,\n        LibraryRoleColumnComponent,\n        LibraryNameColumnComponent,\n        NameColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent\n    ],\n    entryComponents: [\n        TrashcanNameColumnComponent,\n        LibraryStatusColumnComponent,\n        LibraryRoleColumnComponent,\n        LibraryNameColumnComponent,\n        NameColumnComponent\n    ]\n})\nexport class DocumentListModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { AlfrescoApiService, AppConfigService } from '@alfresco/adf-core';\nimport {\n    QueryBody,\n    RequestFacetFields,\n    RequestFacetField,\n    RequestSortDefinitionInner,\n    ResultSetPaging,\n    RequestHighlight\n} from '@alfresco/js-api';\nimport { SearchCategory } from './search-category.interface';\nimport { FilterQuery } from './filter-query.interface';\nimport { SearchRange } from './search-range.interface';\nimport { SearchConfiguration } from './search-configuration.interface';\nimport { FacetQuery } from './facet-query.interface';\nimport { SearchSortingDefinition } from './search-sorting-definition.interface';\nimport { FacetField } from './facet-field.interface';\nimport { FacetFieldBucket } from './facet-field-bucket.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SearchQueryBuilderService {\n\n    private _userQuery = '';\n\n    updated = new Subject<QueryBody>();\n    executed = new Subject<ResultSetPaging>();\n    error = new Subject();\n\n    categories: Array<SearchCategory> = [];\n    queryFragments: { [id: string]: string } = {};\n    filterQueries: FilterQuery[] = [];\n    paging: { maxItems?: number; skipCount?: number } = null;\n    sorting: Array<SearchSortingDefinition> = [];\n\n    protected userFacetBuckets: { [key: string]: Array<FacetFieldBucket> } = {};\n\n    get userQuery(): string {\n        return this._userQuery;\n    }\n\n    set userQuery(value: string) {\n        value = (value || '').trim();\n        this._userQuery = value ? `(${value})` : '';\n    }\n\n    config: SearchConfiguration = {\n        categories: []\n    };\n\n    // TODO: to be supported in future iterations\n    ranges: { [id: string]: SearchRange } = {};\n\n    constructor(private appConfig: AppConfigService, private alfrescoApiService: AlfrescoApiService) {\n        this.resetToDefaults();\n    }\n\n    /**\n     * Resets the query to the defaults specified in the app config.\n     */\n    resetToDefaults() {\n        const template = this.appConfig.get<SearchConfiguration>('search');\n        if (template) {\n            this.config = JSON.parse(JSON.stringify(template));\n            this.categories = (this.config.categories || []).filter((category) => category.enabled);\n            this.filterQueries = this.config.filterQueries || [];\n            this.userFacetBuckets = {};\n            if (this.config.sorting) {\n                this.sorting = this.config.sorting.defaults || [];\n            }\n        }\n    }\n\n    /**\n     * Adds a facet bucket to a field.\n     * @param field The target field\n     * @param bucket Bucket to add\n     */\n    addUserFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (field && field.field && bucket) {\n            const buckets = this.userFacetBuckets[field.field] || [];\n            const existing = buckets.find((facetBucket) => facetBucket.label === bucket.label);\n            if (!existing) {\n                buckets.push(bucket);\n            }\n            this.userFacetBuckets[field.field] = buckets;\n        }\n    }\n\n    /**\n     * Gets the buckets currently added to a field\n     * @param field The target fields\n     * @returns Bucket array\n     */\n    getUserFacetBuckets(field: string) {\n        return this.userFacetBuckets[field] || [];\n    }\n\n    /**\n     * Removes an existing bucket from a field.\n     * @param field The target field\n     * @param bucket Bucket to remove\n     */\n    removeUserFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (field && field.field && bucket) {\n            const buckets = this.userFacetBuckets[field.field] || [];\n            this.userFacetBuckets[field.field] = buckets\n                .filter((facetBucket) => facetBucket.label !== bucket.label);\n        }\n    }\n\n    /**\n     * Adds a filter query to the current query.\n     * @param query Query string to add\n     */\n    addFilterQuery(query: string): void {\n        if (query) {\n            const existing = this.filterQueries.find((filterQuery) => filterQuery.query === query);\n            if (!existing) {\n                this.filterQueries.push({ query: query });\n            }\n        }\n    }\n\n    /**\n     * Removes an existing filter query.\n     * @param query The query to remove\n     */\n    removeFilterQuery(query: string): void {\n        if (query) {\n            this.filterQueries = this.filterQueries\n                .filter((filterQuery) => filterQuery.query !== query);\n        }\n    }\n\n    /**\n     * Gets a facet query by label.\n     * @param label Label of the query\n     * @returns Facet query data\n     */\n    getFacetQuery(label: string): FacetQuery {\n        if (label && this.hasFacetQueries) {\n            const result = this.config.facetQueries.queries.find((query) => query.label === label);\n            if (result) {\n                return { ...result };\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Gets a facet field by label.\n     * @param label Label of the facet field\n     * @returns Facet field data\n     */\n    getFacetField(label: string): FacetField {\n        if (label) {\n            const fields = this.config.facetFields.fields || [];\n            const result = fields.find((field) => field.label === label);\n            if (result) {\n                result.label = this.getSupportedLabel(result.label);\n                return { ...result };\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Builds the current query and triggers the `updated` event.\n     */\n    update(): void {\n        const query = this.buildQuery();\n        this.updated.next(query);\n    }\n\n    /**\n     * Builds and executes the current query.\n     * @returns Nothing\n     */\n    async execute() {\n        try {\n            const query = this.buildQuery();\n            if (query) {\n                const resultSetPaging: ResultSetPaging = await this.alfrescoApiService.searchApi.search(query);\n                this.executed.next(resultSetPaging);\n            }\n        } catch (error) {\n            this.error.next(error);\n\n            this.executed.next({\n                list: {\n                    pagination: {\n                        totalItems: 0\n                    },\n                    entries: []\n                }\n            });\n        }\n    }\n\n    /**\n     * Builds the current query.\n     * @returns The finished query\n     */\n    buildQuery(): QueryBody {\n        const query = this.getFinalQuery();\n\n        const include = this.config.include || [];\n        if (include.length === 0) {\n            include.push('path', 'allowableOperations');\n        }\n\n        if (query) {\n            const result: QueryBody = <QueryBody> {\n                query: {\n                    query: query,\n                    language: 'afts'\n                },\n                include: include,\n                paging: this.paging,\n                fields: this.config.fields,\n                filterQueries: this.filterQueries,\n                facetQueries: this.facetQueries,\n                facetIntervals: this.facetIntervals,\n                facetFields: this.facetFields,\n                sort: this.sort,\n                highlight: this.highlight\n            };\n\n            result['facetFormat'] = 'V2';\n            return result;\n        }\n\n        return null;\n    }\n\n    /**\n     * Gets the primary sorting definition.\n     * @returns The primary sorting definition\n     */\n    getPrimarySorting(): SearchSortingDefinition {\n        if (this.sorting && this.sorting.length > 0) {\n            return this.sorting[0];\n        }\n        return null;\n    }\n\n    /**\n     * Gets all pre-configured sorting options that users can choose from.\n     * @returns Pre-configured sorting options\n     */\n    getSortingOptions(): SearchSortingDefinition[] {\n        if (this.config && this.config.sorting) {\n            return this.config.sorting.options || [];\n        }\n        return [];\n    }\n\n    /**\n     * Gets the query group.\n     * @param query Target query\n     * @returns Query group\n     */\n    getQueryGroup(query) {\n        return query.group || this.config.facetQueries.label || 'Facet Queries';\n    }\n\n    /**\n     * Checks if FacetQueries has been defined\n     * @returns True if defined, false otherwise\n     */\n    get hasFacetQueries(): boolean {\n        if (this.config\n            && this.config.facetQueries\n            && this.config.facetQueries.queries\n            && this.config.facetQueries.queries.length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if FacetIntervals has been defined\n     * @returns True if defined, false otherwise\n     */\n    get hasFacetIntervals(): boolean {\n        if (this.config\n            && this.config.facetIntervals\n            && this.config.facetIntervals.intervals\n            && this.config.facetIntervals.intervals.length > 0) {\n            return true;\n        }\n        return false;\n    }\n\n    get hasFacetHighlight(): boolean {\n        return this.config && this.config.highlight ? true : false;\n    }\n\n    protected get sort(): RequestSortDefinitionInner[] {\n        return this.sorting.map((def) => {\n            return new RequestSortDefinitionInner({\n                type: def.type,\n                field: def.field,\n                ascending: def.ascending\n            });\n        });\n    }\n\n    protected get facetQueries(): FacetQuery[] {\n        if (this.hasFacetQueries) {\n            return this.config.facetQueries.queries.map((query) => {\n                query.group = this.getQueryGroup(query);\n                return <FacetQuery> { ...query };\n            });\n        }\n\n        return null;\n    }\n\n    protected get facetIntervals(): any {\n        if (this.hasFacetIntervals) {\n            const configIntervals = this.config.facetIntervals;\n\n            return {\n                intervals: configIntervals.intervals.map((interval) => <any> {\n                    label: this.getSupportedLabel(interval.label),\n                    field: interval.field,\n                    sets: interval.sets.map((set) => <any> {\n                        label: this.getSupportedLabel(set.label),\n                        start: set.start,\n                        end: set.end,\n                        startInclusive: set.startInclusive,\n                        endInclusive: set.endInclusive\n                    })\n                })\n            };\n        }\n\n        return null;\n    }\n\n    protected get highlight(): RequestHighlight {\n        return this.hasFacetHighlight ? this.config.highlight : null;\n    }\n\n    protected getFinalQuery(): string {\n        let query = '';\n\n        this.categories.forEach((facet) => {\n            const customQuery = this.queryFragments[facet.id];\n            if (customQuery) {\n                if (query.length > 0) {\n                    query += ' AND ';\n                }\n                query += `(${customQuery})`;\n            }\n        });\n\n        let result = [this.userQuery, query]\n            .filter((entry) => entry)\n            .join(' AND ');\n\n        if (this.userFacetBuckets) {\n            Object.keys(this.userFacetBuckets).forEach((key) => {\n                const subQuery = (this.userFacetBuckets[key] || [])\n                    .filter((bucket) => bucket.filterQuery)\n                    .map((bucket) => bucket.filterQuery)\n                    .join(' OR ');\n                if (subQuery) {\n                    if (result.length > 0) {\n                        result += ' AND ';\n                    }\n                    result += `(${subQuery})`;\n                }\n            });\n        }\n\n        return result;\n    }\n\n    protected get facetFields(): RequestFacetFields {\n        const facetFields = this.config.facetFields && this.config.facetFields.fields;\n\n        if (facetFields && facetFields.length > 0) {\n            return {\n                facets: facetFields.map((facet) => <RequestFacetField> {\n                    field: facet.field,\n                    mincount: facet.mincount,\n                    label: this.getSupportedLabel(facet.label),\n                    limit: facet.limit,\n                    offset: facet.offset,\n                    prefix: facet.prefix\n                })\n            };\n        }\n\n        return null;\n    }\n\n    /**\n     * Encloses a label name with double quotes if it contains whitespace characters.\n     * @param configLabel Original label text\n     * @returns Label, possibly with quotes if it contains spaces\n     */\n    getSupportedLabel(configLabel: string): string {\n        const spaceInsideLabelIndex = configLabel.search(/\\s/g);\n        if (spaceInsideLabelIndex > -1) {\n            return `\"${configLabel}\"`;\n        }\n        return configLabel;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchService } from '@alfresco/adf-core';\nimport {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation,\n    OnDestroy\n} from '@angular/core';\nimport { NodePaging } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-search',\n    templateUrl: './search.component.html',\n    styleUrls: ['./search.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    exportAs: 'searchAutocomplete',\n    host: {\n        'class': 'adf-search'\n    }\n})\nexport class SearchComponent implements AfterContentInit, OnChanges, OnDestroy {\n\n    @ViewChild('panel')\n    panel: ElementRef;\n\n    @ContentChild(TemplateRef)\n    template: TemplateRef<any>;\n\n    /** Function that maps an option's value to its display value in the trigger. */\n    @Input()\n    displayWith: ((value: any) => string) | null = null;\n\n    /** Maximum number of results to show in the search. */\n    @Input()\n    maxResults: number = 20;\n\n    /** Number of results to skip from the results pagination. */\n    @Input()\n    skipResults: number = 0;\n\n    /** Search term to use when executing the search. Updating this value will\n     * run a new search and update the results.\n     */\n    @Input()\n    searchTerm: string = '';\n\n    /** CSS class for display. */\n    @Input('class')\n    set classList(classList: string) {\n        if (classList && classList.length) {\n            classList.split(' ').forEach((className) => this._classList[className.trim()] = true);\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Emitted when search results have fully loaded. */\n    @Output()\n    resultLoaded: EventEmitter<NodePaging> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    showPanel: boolean = false;\n    results: NodePaging;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    _isOpen: boolean = false;\n    keyPressedStream = new Subject<string>();\n    _classList: { [key: string]: boolean } = {};\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(private searchService: SearchService,\n                private _elementRef: ElementRef) {\n        this.keyPressedStream\n            .pipe(\n                debounceTime(200),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(searchedWord => {\n                this.loadSearchResults(searchedWord);\n            });\n\n        searchService.dataLoaded\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(\n                nodePaging => this.onSearchDataLoaded(nodePaging),\n                error => this.onSearchDataError(error)\n            );\n    }\n\n    ngAfterContentInit() {\n        this.setVisibility();\n    }\n\n    ngOnChanges(changes) {\n        if (changes.searchTerm && changes.searchTerm.currentValue) {\n            this.loadSearchResults(changes.searchTerm.currentValue);\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    resetResults() {\n        this.cleanResults();\n        this.setVisibility();\n    }\n\n    reload() {\n        this.loadSearchResults(this.searchTerm);\n    }\n\n    private cleanResults() {\n        if (this.results) {\n            this.results = {};\n        }\n    }\n\n    private loadSearchResults(searchTerm?: string) {\n        this.resetResults();\n        if (searchTerm) {\n            this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe(\n                (result) => this.onSearchDataLoaded(result),\n                (err) => this.onSearchDataError(err)\n            );\n        } else {\n            this.cleanResults();\n        }\n    }\n\n    onSearchDataLoaded(nodePaging: NodePaging) {\n        if (nodePaging) {\n            this.results = nodePaging;\n            this.resultLoaded.emit(this.results);\n            this.isOpen = true;\n            this.setVisibility();\n        }\n    }\n\n    onSearchDataError(error) {\n        if (error && error.status !== 400) {\n            this.results = null;\n            this.error.emit(error);\n        }\n    }\n\n    hidePanel() {\n        if (this.isOpen) {\n            this._classList['adf-search-show'] = false;\n            this._classList['adf-search-hide'] = true;\n            this.isOpen = false;\n        }\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.results && !!this.results.list;\n        this._classList['adf-search-show'] = this.showPanel;\n        this._classList['adf-search-hide'] = !this.showPanel;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trigger, transition, animate, style, state, AnimationTriggerMetadata } from '@angular/animations';\n\nexport const searchAnimation: AnimationTriggerMetadata = trigger('transitionMessages', [\n    state('active', style({\n        'margin-left': '{{ margin-left }}px',\n        'margin-right': '{{ margin-right }}px',\n        'transform': '{{ transform }}'\n    }), { params: { 'margin-left': 0, 'margin-right': 0, 'transform': 'translateX(0%)' } }),\n    state('inactive', style({\n        'margin-left': '{{ margin-left }}px',\n        'margin-right': '{{ margin-right }}px',\n        'transform': '{{ transform }}'\n    }), { params: { 'margin-left': 0, 'margin-right': 0, 'transform': 'translateX(0%)' } }),\n    state('no-animation', style({ transform: 'translateX(0%)', width: '100%' })),\n    transition('active <=> inactive', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n]);\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'adf-empty-search-result',\n    templateUrl: './empty-search-result.component.html',\n    encapsulation: ViewEncapsulation.None\n})\nexport class EmptySearchResultComponent {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthenticationService, ThumbnailService, UserPreferencesService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output,\n         QueryList, ViewEncapsulation, ViewChild, ViewChildren, ElementRef, TemplateRef, ContentChild } from '@angular/core';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { Observable, Subject } from 'rxjs';\nimport { SearchComponent } from './search.component';\nimport { searchAnimation } from './animations';\nimport { MatListItem } from '@angular/material';\nimport { EmptySearchResultComponent } from './empty-search-result.component';\nimport { debounceTime, filter, takeUntil } from 'rxjs/operators';\nimport { Direction } from '@angular/cdk/bidi';\n\n@Component({\n    selector: 'adf-search-control',\n    templateUrl: './search-control.component.html',\n    styleUrls: ['./search-control.component.scss'],\n    animations: [searchAnimation],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-control' }\n})\nexport class SearchControlComponent implements OnInit, OnDestroy {\n\n    /** Toggles whether to use an expanding search control. If false\n     * then a regular input is used.\n     */\n    @Input()\n    expandable: boolean = true;\n\n    /** Toggles highlighting of the search term in the results. */\n    @Input()\n    highlight: boolean = false;\n\n    /** Type of the input field to render, e.g. \"search\" or \"text\" (default). */\n    @Input()\n    inputType: string = 'text';\n\n    /** Toggles auto-completion of the search input field. */\n    @Input()\n    autocomplete: boolean = false;\n\n    /** Toggles \"find-as-you-type\" suggestions for possible matches. */\n    @Input()\n    liveSearchEnabled: boolean = true;\n\n    /** Maximum number of results to show in the live search. */\n    @Input()\n    liveSearchMaxResults: number = 5;\n\n    /** Emitted when the search is submitted by pressing the ENTER key.\n     * The search term is provided as the value of the event.\n     */\n    @Output()\n    submit: EventEmitter<any> = new EventEmitter();\n\n    /** Emitted when the search term is changed. The search term is provided\n     * in the 'value' property of the returned object.  If the term is less\n     * than three characters in length then it is truncated to an empty\n     * string.\n     */\n    @Output()\n    searchChange: EventEmitter<string> = new EventEmitter();\n\n    /** Emitted when a file item from the list of \"find-as-you-type\" results is selected. */\n    @Output()\n    optionClicked: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('search')\n    searchAutocomplete: SearchComponent;\n\n    @ViewChild('searchInput')\n    searchInput: ElementRef;\n\n    @ViewChildren(MatListItem)\n    private listResultElement: QueryList<MatListItem>;\n\n    @ContentChild(EmptySearchResultComponent)\n    emptySearchTemplate: EmptySearchResultComponent;\n\n    searchTerm: string = '';\n    subscriptAnimationState: any;\n    noSearchResultTemplate: TemplateRef <any> = null;\n\n    private toggleSearch = new Subject<any>();\n    private focusSubject = new Subject<FocusEvent>();\n    private onDestroy$ = new Subject<boolean>();\n    private dir = 'ltr';\n\n    constructor(\n        public authService: AuthenticationService,\n        private thumbnailService: ThumbnailService,\n        private userPreferencesService: UserPreferencesService\n    ) {\n\n        this.toggleSearch\n            .pipe(\n                debounceTime(200),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(() => {\n                if (this.expandable) {\n                    this.subscriptAnimationState = this.toggleAnimation();\n\n                    if (this.subscriptAnimationState.value === 'inactive') {\n                        this.searchTerm = '';\n                        this.searchAutocomplete.resetResults();\n                        if ( document.activeElement.id === this.searchInput.nativeElement.id) {\n                            this.searchInput.nativeElement.blur();\n                        }\n                    }\n                }\n            });\n    }\n\n    applySearchFocus(animationDoneEvent) {\n        if (animationDoneEvent.toState === 'active') {\n            this.searchInput.nativeElement.focus();\n        }\n    }\n\n    ngOnInit() {\n        this.userPreferencesService\n            .select('textOrientation')\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe((direction: Direction) => {\n                this.dir = direction;\n                this.subscriptAnimationState = this.getAnimationState();\n            });\n\n        this.subscriptAnimationState = this.getAnimationState();\n        this.setupFocusEventHandlers();\n    }\n\n    isNoSearchTemplatePresent(): boolean {\n        return this.emptySearchTemplate ? true : false;\n    }\n\n    ngOnDestroy(): void {\n        if (this.focusSubject) {\n            this.focusSubject.complete();\n            this.focusSubject = null;\n        }\n\n        if (this.toggleSearch) {\n            this.toggleSearch.complete();\n            this.toggleSearch = null;\n        }\n\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    isLoggedIn(): boolean {\n        return this.authService.isEcmLoggedIn();\n    }\n\n    searchSubmit(event: any) {\n        this.submit.emit(event);\n        this.toggleSearchBar();\n    }\n\n    inputChange(event: any) {\n        this.searchChange.emit(event);\n    }\n\n    getAutoComplete(): string {\n        return this.autocomplete ? 'on' : 'off';\n    }\n\n    getMimeTypeIcon(node: NodeEntry): string {\n        const mimeType = this.getMimeType(node);\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n\n    getMimeType(node: NodeEntry): string {\n        let mimeType: string;\n\n        if (node.entry.content && node.entry.content.mimeType) {\n            mimeType = node.entry.content.mimeType;\n        }\n        if (node.entry.isFolder) {\n            mimeType = 'folder';\n        }\n        return mimeType;\n    }\n\n    isSearchBarActive() {\n        return this.subscriptAnimationState.value === 'active' && this.liveSearchEnabled;\n    }\n\n    toggleSearchBar() {\n        if (this.toggleSearch) {\n            this.toggleSearch.next();\n        }\n    }\n\n    elementClicked(item: any) {\n        if (item.entry) {\n            this.optionClicked.next(item);\n            this.toggleSearchBar();\n        }\n    }\n\n    onFocus($event): void {\n        this.focusSubject.next($event);\n    }\n\n    onBlur($event): void {\n        this.focusSubject.next($event);\n    }\n\n    activateToolbar() {\n        if (!this.isSearchBarActive()) {\n            this.toggleSearchBar();\n        }\n    }\n\n    selectFirstResult() {\n        if ( this.listResultElement && this.listResultElement.length > 0) {\n            const firstElement: MatListItem = <MatListItem> this.listResultElement.first;\n            firstElement._getHostElement().focus();\n        }\n    }\n\n    onRowArrowDown($event: KeyboardEvent): void {\n        const nextElement: any = this.getNextElementSibling(<Element> $event.target);\n        if (nextElement) {\n            nextElement.focus();\n        }\n    }\n\n    onRowArrowUp($event: KeyboardEvent): void {\n        const previousElement: any = this.getPreviousElementSibling(<Element> $event.target);\n        if (previousElement) {\n            previousElement.focus();\n        } else {\n            this.searchInput.nativeElement.focus();\n            this.focusSubject.next(new FocusEvent('focus'));\n        }\n    }\n\n    private setupFocusEventHandlers() {\n        const focusEvents: Observable<FocusEvent> = this.focusSubject\n            .pipe(\n                debounceTime(50),\n                filter(($event: any) => {\n                    return this.isSearchBarActive() && ($event.type === 'blur' || $event.type === 'focusout');\n                }),\n                takeUntil(this.onDestroy$)\n            );\n\n        focusEvents.subscribe(() => {\n            this.toggleSearchBar();\n        });\n    }\n\n    private getNextElementSibling(node: Element): Element {\n        return node.nextElementSibling;\n    }\n\n    private getPreviousElementSibling(node: Element): Element {\n        return node.previousElementSibling;\n    }\n\n    private toggleAnimation() {\n        if (this.dir === 'ltr') {\n            return this.subscriptAnimationState.value === 'inactive' ?\n                { value: 'active', params: { 'margin-left': 13 } } :\n                { value: 'inactive', params: { 'transform': 'translateX(82%)' } };\n        } else {\n            return this.subscriptAnimationState.value === 'inactive' ?\n                { value: 'active', params: { 'margin-right': 13 } } :\n                { value: 'inactive', params: { 'transform': 'translateX(-82%)' } };\n        }\n    }\n\n    private getAnimationState() {\n        if (this.dir === 'ltr') {\n            return this.expandable ?\n                { value: 'inactive', params: { 'transform': 'translateX(82%)' } } :\n                { value: 'no-animation' };\n        } else {\n            return this.expandable ?\n                { value: 'inactive', params: { 'transform': 'translateX(-82%)' } } :\n                { value: 'no-animation' };\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable: no-input-rename no-use-before-declare no-input-rename  */\n\nimport { ENTER, ESCAPE } from '@angular/cdk/keycodes';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nimport { Observable, Subject, Subscription, merge, of, fromEvent } from 'rxjs';\nimport { SearchComponent } from './search.component';\nimport { filter, switchMap, takeUntil } from 'rxjs/operators';\n\nexport const SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SearchTriggerDirective),\n    multi: true\n};\n\n/**\n * Directive selectors without adf- prefix will be deprecated on 3.0.0\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: `input[searchAutocomplete], textarea[searchAutocomplete]`,\n    host: {\n        'role': 'combobox',\n        '[attr.autocomplete]': 'autocomplete',\n        'aria-autocomplete': 'list',\n        '[attr.aria-expanded]': 'panelOpen.toString()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    providers: [SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class SearchTriggerDirective implements ControlValueAccessor, OnDestroy {\n    private onDestroy$: Subject<boolean> = new Subject<boolean>();\n\n    @Input('searchAutocomplete')\n    searchPanel: SearchComponent;\n\n    @Input()\n    autocomplete: string = 'off';\n\n    private _panelOpen: boolean = false;\n    private closingActionsSubscription: Subscription;\n    private escapeEventStream = new Subject<void>();\n\n    onChange: (value: any) => void = () => { };\n\n    onTouched = () => { };\n\n    constructor(private element: ElementRef,\n                private ngZone: NgZone,\n                private changeDetectorRef: ChangeDetectorRef,\n                @Optional() @Inject(DOCUMENT) private document: any) { }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n\n        if (this.escapeEventStream) {\n            this.escapeEventStream = null;\n        }\n        if ( this.closingActionsSubscription ) {\n            this.closingActionsSubscription.unsubscribe();\n        }\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen && this.searchPanel.showPanel;\n    }\n\n    openPanel(): void {\n        this.searchPanel.isOpen = this._panelOpen = true;\n        this.closingActionsSubscription = this.subscribeToClosingActions();\n    }\n\n    closePanel(): void {\n        if (this._panelOpen) {\n            this.closingActionsSubscription.unsubscribe();\n            this._panelOpen = false;\n            this.searchPanel.resetResults();\n            this.searchPanel.hidePanel();\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    get panelClosingActions(): Observable<any> {\n        return merge(\n            this.escapeEventStream,\n            this.outsideClickStream\n        );\n    }\n\n    private get outsideClickStream(): Observable<any> {\n        if (!this.document) {\n            return of(null);\n        }\n\n        return merge(\n            fromEvent(this.document, 'click'),\n            fromEvent(this.document, 'touchend')\n        ).pipe(\n            filter((event: MouseEvent | TouchEvent) => {\n                const clickTarget = event.target as HTMLElement;\n                return this._panelOpen && clickTarget !== this.element.nativeElement;\n            }),\n            takeUntil(this.onDestroy$)\n        );\n    }\n\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === ESCAPE && this.panelOpen) {\n            this.escapeEventStream.next();\n            event.stopPropagation();\n        } else if (keyCode === ENTER) {\n            this.escapeEventStream.next();\n            event.preventDefault();\n        }\n\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        if (document.activeElement === event.target) {\n            const inputValue: string = (event.target as HTMLInputElement).value;\n            this.onChange(inputValue);\n            if (inputValue) {\n                this.searchPanel.keyPressedStream.next(inputValue);\n                this.openPanel();\n            } else {\n                this.searchPanel.resetResults();\n                this.closePanel();\n            }\n        }\n    }\n\n    private isPanelOptionClicked(event: MouseEvent) {\n        let isPanelOption: boolean = false;\n        if ( event ) {\n            const clickTarget = event.target as HTMLElement;\n            isPanelOption = !this.isNoResultOption(event) &&\n                            !!this.searchPanel.panel &&\n                            !!this.searchPanel.panel.nativeElement.contains(clickTarget);\n        }\n        return isPanelOption;\n    }\n\n    private isNoResultOption(event: MouseEvent) {\n        return this.searchPanel.results.list ? this.searchPanel.results.list.entries.length === 0 : true;\n    }\n\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.ngZone.onStable.asObservable();\n        const optionChanges = this.searchPanel.keyPressedStream.asObservable();\n\n        return merge(firstStable, optionChanges)\n            .pipe(\n                switchMap(() => {\n                    this.searchPanel.setVisibility();\n                    return this.panelClosingActions;\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.searchPanel && this.searchPanel.displayWith ?\n            this.searchPanel.displayWith(value) : value;\n        const inputValue = toDisplay != null ? toDisplay : '';\n        this.element.nativeElement.value = inputValue;\n    }\n\n    private setValueAndClose(event: any | null): void {\n        if (this.isPanelOptionClicked(event) && !event.defaultPrevented) {\n            this.setTriggerValue(event.target.textContent.trim());\n            this.onChange(event.target.textContent.trim());\n            this.element.nativeElement.focus();\n        }\n        this.closePanel();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst DEFAULT_PAGE_SIZE = 5;\n\nexport class SearchFilterList<T> implements Iterable<T> {\n\n    private filteredItems: T[] = [];\n    private _filterText: string = '';\n\n    items: T[] = [];\n    pageSize: number = DEFAULT_PAGE_SIZE;\n    currentPageSize: number = DEFAULT_PAGE_SIZE;\n\n    get filterText(): string {\n        return this._filterText;\n    }\n\n    set filterText(value: string) {\n        this._filterText = value;\n        this.applyFilter();\n    }\n\n    private _filter: (item: T) => boolean = () => true;\n\n    get filter(): (item: T) => boolean {\n        return this._filter;\n    }\n\n    set filter(value: (item: T) => boolean ) {\n        this._filter = value;\n        this.applyFilter();\n    }\n\n    private applyFilter() {\n        if (this.filter) {\n            this.filteredItems = this.items.filter(this.filter);\n        } else {\n            this.filteredItems = this.items;\n        }\n        this.currentPageSize = this.pageSize;\n    }\n\n    /** Returns visible portion of the items.  */\n    get visibleItems(): T[] {\n        return this.filteredItems.slice(0, this.currentPageSize);\n    }\n\n    /** Returns entire collection length including items not displayed on the page. */\n    get length(): number {\n        return this.items.length;\n    }\n\n    /** Detects whether more items can be displayed. */\n    get canShowMoreItems(): boolean {\n        return this.filteredItems.length > this.currentPageSize;\n    }\n\n    /** Detects whether less items can be displayed. */\n    get canShowLessItems(): boolean {\n        return this.currentPageSize > this.pageSize;\n    }\n\n    /** Detects whether content fits single page. */\n    get fitsPage(): boolean {\n        return this.pageSize >= this.filteredItems.length;\n    }\n\n    constructor(items: T[] = [], pageSize?: number) {\n        this.items = items;\n        this.filteredItems = items;\n        this.pageSize = pageSize || DEFAULT_PAGE_SIZE;\n        this.currentPageSize = pageSize || DEFAULT_PAGE_SIZE;\n    }\n\n    /** Display more items. */\n    showMoreItems() {\n        if (this.canShowMoreItems) {\n            this.currentPageSize += this.pageSize;\n        }\n    }\n\n    /** Display less items. */\n    showLessItems() {\n        if (this.canShowLessItems) {\n            this.currentPageSize -= this.pageSize;\n        }\n    }\n\n    /** Reset entire collection and page settings. */\n    clear() {\n        this.currentPageSize = this.pageSize;\n        this.items = [];\n        this.filteredItems = [];\n        this.filterText = '';\n    }\n\n    addItem(item: T) {\n        if (!item) {\n            return;\n        }\n        this.items.push(item);\n        this.applyFilter();\n    }\n\n    deleteItem(item: T) {\n        const removeIndex = this.items.indexOf(item);\n        if (removeIndex > -1) {\n            this.items.splice(removeIndex, 1);\n            this.filteredItems.splice(removeIndex, 1);\n        }\n    }\n\n    [Symbol.iterator](): Iterator<T> {\n        let pointer = 0;\n        const items = this.visibleItems;\n\n        return {\n            next(): IteratorResult<T> {\n                if (pointer < items.length) {\n                    return {\n                        done: false,\n                        value: items[pointer++]\n                    };\n                } else {\n                    return {\n                        done: true,\n                        value: null\n                    };\n                }\n            }\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, OnDestroy } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material';\nimport { SearchService, TranslationService } from '@alfresco/adf-core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { FacetFieldBucket } from '../../facet-field-bucket.interface';\nimport { FacetField } from '../../facet-field.interface';\nimport { SearchFilterList } from './models/search-filter-list.model';\nimport { takeUntil } from 'rxjs/operators';\nimport { GenericBucket, GenericFacetResponse, ResultSetContext } from '@alfresco/js-api';\nimport { Subject } from 'rxjs';\n\n@Component({\n    selector: 'adf-search-filter',\n    templateUrl: './search-filter.component.html',\n    styleUrls: ['./search-filter.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-filter' }\n})\nexport class SearchFilterComponent implements OnInit, OnDestroy {\n\n    private DEFAULT_PAGE_SIZE = 5;\n\n    /** All facet field items to be displayed in the component. These are updated according to the response.\n     *  When a new search is performed, the already existing items are updated with the new bucket count values and\n     *  the newly received items are added to the responseFacets.\n     */\n    responseFacets: FacetField[] = null;\n\n    private facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;\n    facetQueriesLabel: string = 'Facet Queries';\n    facetExpanded = {\n        'default': false\n    };\n    displayResetButton: boolean;\n    selectedBuckets: Array<{ field: FacetField, bucket: FacetFieldBucket }> = [];\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(public queryBuilder: SearchQueryBuilderService,\n                private searchService: SearchService,\n                private translationService: TranslationService) {\n        if (queryBuilder.config && queryBuilder.config.facetQueries) {\n            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';\n            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;\n            this.facetExpanded['query'] = queryBuilder.config.facetQueries.expanded;\n        }\n        if (queryBuilder.config && queryBuilder.config.facetFields) {\n            this.facetExpanded['field'] = queryBuilder.config.facetFields.expanded;\n        }\n        if (queryBuilder.config && queryBuilder.config.facetIntervals) {\n            this.facetExpanded['interval'] = queryBuilder.config.facetIntervals.expanded;\n        }\n        this.displayResetButton = this.queryBuilder.config && !!this.queryBuilder.config.resetButton;\n\n        this.queryBuilder.updated\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => this.queryBuilder.execute());\n    }\n\n    ngOnInit() {\n        if (this.queryBuilder) {\n            this.queryBuilder.executed\n                .pipe(takeUntil(this.onDestroy$))\n                .subscribe(resultSetPaging => {\n                    this.onDataLoaded(resultSetPaging);\n                    this.searchService.dataLoaded.next(resultSetPaging);\n                });\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    private updateSelectedBuckets() {\n        if (this.responseFacets) {\n            this.selectedBuckets = [];\n            for (const field of this.responseFacets) {\n                if (field.buckets) {\n                    this.selectedBuckets.push(\n                        ...this.queryBuilder.getUserFacetBuckets(field.field)\n                            .filter((bucket) => bucket.checked)\n                            .map((bucket) => {\n                                return { field, bucket };\n                            })\n                    );\n                }\n            }\n        } else {\n            this.selectedBuckets = [];\n        }\n    }\n\n    onToggleBucket(event: MatCheckboxChange, field: FacetField, bucket: FacetFieldBucket) {\n        if (event && bucket) {\n            if (event.checked) {\n                this.selectFacetBucket(field, bucket);\n            } else {\n                this.unselectFacetBucket(field, bucket);\n            }\n        }\n    }\n\n    selectFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (bucket) {\n            bucket.checked = true;\n            this.queryBuilder.addUserFacetBucket(field, bucket);\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    unselectFacetBucket(field: FacetField, bucket: FacetFieldBucket) {\n        if (bucket) {\n            bucket.checked = false;\n            this.queryBuilder.removeUserFacetBucket(field, bucket);\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    canResetSelectedBuckets(field: FacetField): boolean {\n        if (field && field.buckets) {\n            return field.buckets.items.some((bucket) => bucket.checked);\n        }\n        return false;\n    }\n\n    resetSelectedBuckets(field: FacetField) {\n        if (field && field.buckets) {\n            for (const bucket of field.buckets.items) {\n                bucket.checked = false;\n                this.queryBuilder.removeUserFacetBucket(field, bucket);\n            }\n            this.updateSelectedBuckets();\n            this.queryBuilder.update();\n        }\n    }\n\n    resetAllSelectedBuckets() {\n        this.responseFacets.forEach((field) => {\n            if (field && field.buckets) {\n                for (const bucket of field.buckets.items) {\n                    bucket.checked = false;\n                    this.queryBuilder.removeUserFacetBucket(field, bucket);\n                }\n                this.updateSelectedBuckets();\n            }\n        });\n        this.queryBuilder.update();\n    }\n\n    resetAll() {\n        this.resetAllSelectedBuckets();\n        this.responseFacets = null;\n    }\n\n    shouldExpand(field: FacetField): boolean {\n        return this.facetExpanded[field.type] || this.facetExpanded['default'];\n    }\n\n    onDataLoaded(data: any) {\n        const context = data.list.context;\n\n        if (context) {\n            this.parseFacets(context);\n        } else {\n            this.responseFacets = null;\n        }\n    }\n\n    private parseFacets(context: ResultSetContext) {\n        this.parseFacetFields(context);\n        this.parseFacetIntervals(context);\n        this.parseFacetQueries(context);\n    }\n\n    private parseFacetItems(context: ResultSetContext, configFacetFields: FacetField[], itemType: string) {\n        configFacetFields.forEach((field) => {\n            const responseField = this.findFacet(context, itemType, field.label);\n            const responseBuckets = this.getResponseBuckets(responseField, field)\n                .filter(this.getFilterByMinCount(field.mincount));\n            const alreadyExistingField = this.findResponseFacet(itemType, field.label);\n\n            if (alreadyExistingField) {\n                const alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];\n\n                this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);\n            } else if (responseField) {\n\n                const bucketList = new SearchFilterList<FacetFieldBucket>(responseBuckets, field.pageSize);\n                bucketList.filter = this.getBucketFilterFunction(bucketList);\n\n                if (!this.responseFacets) {\n                    this.responseFacets = [];\n                }\n                this.responseFacets.push(<FacetField> {\n                    ...field,\n                    type: responseField.type || itemType,\n                    label: field.label,\n                    pageSize: field.pageSize | this.DEFAULT_PAGE_SIZE,\n                    currentPageSize: field.pageSize | this.DEFAULT_PAGE_SIZE,\n                    buckets: bucketList\n                });\n            }\n        });\n    }\n\n    private parseFacetFields(context: ResultSetContext) {\n        const configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];\n        this.parseFacetItems(context, configFacetFields, 'field');\n    }\n\n    private parseFacetIntervals(context: ResultSetContext) {\n        const configFacetIntervals = this.queryBuilder.config.facetIntervals && this.queryBuilder.config.facetIntervals.intervals || [];\n        this.parseFacetItems(context, configFacetIntervals, 'interval');\n    }\n\n    private parseFacetQueries(context: ResultSetContext) {\n        const configFacetQueries = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.queries || [];\n        const configGroups = configFacetQueries.reduce((acc, query) => {\n            const group = this.queryBuilder.getQueryGroup(query);\n            if (acc[group]) {\n                acc[group].push(query);\n            } else {\n                acc[group] = [query];\n            }\n            return acc;\n        }, []);\n\n        const mincount = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.mincount;\n        const mincountFilter = this.getFilterByMinCount(mincount);\n\n        Object.keys(configGroups).forEach((group) => {\n            const responseField = this.findFacet(context, 'query', group);\n            const responseBuckets = this.getResponseQueryBuckets(responseField, configGroups[group])\n                .filter(mincountFilter);\n            const alreadyExistingField = this.findResponseFacet('query', group);\n\n            if (alreadyExistingField) {\n                const alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];\n\n                this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);\n            } else if (responseField) {\n\n                const bucketList = new SearchFilterList<FacetFieldBucket>(responseBuckets, this.facetQueriesPageSize);\n                bucketList.filter = this.getBucketFilterFunction(bucketList);\n\n                if (!this.responseFacets) {\n                    this.responseFacets = [];\n                }\n                this.responseFacets.push(<FacetField> {\n                    field: group,\n                    type: responseField.type || 'query',\n                    label: group,\n                    pageSize: this.DEFAULT_PAGE_SIZE,\n                    currentPageSize: this.DEFAULT_PAGE_SIZE,\n                    buckets: bucketList\n                });\n            }\n        });\n\n    }\n\n    private getResponseBuckets(responseField: GenericFacetResponse, configField: FacetField): FacetFieldBucket[] {\n        return ((responseField && responseField.buckets) || []).map((respBucket) => {\n\n            respBucket['count'] = this.getCountValue(respBucket);\n            respBucket.filterQuery = respBucket.filterQuery || this.getCorrespondingFilterQuery(configField, respBucket.label);\n            return <FacetFieldBucket> {\n                ...respBucket,\n                checked: false,\n                display: respBucket.display,\n                label: respBucket.label\n            };\n        });\n    }\n\n    private getResponseQueryBuckets(responseField: GenericFacetResponse, configGroup: any): FacetFieldBucket[] {\n        return (configGroup || []).map((query) => {\n            const respBucket = ((responseField && responseField.buckets) || [])\n                .find((bucket) => bucket.label === query.label);\n\n            respBucket['count'] = this.getCountValue(respBucket);\n            return <FacetFieldBucket> {\n                ...respBucket,\n                checked: false,\n                display: respBucket.display,\n                label: respBucket.label\n            };\n        });\n    }\n\n    private getCountValue(bucket: GenericBucket): number {\n        return (!!bucket && !!bucket.metrics && bucket.metrics[0] && bucket.metrics[0].value && bucket.metrics[0].value.count)\n            || 0;\n    }\n\n    getBucketCountDisplay(bucket: FacetFieldBucket): string {\n        return bucket.count === null ? '' : `(${bucket.count})`;\n    }\n\n    private getFilterByMinCount(mincountInput: number) {\n        return (bucket) => {\n            let mincount = mincountInput;\n            if (mincount === undefined) {\n                mincount = 1;\n            }\n            return bucket.count >= mincount;\n        };\n    }\n\n    private getCorrespondingFilterQuery (configFacetItem: FacetField, bucketLabel: string): string {\n        let filterQuery = null;\n\n        if (configFacetItem.field && bucketLabel) {\n\n            if (configFacetItem.sets) {\n                const configSet = configFacetItem.sets.find((set) => bucketLabel === set.label);\n\n                if (configSet) {\n                    filterQuery = this.buildIntervalQuery(configFacetItem.field, configSet);\n                }\n\n            } else {\n                filterQuery = `${configFacetItem.field}:\"${bucketLabel}\"`;\n            }\n        }\n\n        return filterQuery;\n    }\n\n    private buildIntervalQuery(fieldName: string, interval: any): string {\n        const start = interval.start;\n        const end = interval.end;\n        const startLimit = (interval.startInclusive === undefined || interval.startInclusive === true) ? '[' : '<';\n        const endLimit = (interval.endInclusive === undefined || interval.endInclusive === true) ? ']' : '>';\n\n        return `${fieldName}:${startLimit}\"${start}\" TO \"${end}\"${endLimit}`;\n    }\n\n    private findFacet(context: ResultSetContext, itemType: string, fieldLabel: string): GenericFacetResponse {\n        return (context.facets || []).find((response) => response.type === itemType && response.label === fieldLabel) || {};\n    }\n\n    private findResponseFacet(itemType: string, fieldLabel: string): FacetField {\n        return (this.responseFacets || []).find((response) => response.type === itemType && response.label === fieldLabel);\n    }\n\n    private updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets) {\n        const bucketsToDelete = [];\n\n        alreadyExistingBuckets\n            .map((bucket) => {\n                const responseBucket = ((responseField && responseField.buckets) || []).find((respBucket) => respBucket.label === bucket.label);\n\n                if (!responseBucket) {\n                    bucketsToDelete.push(bucket);\n                }\n                bucket.count = this.getCountValue(responseBucket);\n                return bucket;\n            });\n\n        const hasSelection = this.selectedBuckets\n            .find((selBuckets) => alreadyExistingField.label === selBuckets.field.label && alreadyExistingField.type === selBuckets.field.type);\n\n        if (!hasSelection && bucketsToDelete.length) {\n            bucketsToDelete.forEach((bucket) => {\n                alreadyExistingField.buckets.deleteItem(bucket);\n            });\n        }\n\n        responseBuckets.forEach((respBucket) => {\n            const existingBucket = alreadyExistingBuckets.find((oldBucket) => oldBucket.label === respBucket.label);\n\n            if (!existingBucket) {\n                alreadyExistingField.buckets.addItem(respBucket);\n            }\n        });\n    }\n\n    private getBucketFilterFunction (bucketList) {\n        return (bucket: FacetFieldBucket): boolean => {\n            if (bucket && bucketList.filterText) {\n                const pattern = (bucketList.filterText || '').toLowerCase();\n                const label = (this.translationService.instant(bucket.display) || this.translationService.instant(bucket.label)).toLowerCase();\n                return this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);\n            }\n            return true;\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\n\n@Component({\n    selector: 'adf-search-text',\n    templateUrl: './search-text.component.html',\n    styleUrls: ['./search-text.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-text' }\n})\nexport class SearchTextComponent implements SearchWidget, OnInit {\n\n    /** The content of the text box. */\n    @Input()\n    value = '';\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n\n    ngOnInit() {\n        if (this.context && this.settings && this.settings.pattern) {\n            const pattern = new RegExp(this.settings.pattern, 'g');\n            const match = pattern.exec(this.context.queryFragments[this.id] || '');\n\n            if (match && match.length > 1) {\n                this.value = match[1];\n            }\n        }\n    }\n\n    reset() {\n        this.value = '';\n        this.updateQuery(null);\n    }\n\n    onChangedHandler(event) {\n        this.value = event.target.value;\n        this.updateQuery(this.value);\n    }\n\n    private updateQuery(value: string) {\n        if (this.context && this.settings && this.settings.field) {\n            this.context.queryFragments[this.id] = value ? `${this.settings.field}:'${value}'` : '';\n            this.context.update();\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { MatRadioChange } from '@angular/material';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterList } from '../search-filter/models/search-filter-list.model';\n\nexport interface SearchRadioOption {\n    name: string;\n    value: string;\n}\n\n@Component({\n    selector: 'adf-search-radio',\n    templateUrl: './search-radio.component.html',\n    styleUrls: ['./search-radio.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-radio' }\n})\nexport class SearchRadioComponent implements SearchWidget, OnInit {\n\n    /** The value of the selected radio button. */\n    @Input()\n    value: string;\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n    options: SearchFilterList<SearchRadioOption>;\n    pageSize = 5;\n\n    constructor() {\n        this.options = new SearchFilterList<SearchRadioOption>();\n    }\n\n    ngOnInit() {\n        if (this.settings) {\n            this.pageSize = this.settings.pageSize || 5;\n\n            if (this.settings.options && this.settings.options.length > 0) {\n                this.options = new SearchFilterList<SearchRadioOption>(\n                    this.settings.options, this.pageSize\n                );\n            }\n        }\n\n        const initialValue = this.getSelectedValue();\n        if (initialValue !== null) {\n            this.setValue(initialValue);\n        }\n    }\n\n    private getSelectedValue(): string {\n        const options: any[] = this.settings['options'] || [];\n        if (options && options.length > 0) {\n            let selected = options.find((opt) => opt.default);\n            if (!selected) {\n                selected = options[0];\n            }\n            return selected.value;\n        }\n        return null;\n    }\n\n    private setValue(newValue: string) {\n        this.value = newValue;\n        this.context.queryFragments[this.id] = newValue;\n        this.context.update();\n    }\n\n    changeHandler(event: MatRadioChange) {\n        this.setValue(event.value);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit, Input } from '@angular/core';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { MatSliderChange } from '@angular/material';\n\n@Component({\n    selector: 'adf-search-slider',\n    templateUrl: './search-slider.component.html',\n    styleUrls: ['./search-slider.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-slider' }\n})\nexport class SearchSliderComponent implements SearchWidget, OnInit {\n\n    id: string;\n    settings: SearchWidgetSettings;\n    context: SearchQueryBuilderService;\n    step: number;\n    min: number;\n    max: number;\n    thumbLabel = false;\n\n    /** The numeric value represented by the slider. */\n    @Input()\n    value: number | null;\n\n    ngOnInit() {\n        if (this.settings) {\n            if (this.settings.hasOwnProperty('min')) {\n                this.min = this.settings['min'];\n            }\n\n            if (this.settings.hasOwnProperty('max')) {\n                this.max = this.settings['max'];\n            }\n\n            if (this.settings.hasOwnProperty('step')) {\n                this.step = this.settings['step'];\n            }\n\n            this.thumbLabel = this.settings['thumbLabel'] ? true : false;\n        }\n    }\n\n    reset() {\n        this.value = this.min || 0;\n        this.updateQuery(null);\n    }\n\n    onChangedHandler(event: MatSliderChange) {\n        this.value = event.value;\n        this.updateQuery(this.value);\n    }\n\n    private updateQuery(value: number | null) {\n        if (this.id && this.context && this.settings && this.settings.field) {\n            if (value === null) {\n                this.context.queryFragments[this.id] = '';\n            } else {\n                this.context.queryFragments[this.id] = `${this.settings.field}:[0 TO ${value}]`;\n            }\n            this.context.update();\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorStateMatcher } from '@angular/material';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\n\nexport class LiveErrorStateMatcher implements ErrorStateMatcher {\n\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        const isSubmitted = form && form.submitted;\n        return !!(control && control.invalid && (control.dirty || control.touched || (!control.pristine && isSubmitted)));\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnInit, Component, ViewEncapsulation } from '@angular/core';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';\n\n@Component({\n    selector: 'adf-search-number-range',\n    templateUrl: './search-number-range.component.html',\n    styleUrls: ['./search-number-range.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-number-range' }\n})\nexport class SearchNumberRangeComponent implements SearchWidget, OnInit {\n\n    from: FormControl;\n    to: FormControl;\n\n    form: FormGroup;\n    matcher = new LiveErrorStateMatcher();\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n\n    field: string;\n    format = '[{FROM} TO {TO}]';\n\n    validators: Validators;\n\n    ngOnInit(): void {\n\n        if (this.settings) {\n            this.field = this.settings.field;\n            this.format = this.settings.format || '[{FROM} TO {TO}]';\n        }\n\n        this.validators = Validators.compose([\n            Validators.required,\n            Validators.pattern(/^-?(0|[1-9]\\d*)?$/),\n            Validators.min(0)\n        ]);\n\n        this.from = new FormControl('', this.validators);\n        this.to = new FormControl('', this.validators);\n\n        this.form = new FormGroup({\n            from: this.from,\n            to: this.to\n        }, this.formValidator);\n    }\n\n    formValidator(formGroup: FormGroup) {\n        return parseInt(formGroup.get('from').value, 10) < parseInt(formGroup.get('to').value, 10) ? null : {'mismatch': true};\n    }\n\n    apply(model: { from: string, to: string }, isValid: boolean) {\n        if (isValid && this.id && this.context && this.field) {\n            const map = new Map<string, string>();\n            map.set('FROM', model.from);\n            map.set('TO', model.to);\n\n            const value = this.formatString(this.format, map);\n\n            this.context.queryFragments[this.id] = `${this.field}:${value}`;\n            this.context.update();\n        }\n    }\n\n    private formatString(str: string, map: Map<string, string>): string {\n        let result = str;\n\n        map.forEach((value, key) => {\n            const expr = new RegExp('{' + key + '}', 'gm');\n            result = result.replace(expr, value);\n        });\n\n        return result;\n    }\n\n    reset() {\n        this.form.reset({\n            from: '',\n            to: ''\n        });\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, OnInit } from '@angular/core';\nimport { MatCheckboxChange } from '@angular/material';\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterList } from '../search-filter/models/search-filter-list.model';\n\nexport interface SearchListOption {\n    name: string;\n    value: string;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'adf-search-check-list',\n    templateUrl: './search-check-list.component.html',\n    styleUrls: ['./search-check-list.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-check-list' }\n})\nexport class SearchCheckListComponent implements SearchWidget, OnInit {\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n    options: SearchFilterList<SearchListOption>;\n    operator: string = 'OR';\n    pageSize = 5;\n\n    constructor() {\n        this.options = new SearchFilterList<SearchListOption>();\n    }\n\n    ngOnInit(): void {\n        if (this.settings) {\n            this.operator = this.settings.operator || 'OR';\n            this.pageSize = this.settings.pageSize || 5;\n\n            if (this.settings.options && this.settings.options.length > 0) {\n                this.options = new SearchFilterList(this.settings.options, this.pageSize);\n            }\n        }\n    }\n\n    reset() {\n        this.options.items.forEach((opt) => {\n            opt.checked = false;\n        });\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n\n    changeHandler(event: MatCheckboxChange, option: any) {\n        option.checked = event.checked;\n        this.flush();\n    }\n\n    flush() {\n        const checkedValues = this.options.items\n            .filter((option) => option.checked)\n            .map((option) => option.value);\n\n        const query = checkedValues.join(` ${this.operator} `);\n\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = query;\n            this.context.update();\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnInit, Component, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MomentDateAdapter, MOMENT_DATE_FORMATS } from '@alfresco/adf-core';\n\nimport { SearchWidget } from '../../search-widget.interface';\nimport { SearchWidgetSettings } from '../../search-widget-settings.interface';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { LiveErrorStateMatcher } from '../../forms/live-error-state-matcher';\nimport { Moment } from 'moment';\nimport { UserPreferencesService, UserPreferenceValues } from '@alfresco/adf-core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\ndeclare let moment: any;\n\nconst DEFAULT_FORMAT_DATE: string = 'DD/MM/YYYY';\n\n@Component({\n    selector: 'adf-search-date-range',\n    templateUrl: './search-date-range.component.html',\n    styleUrls: ['./search-date-range.component.scss'],\n    providers: [\n        {provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE]},\n        {provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS}\n    ],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-date-range' }\n})\nexport class SearchDateRangeComponent implements SearchWidget, OnInit, OnDestroy {\n\n    from: FormControl;\n    to: FormControl;\n\n    form: FormGroup;\n    matcher = new LiveErrorStateMatcher();\n\n    id: string;\n    settings?: SearchWidgetSettings;\n    context?: SearchQueryBuilderService;\n    maxDate: any;\n    datePickerDateFormat = DEFAULT_FORMAT_DATE;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(private dateAdapter: DateAdapter<Moment>,\n                private userPreferencesService: UserPreferencesService) {\n    }\n\n    getFromValidationMessage(): string {\n        return this.from.hasError('invalidOnChange') || this.hasParseError(this.from) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :\n            this.from.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :\n            this.from.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :\n            '';\n    }\n\n    getToValidationMessage(): string {\n        return this.to.hasError('invalidOnChange') || this.hasParseError(this.to) ? 'SEARCH.FILTER.VALIDATION.INVALID-DATE' :\n            this.to.hasError('matDatepickerMin') ? 'SEARCH.FILTER.VALIDATION.NO-DAYS' :\n            this.to.hasError('matDatepickerMax') ? 'SEARCH.FILTER.VALIDATION.BEYOND-MAX-DATE' :\n            this.to.hasError('required') ? 'SEARCH.FILTER.VALIDATION.REQUIRED-VALUE' :\n            '';\n    }\n\n    ngOnInit() {\n        if (this.settings) {\n            this.datePickerDateFormat = this.settings.dateFormat || DEFAULT_FORMAT_DATE;\n        }\n        const theCustomDateAdapter = <MomentDateAdapter> <any> this.dateAdapter;\n        theCustomDateAdapter.overrideDisplayFormat = this.datePickerDateFormat;\n\n        this.userPreferencesService\n            .select(UserPreferenceValues.Locale)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(locale => this.setLocale(locale));\n\n        const validators = Validators.compose([\n            Validators.required\n        ]);\n\n        this.from = new FormControl('', validators);\n        this.to = new FormControl('', validators);\n\n        this.form = new FormGroup({\n            from: this.from,\n            to: this.to\n        });\n\n        this.maxDate = this.dateAdapter.today().startOf('day');\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    apply(model: { from: string, to: string }, isValid: boolean) {\n        if (isValid && this.id && this.context && this.settings && this.settings.field) {\n            const start = moment(model.from).startOf('day').format();\n            const end = moment(model.to).endOf('day').format();\n\n            this.context.queryFragments[this.id] = `${this.settings.field}:['${start}' TO '${end}']`;\n            this.context.update();\n        }\n    }\n\n    reset() {\n        this.form.reset({\n            from: '',\n            to: ''\n        });\n        if (this.id && this.context) {\n            this.context.queryFragments[this.id] = '';\n            this.context.update();\n        }\n    }\n\n    onChangedHandler(event: any, formControl: FormControl) {\n        const inputValue = event.srcElement.value;\n\n        const formatDate = this.dateAdapter.parse(inputValue, this.datePickerDateFormat);\n        if (formatDate && formatDate.isValid()) {\n            formControl.setValue(formatDate);\n        } else if (formatDate) {\n            formControl.setErrors({\n                'invalidOnChange': true\n            });\n        } else {\n            formControl.setErrors({\n                'required': true\n            });\n        }\n    }\n\n    setLocale(locale) {\n        this.dateAdapter.setLocale(locale);\n        moment.locale(locale);\n    }\n\n    hasParseError(formControl) {\n        return formControl.hasError('matDatepickerParse') && formControl.getError('matDatepickerParse').text;\n    }\n\n    forcePlaceholder(event: any) {\n        event.srcElement.click();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable, Type } from '@angular/core';\nimport { SearchTextComponent } from '../search-text/search-text.component';\nimport { SearchRadioComponent } from '../search-radio/search-radio.component';\nimport { SearchSliderComponent } from '../search-slider/search-slider.component';\nimport { SearchNumberRangeComponent } from '../search-number-range/search-number-range.component';\nimport { SearchCheckListComponent } from '../search-check-list/search-check-list.component';\nimport { SearchDateRangeComponent } from '../search-date-range/search-date-range.component';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class SearchFilterService {\n\n    /**\n     * Contains string-to-type mappings for registered widgets.\n     */\n    widgets: { [id: string]: Type<{}> } = {\n        'text': SearchTextComponent,\n        'radio': SearchRadioComponent,\n        'slider': SearchSliderComponent,\n        'number-range': SearchNumberRangeComponent,\n        'check-list': SearchCheckListComponent,\n        'date-range': SearchDateRangeComponent\n    };\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input } from '@angular/core';\nimport { SearchFilterComponent } from '../../components/search-filter/search-filter.component';\n\n@Component({\n    selector: 'adf-search-chip-list',\n    templateUrl: './search-chip-list.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-chip-list' }\n})\nexport class SearchChipListComponent {\n\n    /** Search filter to supply the data for the chips. */\n    @Input()\n    searchFilter: SearchFilterComponent;\n\n    /** Flag used to enable the display of a clear-all-filters button. */\n    @Input()\n    clearAll: boolean = false;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchSortingDefinition } from '../../search-sorting-definition.interface';\n\n@Component({\n    selector: 'adf-search-sorting-picker',\n    templateUrl: './search-sorting-picker.component.html',\n    styleUrls: ['./search-sorting-picker.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-sorting-picker' }\n})\nexport class SearchSortingPickerComponent implements OnInit {\n\n    options: SearchSortingDefinition[] = [];\n    value: string;\n    ascending: boolean;\n\n    constructor(private queryBuilder: SearchQueryBuilderService) {}\n\n    ngOnInit() {\n        this.options = this.queryBuilder.getSortingOptions();\n\n        const primary = this.queryBuilder.getPrimarySorting();\n        if (primary) {\n            this.value = primary.key;\n            this.ascending = primary.ascending;\n        }\n    }\n\n    onValueChanged(key: string) {\n        this.value = key;\n        this.ascending = this.getSortingOrder();\n        this.applySorting();\n    }\n\n    onSortingChanged(ascending: boolean) {\n        this.ascending = ascending;\n        this.applySorting();\n    }\n\n    private findOptionByKey(key: string): SearchSortingDefinition {\n        if (key) {\n            return this.options.find((opt) => opt.key === key);\n        }\n        return null;\n    }\n\n    private applySorting() {\n        const option = this.findOptionByKey(this.value);\n        if (option) {\n            this.queryBuilder.sorting = [{\n                ...option,\n                ascending: this.ascending\n            }];\n            this.queryBuilder.update();\n        }\n    }\n\n    private getSortingOrder(): boolean {\n        const option = this.findOptionByKey(this.value);\n        if (option) {\n            return option.ascending;\n        }\n\n        return this.queryBuilder.getPrimarySorting().ascending;\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewChild, ViewContainerRef, OnInit, OnDestroy, ComponentRef, ComponentFactoryResolver } from '@angular/core';\nimport { SearchQueryBuilderService } from '../../search-query-builder.service';\nimport { SearchFilterService } from '../search-filter/search-filter.service';\n\n@Component({\n    selector: 'adf-search-widget-container',\n    template: '<div #content></div>'\n})\nexport class SearchWidgetContainerComponent implements OnInit, OnDestroy {\n\n    @ViewChild('content', { read: ViewContainerRef })\n    content: ViewContainerRef;\n\n    @Input()\n    id: string;\n\n    @Input()\n    selector: string;\n\n    @Input()\n    settings: any;\n\n    @Input()\n    config: any;\n\n    private componentRef: ComponentRef<any>;\n\n    constructor(\n        private searchFilterService: SearchFilterService,\n        private queryBuilder: SearchQueryBuilderService,\n        private componentFactoryResolver: ComponentFactoryResolver) {\n    }\n\n    ngOnInit() {\n        const componentType = this.searchFilterService.widgets[this.selector];\n        if (componentType) {\n            const factory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n            if (factory) {\n                this.content.clear();\n                this.componentRef = this.content.createComponent(factory, 0);\n                this.setupWidget(this.componentRef);\n            }\n        }\n    }\n\n    private setupWidget(ref: ComponentRef<any>) {\n        if (ref && ref.instance) {\n            ref.instance.id = this.id;\n            ref.instance.settings = { ...this.settings };\n            ref.instance.context = this.queryBuilder;\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.componentRef) {\n            this.componentRef.destroy();\n            this.componentRef = null;\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\n\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { SearchTriggerDirective } from './components/search-trigger.directive';\n\nimport { SearchControlComponent } from './components/search-control.component';\nimport { SearchComponent } from './components/search.component';\nimport { EmptySearchResultComponent } from './components/empty-search-result.component';\nimport { SearchWidgetContainerComponent } from './components/search-widget-container/search-widget-container.component';\nimport { SearchFilterComponent } from './components/search-filter/search-filter.component';\nimport { SearchChipListComponent } from './components/search-chip-list/search-chip-list.component';\nimport { SearchTextComponent } from './components/search-text/search-text.component';\nimport { SearchRadioComponent } from './components/search-radio/search-radio.component';\nimport { SearchSliderComponent } from './components/search-slider/search-slider.component';\nimport { SearchNumberRangeComponent } from './components/search-number-range/search-number-range.component';\nimport { SearchCheckListComponent } from './components/search-check-list/search-check-list.component';\nimport { SearchDateRangeComponent } from './components/search-date-range/search-date-range.component';\nimport { SearchSortingPickerComponent } from './components/search-sorting-picker/search-sorting-picker.component';\n\nexport const ALFRESCO_SEARCH_DIRECTIVES: any[] = [\n    SearchComponent,\n    SearchControlComponent,\n    SearchTriggerDirective,\n    EmptySearchResultComponent,\n    SearchFilterComponent,\n    SearchChipListComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    declarations: [\n        ...ALFRESCO_SEARCH_DIRECTIVES,\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent,\n        SearchSortingPickerComponent\n    ],\n    exports: [\n        ...ALFRESCO_SEARCH_DIRECTIVES,\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent,\n        SearchSortingPickerComponent\n    ],\n    entryComponents: [\n        SearchWidgetContainerComponent,\n        SearchTextComponent,\n        SearchRadioComponent,\n        SearchSliderComponent,\n        SearchNumberRangeComponent,\n        SearchCheckListComponent,\n        SearchDateRangeComponent\n    ]\n})\nexport class SearchModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport { SitesService, LogService } from '@alfresco/adf-core';\nimport { SitePaging, SiteEntry } from '@alfresco/js-api';\nimport { MatSelect } from '@angular/material';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nexport enum Relations {\n    Members = 'members',\n    Containers = 'containers'\n}\n\n@Component({\n    selector: 'adf-sites-dropdown',\n    styleUrls: ['./sites-dropdown.component.scss'],\n    templateUrl: './sites-dropdown.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-sites-dropdown' }\n})\nexport class DropdownSitesComponent implements OnInit, OnDestroy {\n\n    /** Hide the \"My Files\" option. */\n    @Input()\n    hideMyFiles: boolean = false;\n\n    /** A custom list of sites to be displayed by the dropdown. If no value\n     * is given, the sites of the current user are displayed by default. A\n     * list of objects only with properties 'title' and 'guid' is enough to\n     * be able to display the dropdown.\n     */\n    @Input()\n    siteList: SitePaging = null;\n\n    /** Id of the selected site */\n    @Input()\n    value: string = null;\n\n    /** Text or a translation key to act as a placeholder. Default value is the\n     * key \"DROPDOWN.PLACEHOLDER_LABEL\".\n     */\n    @Input()\n    placeholder: string = 'DROPDOWN.PLACEHOLDER_LABEL';\n\n    /** Filter for the results of the sites query. Possible values are\n     * \"members\" and \"containers\". When \"members\" is used, the site list\n     * will be restricted to the sites that the user is a member of.\n     */\n    @Input()\n    relations: string;\n\n    /** Emitted when the user selects a site. When the default option is selected,\n     * an empty model is emitted.\n     */\n    @Output()\n    change: EventEmitter<SiteEntry> = new EventEmitter();\n\n    @ViewChild('siteSelect')\n    siteSelect: MatSelect;\n\n    private loading = true;\n    private skipCount = 0;\n    private readonly MAX_ITEMS = 50;\n    private readonly ITEM_HEIGHT = 45;\n    private readonly ITEM_HEIGHT_TO_WAIT_BEFORE_LOAD_NEXT = (this.ITEM_HEIGHT * (this.MAX_ITEMS / 2));\n    private onDestroy$ = new Subject<boolean>();\n\n    selected: SiteEntry = null;\n    MY_FILES_VALUE = '-my-';\n\n    constructor(private sitesService: SitesService,\n                private logService: LogService) {\n    }\n\n    ngOnInit() {\n        this.siteSelect.openedChange\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => {\n                if (this.siteSelect.panelOpen) {\n                    this.siteSelect.panel.nativeElement.addEventListener('scroll', (event) => this.loadAllOnScroll(event));\n                }\n            });\n\n        if (!this.siteList) {\n            this.loadSiteList();\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    loadAllOnScroll(event) {\n        if (this.isInfiniteScrollingEnabled() && this.isScrollInNextFetchArea(event)) {\n            this.loading = true;\n            this.loadSiteList();\n        }\n    }\n\n    isScrollInNextFetchArea(event) {\n        return event.target.scrollTop >= (event.target.scrollHeight - event.target.offsetHeight - this.ITEM_HEIGHT_TO_WAIT_BEFORE_LOAD_NEXT);\n    }\n\n    selectedSite(event: any) {\n        this.change.emit(event.value);\n    }\n\n    private loadSiteList() {\n        const extendedOptions: any = {\n            skipCount: this.skipCount,\n            maxItems: this.MAX_ITEMS\n        };\n\n        this.skipCount += this.MAX_ITEMS;\n\n        if (this.relations) {\n            extendedOptions.relations = [this.relations];\n        }\n\n        this.sitesService.getSites(extendedOptions).subscribe((sitePaging: SitePaging) => {\n\n                if (!this.siteList) {\n                    this.siteList = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;\n\n                    if (!this.hideMyFiles) {\n                        const siteEntry = new SiteEntry({\n                            entry: {\n                                id: '-my-',\n                                guid: '-my-',\n                                title: 'DROPDOWN.MY_FILES_OPTION'\n                            }\n                        });\n\n                        this.siteList.list.entries.unshift(siteEntry);\n\n                        if (!this.value) {\n                            this.value = '-my-';\n                        }\n                    }\n\n                } else {\n                    const siteList: SitePaging = this.relations === Relations.Members ? this.filteredResultsByMember(sitePaging) : sitePaging;\n\n                    this.siteList.list.entries = this.siteList.list.entries.concat(siteList.list.entries);\n                    this.siteList.list.pagination = sitePaging.list.pagination;\n                }\n\n                this.selected = this.siteList.list.entries.find((site: SiteEntry) => site.entry.id === this.value);\n\n                this.loading = false;\n            },\n            (error) => {\n                this.logService.error(error);\n            });\n    }\n\n    showLoading(): boolean {\n        return this.loading && (this.siteList && this.siteList.list.pagination && this.siteList.list.pagination.hasMoreItems);\n    }\n\n    isInfiniteScrollingEnabled(): boolean {\n        return !this.loading && (this.siteList && this.siteList.list.pagination && this.siteList.list.pagination.hasMoreItems);\n    }\n\n    private filteredResultsByMember(sites: SitePaging): SitePaging {\n        const loggedUserName = this.sitesService.getEcmCurrentLoggedUserName();\n        sites.list.entries = sites.list.entries.filter((site) => this.isCurrentUserMember(site, loggedUserName));\n        return sites;\n    }\n\n    private isCurrentUserMember(site, loggedUserName): boolean {\n        return site.entry.visibility === 'PUBLIC' ||\n            !!site.relations.members.list.entries.find((member) => {\n                return member.entry.id.toLowerCase() === loggedUserName.toLowerCase();\n            });\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DropdownSitesComponent } from './sites-dropdown.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        DropdownSitesComponent\n    ],\n    declarations: [\n        DropdownSitesComponent\n    ]\n})\nexport class SitesDropdownModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    ViewChild,\n    ViewEncapsulation,\n    OnDestroy\n} from '@angular/core';\nimport { MatSelect } from '@angular/material';\nimport { Node, PathElementEntity } from '@alfresco/js-api';\nimport { DocumentListComponent } from '../document-list';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-breadcrumb',\n    templateUrl: './breadcrumb.component.html',\n    styleUrls: ['./breadcrumb.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-breadcrumb'\n    }\n})\nexport class BreadcrumbComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** Active node, builds UI based on folderNode.path.elements collection. */\n    @Input()\n    folderNode: Node = null;\n\n    /** (optional) Name of the root element of the breadcrumb. You can use\n     * this property to rename \"Company Home\" to \"Personal Files\" for\n     * example. You can use an i18n resource key for the property value.\n     */\n    @Input()\n    root: string = null;\n\n    /** (optional) The id of the root element. You can use this property\n     * to set a custom element the breadcrumb should start with.\n     */\n    @Input()\n    rootId: string = null;\n\n    /** (optional) Document List component to operate with. The list will\n     * update when the breadcrumb is clicked.\n     */\n    @Input()\n    target: DocumentListComponent;\n\n    /** Transformation to be performed on the chosen/folder node before building\n     * the breadcrumb UI. Can be useful when custom formatting is needed for the\n     * breadcrumb. You can change the path elements from the node that are used to\n     * build the breadcrumb using this function.\n     */\n    @Input()\n    transform: (node) => any;\n\n    @ViewChild('dropdown')\n    dropdown: MatSelect;\n\n    /** Maximum number of nodes to display before wrapping them with a dropdown element.  */\n    @Input()\n    maxItems: number;\n\n    previousNodes: PathElementEntity[];\n    lastNodes: PathElementEntity[];\n\n    route: PathElementEntity[] = [];\n\n    private onDestroy$ = new Subject<boolean>();\n\n    get hasRoot(): boolean {\n        return !!this.root;\n    }\n\n    /** Emitted when the user clicks on a breadcrumb. */\n    @Output()\n    navigate = new EventEmitter<PathElementEntity>();\n\n    ngOnInit() {\n        this.transform = this.transform ? this.transform : null;\n\n        if (this.target) {\n            this.target.$folderNode\n                .pipe(takeUntil(this.onDestroy$))\n                .subscribe((folderNode: Node) => {\n                    this.folderNode = folderNode;\n                    this.recalculateNodes();\n                });\n        }\n    }\n\n    ngOnChanges(): void {\n        this.recalculateNodes();\n    }\n\n    protected recalculateNodes(): void {\n        const node: Node = this.transform ? this.transform(this.folderNode) : this.folderNode;\n\n        this.route = this.parseRoute(node);\n\n        if (this.maxItems && this.route.length > this.maxItems) {\n            this.lastNodes = this.route.slice(this.route.length - this.maxItems);\n            this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);\n            this.previousNodes.reverse();\n        } else {\n            this.lastNodes = this.route;\n            this.previousNodes = null;\n        }\n    }\n\n    open(): void {\n        if (this.dropdown) {\n            this.dropdown.open();\n        }\n    }\n\n    hasPreviousNodes(): boolean {\n        return this.previousNodes ? true : false;\n    }\n\n    parseRoute(node: Node): PathElementEntity[] {\n        if (node && node.path) {\n            const route = <PathElementEntity[]> (node.path.elements || []).slice();\n\n            route.push(<PathElementEntity> {\n                id: node.id,\n                name: node.name,\n                node: node\n            });\n\n            const rootPos = this.getElementPosition(route, this.rootId);\n            if (rootPos > 0) {\n                route.splice(0, rootPos);\n            }\n\n            if (rootPos === -1 && this.rootId) {\n                route[0].id = this.rootId;\n            }\n\n            if (this.root) {\n                route[0].name = this.root;\n            }\n\n            return route;\n        }\n\n        return [];\n    }\n\n    private getElementPosition(route: PathElementEntity[], nodeId: string): number {\n        let position: number = -1;\n\n        if (route && route.length > 0 && nodeId) {\n            position = route.findIndex((el) => el.id === nodeId);\n        }\n\n        return position;\n    }\n\n    onRoutePathClick(route: PathElementEntity, event?: Event): void {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (route) {\n            this.navigate.emit(route);\n\n            if (this.target) {\n                this.target.navigateTo(route.id);\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, OnChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MatSelect } from '@angular/material';\nimport { PathElementEntity, Node } from '@alfresco/js-api';\nimport { BreadcrumbComponent } from './breadcrumb.component';\n\n@Component({\n    selector: 'adf-dropdown-breadcrumb',\n    templateUrl: './dropdown-breadcrumb.component.html',\n    styleUrls: ['./dropdown-breadcrumb.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-dropdown-breadcrumb'\n    }\n})\nexport class DropdownBreadcrumbComponent extends BreadcrumbComponent implements OnChanges {\n\n    @ViewChild('dropdown')\n    dropdown: MatSelect;\n\n    currentNode: PathElementEntity;\n    previousNodes: PathElementEntity[];\n\n    /**\n     * Calculate the current and previous nodes from the route array\n     */\n    protected recalculateNodes(): void {\n        const node: Node = this.transform ? this.transform(this.folderNode) : this.folderNode;\n\n        this.route = this.parseRoute(node);\n        this.currentNode = this.route[this.route.length - 1];\n        this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();\n    }\n\n    /**\n     * Opens the node picker menu\n     */\n    open(): void {\n        if (this.dropdown) {\n            this.dropdown.open();\n        }\n    }\n\n    /**\n     * Return if route has more than one element (means: we are not in the root directory)\n     */\n    hasPreviousNodes(): boolean {\n        return this.previousNodes.length > 0;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { BreadcrumbComponent } from './breadcrumb.component';\nimport { DropdownBreadcrumbComponent } from './dropdown-breadcrumb.component';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ],\n    declarations: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ]\n})\nexport class BreadcrumbModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Inject, ViewEncapsulation, SecurityContext } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n    selector: 'adf-confirm-dialog',\n    templateUrl: './confirm.dialog.html',\n    styleUrls: ['./confirm.dialog.scss'],\n    host: { 'class': 'adf-confirm-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ConfirmDialogComponent {\n\n    title: string;\n    message: string;\n    yesLabel: string;\n    noLabel: string;\n    thirdOptionLabel: string;\n    htmlContent: string;\n\n    constructor(@Inject(MAT_DIALOG_DATA) data, private sanitizer: DomSanitizer) {\n        data = data || {};\n        this.title = data.title || 'ADF_CONFIRM_DIALOG.CONFIRM';\n        this.message = data.message || 'ADF_CONFIRM_DIALOG.MESSAGE';\n        this.yesLabel = data.yesLabel || 'ADF_CONFIRM_DIALOG.YES_LABEL';\n        this.thirdOptionLabel = data.thirdOptionLabel;\n        this.noLabel = data.noLabel || 'ADF_CONFIRM_DIALOG.NO_LABEL';\n        this.htmlContent = data.htmlContent;\n    }\n\n    public sanitizedHtmlContent() {\n        return this.sanitizer.sanitize(SecurityContext.HTML, this.htmlContent);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AlfrescoApiService, ContentService } from '@alfresco/adf-core';\nimport { Component, Input, OnChanges, ViewEncapsulation, EventEmitter, Output } from '@angular/core';\nimport { VersionsApi, Node, VersionEntry, VersionPaging } from '@alfresco/js-api';\nimport { MatDialog } from '@angular/material';\nimport { ConfirmDialogComponent } from '../dialogs/confirm.dialog';\n\n@Component({\n    selector: 'adf-version-list',\n    templateUrl: './version-list.component.html',\n    styleUrls: ['./version-list.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-version-list'\n    }\n})\nexport class VersionListComponent implements OnChanges {\n\n    private versionsApi: VersionsApi;\n    versions: VersionEntry[] = [];\n    isLoading = true;\n\n    /** The target node. */\n    @Input()\n    node: Node;\n\n    /** Toggles showing/hiding of comments */\n    @Input()\n    showComments = true;\n\n    /** Enable/disable downloading a version of the current node. */\n    @Input()\n    allowDownload = true;\n\n    /** Toggles showing/hiding of version actions */\n    @Input()\n    showActions = true;\n\n    /** Emitted when a version is restored */\n    @Output()\n    restored: EventEmitter<Node> = new EventEmitter<Node>();\n\n    /** Emitted when a version is deleted */\n    @Output()\n    deleted: EventEmitter<Node> = new EventEmitter<Node>();\n\n    constructor(private alfrescoApi: AlfrescoApiService,\n                private contentService: ContentService,\n                private dialog: MatDialog) {\n        this.versionsApi = this.alfrescoApi.versionsApi;\n    }\n\n    ngOnChanges() {\n        this.loadVersionHistory();\n    }\n\n    canUpdate(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'update') && this.versions.length > 1;\n    }\n\n    canDelete(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'delete') && this.versions.length > 1;\n    }\n\n    restore(versionId) {\n        if (this.canUpdate()) {\n            this.versionsApi\n                .revertVersion(this.node.id, versionId, { majorVersion: true, comment: '' })\n                .then(() =>\n                    this.alfrescoApi.nodesApi.getNodeInfo(\n                        this.node.id,\n                        { include: ['permissions', 'path', 'isFavorite', 'allowableOperations'] }\n                    )\n                )\n                .then((node) => this.onVersionRestored(node));\n        }\n    }\n\n    loadVersionHistory() {\n        this.isLoading = true;\n        this.versionsApi.listVersionHistory(this.node.id).then((versionPaging: VersionPaging) => {\n            this.versions = versionPaging.list.entries;\n            this.isLoading = false;\n        });\n    }\n\n    downloadVersion(versionId: string) {\n        if (this.allowDownload) {\n            const versionDownloadUrl = this.getVersionContentUrl(this.node.id, versionId, true);\n            this.downloadContent(versionDownloadUrl);\n        }\n    }\n\n    deleteVersion(versionId: string) {\n        if (this.canUpdate()) {\n            const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n                data: {\n                    title: 'ADF_VERSION_LIST.CONFIRM_DELETE.TITLE',\n                    message: 'ADF_VERSION_LIST.CONFIRM_DELETE.MESSAGE',\n                    yesLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.YES_LABEL',\n                    noLabel: 'ADF_VERSION_LIST.CONFIRM_DELETE.NO_LABEL'\n                },\n                minWidth: '250px'\n            });\n\n            dialogRef.afterClosed().subscribe((result) => {\n                if (result === true) {\n                    this.alfrescoApi.versionsApi\n                        .deleteVersion(this.node.id, versionId)\n                        .then(() => this.onVersionDeleted(this.node));\n                }\n            });\n        }\n    }\n\n    onVersionDeleted(node: any) {\n        this.loadVersionHistory();\n        this.deleted.emit(node);\n    }\n\n    onVersionRestored(node: any) {\n        this.loadVersionHistory();\n        this.restored.emit(node);\n    }\n\n    private getVersionContentUrl(nodeId: string, versionId: string, attachment?: boolean) {\n        const nodeDownloadUrl = this.alfrescoApi.contentApi.getContentUrl(nodeId, attachment);\n        return nodeDownloadUrl.replace('/content', '/versions/' + versionId + '/content');\n    }\n\n    downloadContent(url: string) {\n        if (url) {\n            const link = document.createElement('a');\n\n            link.style.display = 'none';\n            link.href = url;\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { VersionListComponent } from './version-list.component';\nimport { AppConfigService, ContentService, AlfrescoApiService } from '@alfresco/adf-core';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\n\n@Component({\n    selector: 'adf-version-manager',\n    templateUrl: './version-manager.component.html',\n    styleUrls: ['./version-manager.component.scss'],\n    animations: [\n        trigger('uploadToggle', [\n            state('open', style({ height: '175px', opacity: 1, visibility: 'visible' })),\n            state('close', style({ height: '0%', opacity: 0, visibility: 'hidden' })),\n            transition('open => close', [\n                style({ visibility: 'hidden' }),\n                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')\n            ]),\n            transition('close => open', [\n                style({ visibility: 'visible' }),\n                animate('0.4s cubic-bezier(0.25, 0.8, 0.25, 1)')\n            ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None\n})\nexport class VersionManagerComponent {\n\n    /** Target node to manage version history. */\n    @Input()\n    node: Node;\n\n    /** Toggles showing/hiding of comments. */\n    @Input()\n    showComments = true;\n\n    /** Enable/disable downloading a version of the current node. */\n    @Input()\n    allowDownload = true;\n\n    /** Emitted when a file is uploaded successfully. */\n    @Output()\n    uploadSuccess: EventEmitter<Node> = new EventEmitter<Node>();\n\n    /** Emitted when an error occurs during upload. */\n    @Output()\n    uploadError: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @ViewChild('versionList')\n    versionListComponent: VersionListComponent;\n\n    uploadState: string = 'close';\n\n    constructor(config: AppConfigService,\n                private contentService: ContentService,\n                private alfrescoApiService: AlfrescoApiService) {\n    }\n\n    refresh(node: Node) {\n        this.alfrescoApiService.nodeUpdated.next(node);\n        this.versionListComponent.loadVersionHistory();\n        this.uploadSuccess.emit(node);\n        this.uploadState = 'close';\n    }\n\n    onUploadSuccess(event: any) {\n        this.alfrescoApiService.nodeUpdated.next(event.value.entry);\n        this.versionListComponent.loadVersionHistory();\n        this.uploadSuccess.emit(event.value.entry);\n        this.uploadState = 'close';\n    }\n\n    onUploadError(event: any) {\n        this.uploadError.emit(event);\n    }\n\n    onUploadCancel() {\n        this.uploadState = 'close';\n    }\n\n    toggleNewVersion() {\n        this.uploadState = this.uploadState === 'open' ? 'close' : 'open';\n    }\n\n    canUpdate(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'update');\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { ContentService } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-version-upload',\n    templateUrl: './version-upload.component.html',\n    styleUrls: ['./version-upload.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-version-upload' }\n})\nexport class VersionUploadComponent {\n\n    semanticVersion: string = 'minor';\n    comment: string;\n    uploadVersion: boolean = false;\n\n    @Input()\n    node: Node;\n\n    @Output()\n    success = new EventEmitter();\n\n    @Output()\n    error = new EventEmitter();\n\n    @Output()\n    cancel = new EventEmitter();\n\n    constructor(private contentService: ContentService) {\n    }\n\n    canUpload(): boolean {\n        return this.contentService.hasAllowableOperations(this.node, 'update');\n    }\n\n    isMajorVersion(): boolean {\n        return this.semanticVersion === 'minor' ? false : true;\n    }\n\n    cancelUpload() {\n        this.cancel.emit();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { VersionUploadComponent } from './version-upload.component';\nimport { VersionManagerComponent } from './version-manager.component';\nimport { VersionListComponent } from './version-list.component';\nimport { UploadModule } from '../upload/upload.module';\nimport { CoreModule } from '@alfresco/adf-core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild(),\n        UploadModule,\n        FormsModule\n    ],\n    exports: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent,\n        FormsModule\n    ],\n    declarations: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent\n    ]\n})\nexport class VersionManagerModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Input, ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { DataRow } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-name-location-cell',\n    template: `\n        <div class=\"adf-name-location-cell-name adf-datatable-cell-value\" [title]=\"name\">{{ name }}</div>\n        <div class=\"adf-name-location-cell-location adf-datatable-cell-value\" [title]=\"path\">{{ path }}</div>\n    `,\n    styleUrls: ['./name-location-cell.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'adf-name-location-cell adf-datatable-content-cell' }\n})\nexport class NameLocationCellComponent implements OnInit {\n\n    name: string = '';\n    path: string = '';\n\n    @Input()\n    row: DataRow;\n\n    ngOnInit() {\n        if (this.row) {\n            this.name = this.row.getValue('name');\n\n            const fullPath = this.row.getValue('path');\n            if (fullPath) {\n                this.path = fullPath.name || '';\n            }\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodePaging } from '@alfresco/js-api';\nimport { Observable } from 'rxjs';\n\n/**\n * Internal service used by ContentNodeSelector component.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentNodeSelectorService {\n\n    constructor(private searchService: SearchService) {\n    }\n\n    /**\n     * Performs a search for content node selection\n     *\n     * @param searchTerm    The term to search for\n     * @param rootNodeId    The root is to start the search from\n     * @param skipCount     From where to start the loading\n     * @param maxItems      How many items to load\n     * @param [extraNodeIds]  List of extra node ids to search from. This last parameter is necessary when\n     * the rootNodeId is one of the supported aliases (e.g. '-my-', '-root-', '-mysites-', etc.)\n     * and search is not supported for that alias, but can be performed on its corresponding nodes.\n     */\n    public search(searchTerm: string, rootNodeId: string = null, skipCount: number = 0, maxItems: number = 25, extraNodeIds?: string[]): Observable<NodePaging> {\n\n        let extraParentFiltering = '';\n\n        if (extraNodeIds && extraNodeIds.length) {\n            extraNodeIds\n                .filter((id) => id !== rootNodeId)\n                .forEach((extraId) => {\n                    extraParentFiltering += ` OR ANCESTOR:'workspace://SpacesStore/${extraId}'`;\n                });\n        }\n\n        const parentFiltering = rootNodeId ? [{ query: `ANCESTOR:'workspace://SpacesStore/${rootNodeId}'${extraParentFiltering}` }] : [];\n\n        const defaultSearchNode: any = {\n            query: {\n                query: `${searchTerm}* OR name:${searchTerm}*`\n            },\n            include: ['path', 'allowableOperations', 'properties'],\n            paging: {\n                maxItems: maxItems,\n                skipCount: skipCount\n            },\n            filterQueries: [\n                { query: \"TYPE:'cm:folder'\" },\n                { query: 'NOT cm:creator:System' },\n                ...parentFiltering\n            ],\n            scope: {\n                locations: ['nodes']\n            }\n        };\n\n        return this.searchService.searchByQueryBody(defaultSearchNode);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation, OnDestroy } from '@angular/core';\nimport {\n    HighlightDirective,\n    UserPreferencesService,\n    PaginationModel,\n    UserPreferenceValues,\n    InfinitePaginationComponent, PaginatedComponent\n} from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { Node, NodePaging, Pagination, SiteEntry, SitePaging } from '@alfresco/js-api';\nimport { DocumentListComponent } from '../document-list/components/document-list.component';\nimport { RowFilter } from '../document-list/data/row-filter.model';\nimport { ImageResolver } from '../document-list/data/image-resolver.model';\nimport { ContentNodeSelectorService } from './content-node-selector.service';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\nimport { CustomResourcesService } from '../document-list/services/custom-resources.service';\nimport { ShareDataRow } from '../document-list';\nimport { Subject } from 'rxjs';\n\nexport type ValidationFunction = (entry: Node) => boolean;\n\nconst defaultValidation = () => true;\n\n@Component({\n    selector: 'adf-content-node-selector-panel',\n    styleUrls: ['./content-node-selector-panel.component.scss'],\n    templateUrl: './content-node-selector-panel.component.html',\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-content-node-selector-panel' }\n})\nexport class ContentNodeSelectorPanelComponent implements OnInit, OnDestroy {\n\n    DEFAULT_PAGINATION: Pagination = new Pagination({\n        maxItems: 25,\n        skipCount: 0,\n        totalItems: 0,\n        hasMoreItems: false\n    });\n\n    /** Node ID of the folder currently listed. */\n    @Input()\n    currentFolderId: string = null;\n\n    /** Hide the \"My Files\" option added to the site list by default.\n     * See the [Sites Dropdown component](sites-dropdown.component.md)\n     * for more information.\n     */\n    @Input()\n    dropdownHideMyFiles: boolean = false;\n\n    /** Custom site for site dropdown. This is the same as the `siteList`.\n     * property of the Sites Dropdown component (see its doc page\n     * for more information).\n     */\n    @Input()\n    dropdownSiteList: SitePaging = null;\n\n    _rowFilter: RowFilter = defaultValidation;\n\n    /** Custom *where* filter function. See the\n     * Document List component\n     * for more information.\n     */\n    @Input()\n    where: string;\n\n    /**\n     * Custom row filter function. See the\n     * [Row Filter Model](row-filter.model.md) page\n     * for more information.\n     */\n    @Input()\n    set rowFilter(rowFilter: RowFilter) {\n        this.createRowFilter(rowFilter);\n    }\n\n    get rowFilter(): RowFilter {\n        return this._rowFilter;\n    }\n\n    _excludeSiteContent: string[] = [];\n\n    /** Custom list of site content componentIds.\n     * Used to filter out the corresponding items from the displayed nodes\n     */\n    @Input()\n    set excludeSiteContent(excludeSiteContent: string[]) {\n        this._excludeSiteContent = excludeSiteContent;\n        this.createRowFilter(this._rowFilter);\n    }\n\n    get excludeSiteContent(): string[] {\n        return this._excludeSiteContent;\n    }\n\n    /**\n     * Custom image resolver function. See the\n     * [Image Resolver Model](image-resolver.model.md) page\n     * for more information.\n     */\n    @Input()\n    imageResolver: ImageResolver = null;\n\n    /** Number of items shown per page in the list. */\n    @Input()\n    pageSize: number = this.DEFAULT_PAGINATION.maxItems;\n\n    /** Function used to decide if the selected node has permission to be selected.\n     * Default value is a function that always returns true.\n     */\n    @Input()\n    isSelectionValid: ValidationFunction = defaultValidation;\n\n    /** Transformation to be performed on the chosen/folder node before building the\n     * breadcrumb UI. Can be useful when custom formatting is needed for the breadcrumb.\n     * You can change the path elements from the node that are used to build the\n     * breadcrumb using this function.\n     */\n    @Input()\n    breadcrumbTransform: (node) => any;\n\n    /** Emitted when the user has chosen an item. */\n    @Output()\n    select: EventEmitter<Node[]> = new EventEmitter<Node[]>();\n\n    @ViewChild('documentList')\n    documentList: DocumentListComponent;\n\n    @ViewChild(HighlightDirective)\n    highlighter: HighlightDirective;\n\n    nodePaging: NodePaging | null = null;\n    siteId: null | string;\n    searchTerm: string = '';\n    showingSearchResults: boolean = false;\n    loadingSearchResults: boolean = false;\n    inDialog: boolean = false;\n    _chosenNode: Node = null;\n    folderIdToShow: string | null = null;\n    breadcrumbFolderTitle: string | null = null;\n\n    pagination: PaginationModel = this.DEFAULT_PAGINATION;\n\n    @ViewChild(InfinitePaginationComponent)\n    infinitePaginationComponent: InfinitePaginationComponent;\n\n    infiniteScroll: boolean = false;\n    debounceSearch: number = 200;\n    searchInput: FormControl = new FormControl();\n\n    target: PaginatedComponent;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(private contentNodeSelectorService: ContentNodeSelectorService,\n                private customResourcesService: CustomResourcesService,\n                private userPreferencesService: UserPreferencesService) {\n    }\n\n    set chosenNode(value: Node) {\n        this._chosenNode = value;\n        let valuesArray = null;\n        if (value) {\n            valuesArray = [value];\n        }\n        this.select.next(valuesArray);\n    }\n\n    get chosenNode() {\n        return this._chosenNode;\n    }\n\n    ngOnInit() {\n        this.searchInput.valueChanges\n            .pipe(\n                debounceTime(this.debounceSearch),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(searchValue => this.search(searchValue));\n\n        this.userPreferencesService\n            .select(UserPreferenceValues.PaginationSize)\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(pagSize => this.pageSize = pagSize);\n\n        this.target = this.documentList;\n        this.folderIdToShow = this.currentFolderId;\n\n        this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;\n        this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    private createRowFilter(filter?: RowFilter) {\n        if (!filter) {\n            filter = () => true;\n        }\n        this._rowFilter = (value: ShareDataRow, index: number, array: ShareDataRow[]) => {\n            return filter(value, index, array) &&\n                !this.isExcludedSiteContent(value);\n        };\n    }\n\n    private isExcludedSiteContent(row: ShareDataRow): boolean {\n        const entry = row.node.entry;\n        if (this._excludeSiteContent && this._excludeSiteContent.length &&\n            entry &&\n            entry.properties &&\n            entry.properties['st:componentId']) {\n            const excludedItem = this._excludeSiteContent.find(\n                (id: string) => entry.properties['st:componentId'] === id\n            );\n            return !!excludedItem;\n        }\n        return false;\n    }\n\n    /**\n     * Updates the site attribute and starts a new search\n     *\n     * @param chosenSite SiteEntry to search within\n     */\n    siteChanged(chosenSite: SiteEntry): void {\n        this.siteId = chosenSite.entry.guid;\n        this.setTitleIfCustomSite(chosenSite);\n        this.updateResults();\n\n    }\n\n    /**\n     * Updates the searchTerm attribute and starts a new search\n     *\n     * @param searchTerm string value to search against\n     */\n    search(searchTerm: string): void {\n        this.searchTerm = searchTerm;\n        this.updateResults();\n    }\n\n    /**\n     * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb\n     */\n    get breadcrumbFolderNode(): Node | null {\n        let folderNode: Node;\n\n        if (this.showingSearchResults && this.chosenNode) {\n            folderNode = this.chosenNode;\n        } else {\n            folderNode = this.documentList.folderNode;\n        }\n\n        return folderNode;\n    }\n\n    /**\n     * Clear the search input and reset to last folder node in which search was performed\n     */\n    clear(): void {\n        this.clearSearch();\n        this.folderIdToShow = this.siteId || this.currentFolderId;\n    }\n\n    /**\n     * Clear the search input and search related data\n     */\n    clearSearch() {\n        this.searchTerm = '';\n        this.nodePaging = null;\n        this.pagination.maxItems = this.pageSize;\n        this.chosenNode = null;\n        this.showingSearchResults = false;\n    }\n\n    /**\n     * Update the result list depending on the criteria\n     */\n    private updateResults(): void {\n        this.target = this.searchTerm.length > 0 ? null : this.documentList;\n\n        if (this.searchTerm.length === 0) {\n            this.clear();\n        } else {\n            this.startNewSearch();\n        }\n    }\n\n    /**\n     * Load the first page of a new search result\n     */\n    private startNewSearch(): void {\n        this.nodePaging = null;\n        this.pagination.maxItems = this.pageSize;\n        if (this.target) {\n            this.infinitePaginationComponent.reset();\n        }\n        this.chosenNode = null;\n        this.folderIdToShow = null;\n        this.querySearch();\n    }\n\n    /**\n     * Perform the call to searchService with the proper parameters\n     */\n    private querySearch(): void {\n        this.loadingSearchResults = true;\n\n        if (this.customResourcesService.hasCorrespondingNodeIds(this.siteId)) {\n            this.customResourcesService.getCorrespondingNodeIds(this.siteId)\n                .subscribe((nodeIds) => {\n                        this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.pagination.skipCount, this.pagination.maxItems, nodeIds)\n                            .subscribe(this.showSearchResults.bind(this));\n                    },\n                    () => {\n                        this.showSearchResults({ list: { entries: [] } });\n                    });\n        } else {\n            this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.pagination.skipCount, this.pagination.maxItems)\n                .subscribe(this.showSearchResults.bind(this));\n        }\n    }\n\n    /**\n     * Show the results of the search\n     *\n     * @param results Search results\n     */\n    private showSearchResults(nodePaging: NodePaging): void {\n        this.showingSearchResults = true;\n        this.loadingSearchResults = false;\n\n        this.nodePaging = nodePaging;\n    }\n\n    /**\n     * Sets showingSearchResults state to be able to differentiate between search results or folder results\n     */\n    onFolderChange(): void {\n        this.showingSearchResults = false;\n        this.infiniteScroll = false;\n        this.clearSearch();\n    }\n\n    /**\n     * Attempts to set the currently loaded node\n     */\n    onFolderLoaded(): void {\n        if (!this.showingSearchResults) {\n            this.attemptNodeSelection(this.documentList.folderNode);\n        }\n    }\n\n    /**\n     * Returns whether breadcrumb has to be shown or not\n     */\n    showBreadcrumbs() {\n        return !this.showingSearchResults || this.chosenNode;\n    }\n\n    /**\n     * Loads the next batch of search results\n     *\n     * @param event Pagination object\n     */\n    getNextPageOfSearch(pagination: Pagination): void {\n        this.infiniteScroll = true;\n        this.pagination = pagination;\n\n        if (this.searchTerm.length > 0) {\n            this.querySearch();\n        }\n    }\n\n    /**\n     * Selects node as chosen if it has the right permission, clears the selection otherwise\n     *\n     * @param entry\n     */\n    private attemptNodeSelection(entry: Node): void {\n        if (entry && this.isSelectionValid(entry)) {\n            this.chosenNode = entry;\n        } else {\n            this.resetChosenNode();\n        }\n    }\n\n    /**\n     * Clears the chosen node\n     */\n    resetChosenNode(): void {\n        this.chosenNode = null;\n    }\n\n    /**\n     * Invoked when user selects a node\n     *\n     * @param event CustomEvent for node-select\n     */\n    onNodeSelect(event: any): void {\n        this.attemptNodeSelection(event.detail.node.entry);\n    }\n\n    setTitleIfCustomSite(site: SiteEntry) {\n        if (this.customResourcesService.isCustomSource(site.entry.guid)) {\n            this.breadcrumbFolderTitle = site.entry.title;\n        } else {\n            this.breadcrumbFolderTitle = null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\n\nimport { ContentNodeSelectorPanelComponent } from './content-node-selector-panel.component';\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { SitesDropdownModule } from '../site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from '../breadcrumb/breadcrumb.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { DocumentListModule } from '../document-list/document-list.module';\nimport { NameLocationCellComponent } from './name-location-cell/name-location-cell.component';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        DocumentListModule\n    ],\n    exports: [\n        ContentNodeSelectorPanelComponent,\n        NameLocationCellComponent,\n        ContentNodeSelectorComponent\n    ],\n    entryComponents: [\n        ContentNodeSelectorPanelComponent,\n        ContentNodeSelectorComponent\n    ],\n    declarations: [\n        ContentNodeSelectorPanelComponent,\n        NameLocationCellComponent,\n        ContentNodeSelectorComponent\n    ]\n})\nexport class ContentNodeSelectorModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormControl } from '@angular/forms';\n\nconst I18N_ERRORS_PATH = 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS';\n\nexport function forbidSpecialCharacters({ value }: FormControl) {\n    const specialCharacters: RegExp = /([\\*\\\"\\<\\>\\\\\\/\\?\\:\\|])/;\n    const isValid: boolean = !specialCharacters.test(value);\n\n    return (isValid) ? null : {\n        message: `${I18N_ERRORS_PATH}.SPECIAL_CHARACTERS`\n    };\n}\n\nexport function forbidEndingDot({ value }: FormControl) {\n    const isValid: boolean = ((value || '').trim().split('').pop() !== '.');\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ENDING_DOT`\n    };\n}\n\nexport function forbidOnlySpaces({ value }: FormControl) {\n    const isValid: boolean = !!((value || '')).trim();\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ONLY_SPACES`\n    };\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from 'rxjs';\n\nimport { Component, Inject, OnInit, Optional, EventEmitter, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\nimport { Node } from '@alfresco/js-api';\nimport { NodesApiService, TranslationService } from '@alfresco/adf-core';\n\nimport { forbidEndingDot, forbidOnlySpaces, forbidSpecialCharacters } from './folder-name.validators';\n\n@Component({\n    selector: 'adf-folder-dialog',\n    styleUrls: ['./folder.dialog.scss'],\n    templateUrl: './folder.dialog.html'\n})\nexport class FolderDialogComponent implements OnInit {\n\n    form: FormGroup;\n\n    folder: Node = null;\n\n    /** Emitted when the edit/create folder give error for example a folder with same name already exist\n     */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the edit/create folder is successfully created/modified\n     */\n    @Output()\n    success: EventEmitter<any> = new EventEmitter<Node>();\n\n    editTitle = 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE';\n    createTitle = 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE';\n    nodeType = 'cm:folder';\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private dialog: MatDialogRef<FolderDialogComponent>,\n        private nodesApi: NodesApiService,\n        private translation: TranslationService,\n        @Optional()\n        @Inject(MAT_DIALOG_DATA)\n        public data: any\n    ) {\n        if (data) {\n            this.editTitle = data.editTitle || this.editTitle;\n            this.createTitle = data.createTitle || this.createTitle;\n            this.nodeType = data.nodeType || this.nodeType;\n        }\n    }\n\n    get editing(): boolean {\n        return !!this.data.folder;\n    }\n\n    ngOnInit() {\n        const { folder } = this.data;\n        let name = '';\n        let description = '';\n\n        if (folder) {\n            const { properties } = folder;\n\n            name = folder.name || '';\n            description = properties ? properties['cm:description'] : '';\n        }\n\n        const validators = {\n            name: [\n                Validators.required,\n                forbidSpecialCharacters,\n                forbidEndingDot,\n                forbidOnlySpaces\n            ]\n        };\n\n        this.form = this.formBuilder.group({\n            name: [ name, validators.name ],\n            description: [ description ]\n        });\n    }\n\n    get name(): string {\n        const { name } = this.form.value;\n\n        return (name || '').trim();\n    }\n\n    get description(): string {\n        const { description } = this.form.value;\n\n        return (description || '').trim();\n    }\n\n    private get properties(): any {\n        const { name: title, description } = this;\n\n        return {\n            'cm:title': title,\n            'cm:description': description\n        };\n    }\n\n    private create(): Observable<Node> {\n        const { name, properties, nodeType, nodesApi, data: { parentNodeId} } = this;\n        return nodesApi.createFolder(parentNodeId, { name, properties, nodeType });\n    }\n\n    private edit(): Observable<Node> {\n        const { name, properties, nodesApi, data: { folder: { id: nodeId }} } = this;\n        return nodesApi.updateNode(nodeId, { name, properties });\n    }\n\n    submit() {\n        const { form, dialog, editing } = this;\n\n        if (!form.valid) { return; }\n\n        (editing ? this.edit() : this.create())\n            .subscribe(\n                (folder: Node) => {\n                    this.success.emit(folder);\n                    dialog.close(folder);\n                },\n                (error) => this.handleError(error)\n            );\n    }\n\n    handleError(error: any): any {\n        let errorMessage = 'CORE.MESSAGES.ERRORS.GENERIC';\n\n        try {\n            const { error: { statusCode } } = JSON.parse(error.message);\n\n            if (statusCode === 409) {\n                errorMessage = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';\n            }\n        } catch (err) { /* Do nothing, keep the original message */ }\n\n        this.error.emit(this.translation.instant(errorMessage));\n\n        return error;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable, Subject, from } from 'rxjs';\nimport {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl,\n  AbstractControl\n} from '@angular/forms';\nimport { MatDialogRef } from '@angular/material';\nimport { SiteBodyCreate, SiteEntry, SitePaging } from '@alfresco/js-api';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { debounceTime, mergeMap, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'adf-library-dialog',\n  styleUrls: ['./library.dialog.scss'],\n  templateUrl: './library.dialog.html',\n  encapsulation: ViewEncapsulation.None,\n  host: { class: 'adf-library-dialog' }\n})\nexport class LibraryDialogComponent implements OnInit, OnDestroy {\n  /** Emitted when an error occurs. */\n  @Output()\n  error: EventEmitter<any> = new EventEmitter<any>();\n\n  /** Emitted when the new library is created successfully. The\n   * event parameter is a SiteEntry object with the details of the\n   * newly-created library.\n   */\n  @Output()\n  success: EventEmitter<any> = new EventEmitter<any>();\n\n  onDestroy$: Subject<boolean> = new Subject<boolean>();\n\n  createTitle = 'LIBRARY.DIALOG.CREATE_TITLE';\n  libraryTitleExists = false;\n  form: FormGroup;\n  visibilityOption: any;\n  visibilityOptions = [\n    { value: 'PUBLIC', label: 'LIBRARY.VISIBILITY.PUBLIC', disabled: false },\n    { value: 'PRIVATE', label: 'LIBRARY.VISIBILITY.PRIVATE', disabled: false },\n    {\n      value: 'MODERATED',\n      label: 'LIBRARY.VISIBILITY.MODERATED',\n      disabled: false\n    }\n  ];\n\n  constructor(\n    private alfrescoApiService: AlfrescoApiService,\n    private formBuilder: FormBuilder,\n    private dialog: MatDialogRef<LibraryDialogComponent>\n  ) {}\n\n  ngOnInit() {\n    const validators = {\n      id: [\n        Validators.required,\n        Validators.maxLength(72),\n        this.forbidSpecialCharacters\n      ],\n      title: [\n        Validators.required,\n        this.forbidOnlySpaces,\n        Validators.minLength(2),\n        Validators.maxLength(256)\n      ],\n      description: [Validators.maxLength(512)]\n    };\n\n    this.form = this.formBuilder.group({\n      title: [null, validators.title],\n      id: [null, validators.id, this.createSiteIdValidator()],\n      description: ['', validators.description]\n    });\n\n    this.visibilityOption = this.visibilityOptions[0].value;\n\n    this.form.controls['title'].valueChanges\n      .pipe(\n        debounceTime(300),\n        mergeMap(\n            (title) => this.checkLibraryNameExists(title),\n            (title) => title\n        ),\n        takeUntil(this.onDestroy$)\n      )\n      .subscribe((title: string) => {\n        if (!this.form.controls['id'].dirty && this.canGenerateId(title)) {\n          this.form.patchValue({ id: this.sanitize(title.trim()) });\n          this.form.controls['id'].markAsTouched();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this.onDestroy$.next(true);\n    this.onDestroy$.complete();\n  }\n\n  get title(): string {\n    const { title } = this.form.value;\n\n    return (title || '').trim();\n  }\n\n  get id(): string {\n    const { id } = this.form.value;\n\n    return (id || '').trim();\n  }\n\n  get description(): string {\n    const { description } = this.form.value;\n\n    return (description || '').trim();\n  }\n\n  get visibility(): string {\n    return this.visibilityOption || '';\n  }\n\n  submit() {\n    const { form, dialog } = this;\n\n    if (!form.valid) {\n      return;\n    }\n\n    this.create().subscribe(\n      (node: SiteEntry) => {\n        this.success.emit(node);\n        dialog.close(node);\n      },\n      (error) => this.handleError(error)\n    );\n  }\n\n  visibilityChangeHandler(event) {\n    this.visibilityOption = event.value;\n  }\n\n  private create(): Observable<SiteEntry> {\n    const { title, id, description, visibility } = this;\n    const siteBody = <SiteBodyCreate> {\n      id,\n      title,\n      description,\n      visibility\n    };\n\n    return from(this.alfrescoApiService.sitesApi.createSite(siteBody));\n  }\n\n  private sanitize(input: string) {\n    return input.replace(/[\\s\\s]+/g, '-').replace(/[^A-Za-z0-9-]/g, '');\n  }\n\n  private canGenerateId(title) {\n    return Boolean(title.replace(/[^A-Za-z0-9-]/g, '').length);\n  }\n\n  private handleError(error: any): any {\n      try {\n          const {\n              error: { statusCode }\n          } = JSON.parse(error.message);\n\n          if (statusCode === 409) {\n              this.form.controls['id'].setErrors({\n                  message: 'LIBRARY.ERRORS.CONFLICT'\n              });\n          }\n      } catch (error) {\n\n      }\n\n      return error;\n  }\n\n  private async checkLibraryNameExists(libraryTitle: string) {\n    let entries = [];\n\n    try {\n        entries = (await this.findLibraryByTitle(libraryTitle)).list.entries;\n    } catch {\n        entries = [];\n    }\n\n    if (entries.length) {\n      this.libraryTitleExists = entries[0].entry.title.toLowerCase() === libraryTitle.toLowerCase();\n    } else {\n      this.libraryTitleExists = false;\n    }\n  }\n\n  private async findLibraryByTitle(libraryTitle: string): Promise<SitePaging> {\n    return this.alfrescoApiService\n      .getInstance()\n      .core.queriesApi.findSites(libraryTitle, {\n        maxItems: 1,\n        fields: ['title']\n      });\n  }\n\n  private forbidSpecialCharacters({ value }: FormControl) {\n    if (value === null || value.length === 0) {\n      return null;\n    }\n\n    const validCharacters: RegExp = /[^A-Za-z0-9-]/;\n    const isValid: boolean = !validCharacters.test(value);\n\n    return isValid\n      ? null\n      : {\n          message: 'LIBRARY.ERRORS.ILLEGAL_CHARACTERS'\n        };\n  }\n\n  private forbidOnlySpaces({ value }: FormControl) {\n    if (value === null || value.length === 0) {\n      return null;\n    }\n\n    const isValid: boolean = !!(value || '').trim();\n\n    return isValid\n      ? null\n      : {\n          message: 'LIBRARY.ERRORS.ONLY_SPACES'\n        };\n  }\n\n  private createSiteIdValidator() {\n    let timer;\n\n    return (control: AbstractControl) => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      return new Promise((resolve) => {\n        timer = setTimeout(() => {\n          return from(\n            this.alfrescoApiService.sitesApi.getSite(control.value)\n          ).subscribe(\n            () => resolve({ message: 'LIBRARY.ERRORS.EXISTENT_SITE' }),\n            () => resolve(null)\n          );\n        }, 300);\n      });\n    };\n  }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule } from '@alfresco/adf-core';\n\nimport { MaterialModule } from '../material.module';\nimport { FolderDialogComponent } from './folder.dialog';\nimport { NodeLockDialogComponent } from './node-lock.dialog';\nimport { ConfirmDialogComponent } from './confirm.dialog';\nimport { MatDatetimepickerModule } from '@mat-datetimepicker/core';\nimport { MatMomentDatetimeModule } from '@mat-datetimepicker/moment';\nimport { LibraryDialogComponent } from './library/library.dialog';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        CoreModule.forChild(),\n        FormsModule,\n        ReactiveFormsModule,\n        MatMomentDatetimeModule,\n        MatDatetimepickerModule\n    ],\n    declarations: [\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent,\n        LibraryDialogComponent\n    ],\n    exports: [\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent,\n        LibraryDialogComponent\n    ],\n    entryComponents: [\n        FolderDialogComponent,\n        NodeLockDialogComponent,\n        ConfirmDialogComponent,\n        LibraryDialogComponent\n    ]\n})\nexport class DialogModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { Node } from '@alfresco/js-api';\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\nconst DEFAULT_FOLDER_PARENT_ID = '-my-';\n\n@Directive({\n    selector: '[adf-create-folder]'\n})\nexport class FolderCreateDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    /** Parent folder where the new folder will be located after creation. */\n    @Input('adf-create-folder')\n    parentNodeId: string = DEFAULT_FOLDER_PARENT_ID;\n\n    /** Title of folder creation dialog. */\n    @Input()\n    title: string = null;\n\n    /** Type of node to create. */\n    @Input()\n    nodeType = 'cm:folder';\n\n    /** Emitted when an error occurs (eg, a folder with same name already exists). */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Emitted when the folder is created successfully. */\n    @Output()\n    success: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        this.openDialog();\n    }\n\n    constructor(\n        public dialogRef: MatDialog,\n        public content: ContentService\n    ) {}\n\n    private get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderCreateDirective;\n        const { parentNodeId, title: createTitle, nodeType } = this;\n\n        return {\n            data: { parentNodeId, createTitle, nodeType },\n            width: `${width}px`\n        };\n    }\n\n    private openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.componentInstance.error.subscribe((error) => {\n            this.error.emit(error);\n        });\n\n        dialogInstance.componentInstance.success.subscribe((node: Node) => {\n            this.success.emit(node);\n        });\n\n        dialogInstance.afterClosed().subscribe((node: Node) => {\n            if (node) {\n                content.folderCreate.next(node);\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\n\nimport { Node } from '@alfresco/js-api';\n\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\n@Directive({\n    selector: '[adf-edit-folder]'\n})\nexport class FolderEditDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    /** Folder node to edit. */\n    @Input('adf-edit-folder')\n    folder: Node;\n\n    /** Emitted when an error occurs (eg, a folder with same name already exists). */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Title of folder edit dialog. */\n    @Input()\n    title: string = null;\n\n    /** Emitted when the folder has been edited successfully. */\n    @Output()\n    success: EventEmitter<Node> = new EventEmitter<Node>();\n\n    @HostListener('click', [ '$event' ])\n    onClick(event) {\n        event.preventDefault();\n        if (this.folder) {\n            this.openDialog();\n        }\n    }\n\n    constructor(\n        public dialogRef: MatDialog,\n        public elementRef: ElementRef,\n        public content: ContentService\n    ) {}\n\n    private get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderEditDirective;\n        const { folder } = this;\n\n        return {\n            data: {\n                folder,\n                editTitle: this.title\n            },\n            width: `${width}px`\n        };\n    }\n\n    private openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.componentInstance.error.subscribe((error) => {\n            this.error.emit(error);\n        });\n\n        dialogInstance.componentInstance.success.subscribe((node: Node) => {\n            this.success.emit(node);\n        });\n\n        dialogInstance.afterClosed().subscribe((node: Node) => {\n            if (node) {\n                content.folderEdit.next(node);\n            }\n        });\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { FolderCreateDirective } from './folder-create.directive';\nimport { FolderEditDirective } from './folder-edit.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ],\n    exports: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ]\n})\nexport class FolderDirectiveModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-content-metadata-card',\n    templateUrl: './content-metadata-card.component.html',\n    styleUrls: ['./content-metadata-card.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-content-metadata-card' }\n})\nexport class ContentMetadataCardComponent implements OnChanges {\n    /** (required) The node entity to fetch metadata about */\n    @Input()\n    node: Node;\n\n    /** (optional) This flag displays/hides empty metadata\n     * fields.\n     */\n    @Input()\n    displayEmpty: boolean = false;\n\n    /** (optional) This flag displays desired aspect when open for the first time\n     * fields.\n     */\n    @Input()\n    displayAspect: string = null;\n\n    /** (required) Name of the metadata preset, which defines aspects\n     * and their properties.\n     */\n    @Input()\n    preset: string;\n\n    /** (optional) This flag sets the metadata in read only mode\n     * preventing changes.\n     */\n    @Input()\n    readOnly = false;\n\n    /** (optional) This flag allows the component to display more\n     * than one accordion at a time.\n     */\n    @Input()\n    multi = false;\n\n    private _displayDefaultProperties: boolean = true;\n\n    /** (optional) This flag displays/hides the metadata\n     * properties.\n     */\n    @Input()\n    set displayDefaultProperties(value: boolean) {\n        this._displayDefaultProperties = value;\n        this.onDisplayDefaultPropertiesChange();\n    }\n\n    get displayDefaultProperties(): boolean {\n        return this._displayDefaultProperties;\n    }\n\n    editable: boolean = false;\n\n    expanded: boolean;\n\n    constructor(private contentService: ContentService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.displayAspect && changes.displayAspect.currentValue) {\n            this.expanded = true;\n        }\n    }\n\n    onDisplayDefaultPropertiesChange(): void {\n        this.expanded = !this._displayDefaultProperties;\n    }\n\n    toggleEdit(): void {\n        this.editable = !this.editable;\n    }\n\n    toggleExpanded(): void {\n        this.expanded = !this.expanded;\n    }\n\n    hasAllowableOperations() {\n        return this.contentService.hasAllowableOperations(this.node, AllowableOperationsEnum.UPDATE);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { CardViewDateItemModel, CardViewTextItemModel, FileSizePipe } from '@alfresco/adf-core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class BasicPropertiesService {\n\n    constructor(private fileSizePipe: FileSizePipe) {\n    }\n\n    getProperties(node: Node) {\n\n        const sizeInBytes = node.content ? node.content.sizeInBytes : '',\n            mimeTypeName = node.content ? node.content.mimeTypeName : '',\n            author = node.properties ? node.properties['cm:author'] : '',\n            description = node.properties ? node.properties['cm:description'] : '',\n            title = node.properties ? node.properties['cm:title'] : '';\n\n        return [\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.NAME',\n                value: node.name,\n                key: 'name',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.TITLE',\n                value: title,\n                key: 'properties.cm:title',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.CREATOR',\n                value: node.createdByUser.displayName,\n                key: 'createdByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.CREATED_DATE',\n                value: node.createdAt,\n                key: 'createdAt',\n                editable: false,\n                format: 'mediumDate'\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.SIZE',\n                value: sizeInBytes,\n                key: 'content.sizeInBytes',\n                pipes: [{ pipe: this.fileSizePipe }],\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIER',\n                value: node.modifiedByUser.displayName,\n                key: 'modifiedByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIED_DATE',\n                value: node.modifiedAt,\n                key: 'modifiedAt',\n                editable: false,\n                format: 'mediumDate'\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MIMETYPE',\n                value: mimeTypeName,\n                key: 'content.mimeTypeName',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.AUTHOR',\n                value: author,\n                key: 'properties.cm:author',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.DESCRIPTION',\n                value: description,\n                key: 'properties.cm:description',\n                multiline: true,\n                editable: true\n            })\n        ];\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport {\n    CardViewItemProperties,\n    CardViewItem,\n    CardViewTextItemModel,\n    CardViewBoolItemModel,\n    CardViewDateItemModel,\n    CardViewDatetimeItemModel,\n    CardViewIntItemModel,\n    CardViewFloatItemModel,\n    LogService,\n    MultiValuePipe,\n    AppConfigService,\n    DecimalNumberPipe\n} from '@alfresco/adf-core';\nimport { Property, CardViewGroup, OrganisedPropertyGroup } from '../interfaces/content-metadata.interfaces';\n\nconst D_TEXT = 'd:text';\nconst D_MLTEXT = 'd:mltext';\nconst D_DATE = 'd:date';\nconst D_DATETIME = 'd:datetime';\nconst D_INT = 'd:int';\nconst D_LONG = 'd:long';\nconst D_FLOAT = 'd:float';\nconst D_DOUBLE = 'd:double';\nconst D_BOOLEAN = 'd:boolean';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PropertyGroupTranslatorService {\n\n    static readonly RECOGNISED_ECM_TYPES = [D_TEXT, D_MLTEXT, D_DATE, D_DATETIME, D_INT, D_LONG, D_FLOAT, D_DOUBLE, D_BOOLEAN];\n\n    valueSeparator: string;\n\n    constructor(private logService: LogService,\n                private multiValuePipe: MultiValuePipe,\n                private decimalNumberPipe: DecimalNumberPipe,\n                private appConfig: AppConfigService) {\n        this.valueSeparator = this.appConfig.get<string>('content-metadata.multi-value-pipe-separator');\n    }\n\n    public translateToCardViewGroups(propertyGroups: OrganisedPropertyGroup[], propertyValues): CardViewGroup[] {\n        return propertyGroups.map((propertyGroup) => {\n            const translatedPropertyGroup: any = Object.assign({}, propertyGroup);\n            translatedPropertyGroup.properties = this.translateArray(propertyGroup.properties, propertyValues);\n            return translatedPropertyGroup;\n        });\n    }\n\n    private translateArray(properties: Property[], propertyValues: any): CardViewItem[] {\n        return properties.map((property) => {\n            return this.translate(property, propertyValues);\n        });\n    }\n\n    private translate(property: Property, propertyValues: any): CardViewItem {\n        let propertyValue;\n        if (propertyValues && propertyValues[property.name]) {\n            propertyValue = propertyValues[property.name];\n        }\n\n        this.checkECMTypeValidity(property.dataType);\n\n        const prefix = 'properties.';\n\n        const propertyDefinition: CardViewItemProperties = {\n            label: property.title || property.name,\n            value: propertyValue,\n            key: `${prefix}${property.name}`,\n            default: property.defaultValue,\n            editable: true\n        };\n        let cardViewItemProperty;\n\n        switch (property.dataType) {\n\n            case D_MLTEXT:\n                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {\n                    multiline: true\n                }));\n                break;\n\n            case D_INT:\n            case D_LONG:\n                cardViewItemProperty = new CardViewIntItemModel(propertyDefinition);\n                break;\n\n            case D_FLOAT:\n            case D_DOUBLE:\n                cardViewItemProperty = new CardViewFloatItemModel(Object.assign(propertyDefinition, {\n                    pipes: [{ pipe: this.decimalNumberPipe }]\n                }));\n                break;\n\n            case D_DATE:\n                cardViewItemProperty = new CardViewDateItemModel(propertyDefinition);\n                break;\n\n            case D_DATETIME:\n                cardViewItemProperty = new CardViewDatetimeItemModel(propertyDefinition);\n                break;\n\n            case D_BOOLEAN:\n                cardViewItemProperty = new CardViewBoolItemModel(propertyDefinition);\n                break;\n\n            case D_TEXT:\n            default:\n                cardViewItemProperty = new CardViewTextItemModel(Object.assign(propertyDefinition, {\n                    multivalued: property.multiValued,\n                    multiline: property.multiValued,\n                    pipes: [{ pipe: this.multiValuePipe, params: [this.valueSeparator]}]\n                }));\n        }\n\n        return cardViewItemProperty;\n    }\n\n    private checkECMTypeValidity(ecmPropertyType) {\n        if (PropertyGroupTranslatorService.RECOGNISED_ECM_TYPES.indexOf(ecmPropertyType) === -1) {\n            this.logService.error(`Unknown type for mapping: ${ecmPropertyType}`);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PropertyGroup, Property, PropertyGroupContainer } from '../../interfaces/content-metadata.interfaces';\n\nconst emptyGroup = {\n    properties: {}\n};\n\nfunction convertObjectToArray(object: any): Property[] {\n    return Object.keys(object).map((key) => object[key]);\n}\n\nexport function getGroup(propertyGroups: PropertyGroupContainer, groupName: string): PropertyGroup | undefined {\n    return propertyGroups[groupName];\n}\n\nexport function getProperty(propertyGroups: PropertyGroupContainer, groupName: string, propertyName: string): Property | Property[] | undefined {\n    const groupDefinition = getGroup(propertyGroups, groupName) || emptyGroup;\n    let propertyDefinitions;\n\n    if (propertyName === '*') {\n        propertyDefinitions = convertObjectToArray(groupDefinition.properties);\n    } else {\n        propertyDefinitions = groupDefinition.properties[propertyName];\n    }\n\n    return propertyDefinitions;\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentMetadataConfig, OrganisedPropertyGroup, PropertyGroupContainer } from '../../interfaces/content-metadata.interfaces';\nimport { getGroup, getProperty } from './property-group-reader';\n\nexport class AspectOrientedConfigService implements ContentMetadataConfig {\n\n    constructor(private config: any) { }\n\n    public isGroupAllowed(groupName: string): boolean {\n        if (this.isIncludeAllEnabled()) {\n            return true;\n        }\n        const groupNames = Object.keys(this.config);\n        return groupNames.indexOf(groupName) !== -1;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const aspects = this.config,\n            aspectNames = Object.keys(aspects);\n\n        return aspectNames\n            .reduce((groupAccumulator, aspectName) => {\n                const newGroup = this.getOrganisedPropertyGroup(propertyGroups, aspectName);\n                return groupAccumulator.concat(newGroup);\n            }, [])\n            .filter((organisedPropertyGroup) => organisedPropertyGroup.properties.length > 0);\n    }\n\n    public appendAllPreset(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const groups =  Object.keys(propertyGroups)\n            .map((groupName) => {\n                const propertyGroup = propertyGroups[groupName],\n                    properties = propertyGroup.properties;\n\n                return Object.assign({}, propertyGroup, {\n                    properties: Object.keys(properties).map((propertyName) => properties[propertyName])\n                });\n            });\n\n        return groups;\n    }\n\n    public filterExcludedPreset(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[] {\n        if (this.config.exclude) {\n            return propertyGroups.filter((preset) => {\n                return !this.config.exclude.includes(preset.name);\n            });\n        }\n        return propertyGroups;\n    }\n\n    public isIncludeAllEnabled() {\n        return this.config.includeAll;\n    }\n\n    private getOrganisedPropertyGroup(propertyGroups, aspectName) {\n        const group = getGroup(propertyGroups, aspectName);\n        let newGroup = [];\n\n        if (group) {\n            const aspectProperties = this.config[aspectName];\n            let properties;\n\n            if (aspectProperties === '*') {\n                properties = getProperty(propertyGroups, aspectName, aspectProperties);\n            } else {\n                properties = (<string[]> aspectProperties)\n                    .map((propertyName) => getProperty(propertyGroups, aspectName, propertyName))\n                    .filter((props) => props !== undefined);\n            }\n\n            newGroup = [{ title: group.title, properties }];\n        }\n\n        return newGroup;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContentMetadataConfig, OrganisedPropertyGroup,\n    PropertyGroupContainer\n} from '../../interfaces/content-metadata.interfaces';\n\nexport class IndifferentConfigService implements ContentMetadataConfig {\n\n    constructor(config: any) {}\n\n    public isGroupAllowed(groupName: string): boolean {\n        return true;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        return Object.keys(propertyGroups)\n            .map((groupName) => {\n                const propertyGroup = propertyGroups[groupName],\n                    properties = propertyGroup.properties;\n\n                return Object.assign({}, propertyGroup, {\n                    properties: Object.keys(properties).map((propertyName) => properties[propertyName])\n                });\n            });\n    }\n\n    public filterExcludedPreset(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[] {\n        return propertyGroups;\n    }\n\n    public appendAllPreset(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        return[];\n    }\n\n    public isIncludeAllEnabled(): boolean {\n        return true;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    ContentMetadataConfig,\n    LayoutOrientedConfigItem,\n    OrganisedPropertyGroup,\n    PropertyGroupContainer\n} from '../../interfaces/content-metadata.interfaces';\nimport { getProperty } from './property-group-reader';\n\nexport class LayoutOrientedConfigService implements ContentMetadataConfig {\n\n    constructor(private config: any) { }\n\n    public isGroupAllowed(groupName: string): boolean {\n        if (this.isIncludeAllEnabled()) {\n            return true;\n        }\n        return this.getMatchingGroups(groupName).length > 0;\n    }\n\n    public reorganiseByConfig(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        const layoutBlocks = this.config.filter((itemsGroup) => itemsGroup.items);\n\n        const organisedPropertyGroup = layoutBlocks.map((layoutBlock) => {\n            const flattenedItems = this.flattenItems(layoutBlock.items),\n                properties = flattenedItems.reduce((props, explodedItem) => {\n                    const property = getProperty(propertyGroups, explodedItem.groupName, explodedItem.propertyName) || [];\n                    return props.concat(property);\n                }, []);\n\n            return {\n                title: layoutBlock.title,\n                properties\n            };\n        });\n\n        return organisedPropertyGroup;\n    }\n\n    public appendAllPreset(propertyGroups: PropertyGroupContainer): OrganisedPropertyGroup[] {\n        return Object.keys(propertyGroups)\n            .map((groupName) => {\n                const propertyGroup = propertyGroups[groupName],\n                    properties = propertyGroup.properties;\n\n                return Object.assign({}, propertyGroup, {\n                    properties: Object.keys(properties).map((propertyName) => properties[propertyName])\n                });\n            });\n    }\n\n    public filterExcludedPreset(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[] {\n        let excludedConfig = this.config\n            .map((config) => config.exclude)\n            .find((exclude) => exclude !== undefined);\n\n        if (excludedConfig === undefined) {\n            excludedConfig = [];\n        } else if (typeof excludedConfig === 'string') {\n            excludedConfig = [excludedConfig];\n        }\n\n        return propertyGroups.filter((props) => {\n            return !excludedConfig.includes(props.name);\n        });\n    }\n\n    public isIncludeAllEnabled() {\n        const includeAllProperty = this.config\n            .map((config) => config.includeAll)\n            .find((includeAll) => includeAll !== undefined);\n\n        return includeAllProperty !== undefined ? includeAllProperty : false;\n    }\n\n    private flattenItems(items) {\n        return items.reduce((accumulator, item) => {\n            const properties = Array.isArray(item.properties) ? item.properties : [item.properties];\n            const flattenedProperties = properties.map((propertyName) => {\n                return {\n                    groupName: item.aspect || item.type,\n                    propertyName\n                };\n            });\n\n            return accumulator.concat(flattenedProperties);\n        }, []);\n    }\n\n    private getMatchingGroups(groupName: string): LayoutOrientedConfigItem[] {\n        return this.config\n            .map((layoutBlock) => layoutBlock.items)\n            .reduce((accumulator, items) => accumulator.concat(items), [])\n            .filter((item) => item.aspect === groupName || item.type === groupName);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AppConfigService, LogService } from '@alfresco/adf-core';\nimport { AspectOrientedConfigService } from './aspect-oriented-config.service';\nimport { IndifferentConfigService } from './indifferent-config.service';\nimport { LayoutOrientedConfigService } from './layout-oriented-config.service';\nimport {\n    PresetConfig,\n    ContentMetadataConfig,\n    AspectOrientedConfig,\n    InDifferentConfig,\n    LayoutOrientedConfig\n} from '../../interfaces/content-metadata.interfaces';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentMetadataConfigFactory {\n\n    static readonly INDIFFERENT_PRESET = '*';\n    static readonly DEFAULT_PRESET_NAME = 'default';\n\n    constructor(private appConfigService: AppConfigService, private logService: LogService) {}\n\n    public get(presetName: string = 'default'): ContentMetadataConfig {\n        let presetConfig;\n        try {\n            presetConfig = this.appConfigService.config['content-metadata'].presets[presetName];\n        } catch {\n            if (presetName !== ContentMetadataConfigFactory.DEFAULT_PRESET_NAME) {\n                this.logService.error(`No content-metadata preset for: ${presetName}`);\n            }\n            presetConfig = ContentMetadataConfigFactory.INDIFFERENT_PRESET;\n        }\n\n        return this.createConfig(presetConfig);\n    }\n\n    private createConfig(presetConfig: PresetConfig): ContentMetadataConfig {\n        let config: ContentMetadataConfig;\n\n        if (this.isLayoutOrientedPreset(presetConfig)) {\n            config = new LayoutOrientedConfigService(<LayoutOrientedConfig> presetConfig);\n        } else if (this.isAspectOrientedPreset(presetConfig)) {\n            config = new AspectOrientedConfigService(<AspectOrientedConfig> presetConfig);\n        } else {\n            config = new IndifferentConfigService(<InDifferentConfig> presetConfig);\n        }\n\n        Object.freeze(config);\n        return config;\n    }\n\n    private isAspectOrientedPreset(presetConfig: PresetConfig): boolean {\n        return this.isObject(presetConfig);\n    }\n\n    private isLayoutOrientedPreset(presetConfig: PresetConfig): boolean {\n        return Array.isArray(presetConfig);\n    }\n\n    private isObject(x) {\n        return x != null && typeof x === 'object';\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Observable, defer, forkJoin } from 'rxjs';\nimport { PropertyGroup, PropertyGroupContainer } from '../interfaces/content-metadata.interfaces';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PropertyDescriptorsService {\n\n    constructor(private alfrescoApiService: AlfrescoApiService) {}\n\n    load(groupNames: string[]): Observable<PropertyGroupContainer> {\n        const groupFetchStreams = groupNames\n            .map((groupName) => groupName.replace(':', '_'))\n            .map((groupName) => defer( () => this.alfrescoApiService.classesApi.getClass(groupName)) );\n\n        return forkJoin(groupFetchStreams).pipe(\n            map(this.convertToObject)\n        );\n    }\n\n    private convertToObject(propertyGroupsArray: PropertyGroup[]): PropertyGroupContainer {\n        return propertyGroupsArray.reduce((propertyGroups, propertyGroup) => {\n            return Object.assign({}, propertyGroups, {\n                [propertyGroup.name]: propertyGroup\n            });\n        }, {});\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { BasicPropertiesService } from './basic-properties.service';\nimport { Observable, of, iif, Subject } from 'rxjs';\nimport { PropertyGroupTranslatorService } from './property-groups-translator.service';\nimport { CardViewItem } from '@alfresco/adf-core';\nimport { CardViewGroup, OrganisedPropertyGroup } from '../interfaces/content-metadata.interfaces';\nimport { ContentMetadataConfigFactory } from './config/content-metadata-config.factory';\nimport { PropertyDescriptorsService } from './property-descriptors.service';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ContentMetadataService {\n\n    error = new Subject<{ statusCode: number, message: string }>();\n\n    constructor(private basicPropertiesService: BasicPropertiesService,\n                private contentMetadataConfigFactory: ContentMetadataConfigFactory,\n                private propertyGroupTranslatorService: PropertyGroupTranslatorService,\n                private propertyDescriptorsService: PropertyDescriptorsService) {\n    }\n\n    getBasicProperties(node: Node): Observable<CardViewItem[]> {\n        return of(this.basicPropertiesService.getProperties(node));\n    }\n\n    getGroupedProperties(node: Node, presetName: string = 'default'): Observable<CardViewGroup[]> {\n        let groupedProperties = of([]);\n\n        if (node.aspectNames) {\n            const contentMetadataConfig = this.contentMetadataConfigFactory.get(presetName),\n                groupNames = node.aspectNames\n                    .concat(node.nodeType)\n                    .filter((groupName) => contentMetadataConfig.isGroupAllowed(groupName));\n\n            if (groupNames.length > 0) {\n                groupedProperties = this.propertyDescriptorsService.load(groupNames).pipe(\n                    switchMap((groups) =>\n                        iif(\n                            () => contentMetadataConfig.isIncludeAllEnabled(),\n                            of(contentMetadataConfig.appendAllPreset(groups).concat(contentMetadataConfig.reorganiseByConfig(groups))),\n                            of(contentMetadataConfig.reorganiseByConfig(groups))\n                        )),\n                    map((groups) => contentMetadataConfig.filterExcludedPreset(groups)),\n                    map((groups) => this.filterEmptyPreset(groups)),\n                    map((groups) => this.setTitleToNameIfNotSet(groups)),\n                    map((groups) => this.propertyGroupTranslatorService.translateToCardViewGroups(groups, node.properties))\n                );\n            }\n        }\n\n        return groupedProperties;\n    }\n\n    setTitleToNameIfNotSet(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[] {\n        propertyGroups.map((propertyGroup) => {\n            propertyGroup.title = propertyGroup.title || propertyGroup.name;\n        });\n        return propertyGroups;\n    }\n\n    filterEmptyPreset(propertyGroups: OrganisedPropertyGroup[]): OrganisedPropertyGroup[]  {\n        return propertyGroups.filter((props) => props.properties.length);\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { Node } from '@alfresco/js-api';\nimport { Observable, Subject, of } from 'rxjs';\nimport {\n    CardViewItem,\n    NodesApiService,\n    LogService,\n    CardViewUpdateService,\n    AlfrescoApiService,\n    TranslationService\n} from '@alfresco/adf-core';\nimport { ContentMetadataService } from '../../services/content-metadata.service';\nimport { CardViewGroup } from '../../interfaces/content-metadata.interfaces';\nimport { switchMap, takeUntil, catchError } from 'rxjs/operators';\n\n@Component({\n    selector: 'adf-content-metadata',\n    templateUrl: './content-metadata.component.html',\n    styleUrls: ['./content-metadata.component.scss'],\n    host: { 'class': 'adf-content-metadata' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ContentMetadataComponent implements OnChanges, OnInit, OnDestroy {\n\n    protected onDestroy$ = new Subject<boolean>();\n\n    /** (required) The node entity to fetch metadata about */\n    @Input()\n    node: Node;\n\n    /** Toggles whether the edit button should be shown */\n    @Input()\n    editable: boolean = false;\n\n    /** Toggles whether to display empty values in the card view */\n    @Input()\n    displayEmpty: boolean = false;\n\n    /** Toggles between expanded (ie, full information) and collapsed\n     * (ie, reduced information) in the display\n     */\n    @Input()\n    expanded: boolean = false;\n\n    /** The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time */\n    @Input()\n    multi = false;\n\n    /** Name of the metadata preset, which defines aspects and their properties */\n    @Input()\n    preset: string;\n\n    /** Toggles whether the metadata properties should be shown */\n    @Input()\n    displayDefaultProperties: boolean = true;\n\n    /** (Optional) shows the given aspect in the expanded  card */\n    @Input()\n    displayAspect: string = null;\n\n    basicProperties$: Observable<CardViewItem[]>;\n    groupedProperties$: Observable<CardViewGroup[]>;\n\n    constructor(\n        private contentMetadataService: ContentMetadataService,\n        private cardViewUpdateService: CardViewUpdateService,\n        private nodesApiService: NodesApiService,\n        private logService: LogService,\n        private alfrescoApiService: AlfrescoApiService,\n        private translationService: TranslationService\n    ) {\n    }\n\n    ngOnInit() {\n        this.cardViewUpdateService.itemUpdated$\n            .pipe(\n                switchMap((changes) =>\n                    this.saveNode(changes).pipe(\n                        catchError((err) => {\n                            this.handleUpdateError(err);\n                            return of(null);\n                        })\n                    )\n                ),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(\n                (updatedNode) => {\n                    if (updatedNode) {\n                        Object.assign(this.node, updatedNode);\n                        this.alfrescoApiService.nodeUpdated.next(this.node);\n                    }\n                }\n            );\n\n        this.loadProperties(this.node);\n    }\n\n    protected handleUpdateError(error: Error) {\n        this.logService.error(error);\n\n        let statusCode = 0;\n\n        try {\n            statusCode = JSON.parse(error.message).error.statusCode;\n        } catch {\n        }\n\n        let message = `METADATA.ERRORS.${statusCode}`;\n\n        if (this.translationService.instant(message) === message) {\n            message = 'METADATA.ERRORS.GENERIC';\n        }\n\n        this.contentMetadataService.error.next({\n            statusCode,\n            message\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.node && !changes.node.firstChange) {\n            this.loadProperties(changes.node.currentValue);\n        }\n    }\n\n    private loadProperties(node: Node) {\n        if (node) {\n            this.basicProperties$ = this.contentMetadataService.getBasicProperties(node);\n            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);\n        }\n    }\n\n    private saveNode({ changed: nodeBody }): Observable<Node> {\n        return this.nodesApiService.updateNode(this.node.id, nodeBody);\n    }\n\n    showGroup(group: CardViewGroup): boolean {\n        const properties = group.properties.filter((property) => {\n            return !!property.displayValue;\n        });\n\n        return properties.length > 0;\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    public canExpandTheCard(group: CardViewGroup): boolean {\n        return group.title === this.displayAspect;\n    }\n\n    public canExpandProperties(): boolean {\n        return !this.expanded || this.displayAspect === 'Properties';\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { ContentMetadataComponent } from './components/content-metadata/content-metadata.component';\nimport { ContentMetadataCardComponent } from './components/content-metadata-card/content-metadata-card.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FlexLayoutModule,\n        CoreModule.forChild()\n    ],\n    exports: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ],\n    declarations: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ]\n})\nexport class ContentMetadataModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PermissionElement } from '@alfresco/js-api';\n\nexport class PermissionDisplayModel implements PermissionElement {\n\n    authorityId?: string;\n    name?: string;\n    accessStatus?: PermissionElement.AccessStatusEnum;\n    isInherited: boolean = false;\n    icon: string;\n\n    constructor(obj?: any) {\n        if (obj) {\n            this.authorityId = obj.authorityId;\n            this.name = obj.name;\n            this.accessStatus = obj.accessStatus;\n            this.isInherited = obj.isInherited !== null && obj.isInherited !== undefined ? obj.isInherited : false;\n            this.icon = obj.icon ? obj.icon : 'vpn_key';\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Observable, of, from, throwError } from 'rxjs';\nimport { AlfrescoApiService, SearchService, NodesApiService, TranslationService } from '@alfresco/adf-core';\nimport { QueryBody, Node, NodeEntry, PathElement, GroupMemberEntry, GroupMemberPaging, PermissionElement } from '@alfresco/js-api';\nimport { switchMap, map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NodePermissionService {\n\n    constructor(private apiService: AlfrescoApiService,\n                private searchApiService: SearchService,\n                private nodeService: NodesApiService,\n                private translation: TranslationService) {\n    }\n\n    /**\n     * Gets a list of roles for the current node.\n     * @param node The target node\n     * @returns Array of strings representing the roles\n     */\n    getNodeRoles(node: Node): Observable<string[]> {\n        const retrieveSiteQueryBody: QueryBody = this.buildRetrieveSiteQueryBody(node.path.elements);\n        return this.searchApiService.searchByQueryBody(retrieveSiteQueryBody)\n            .pipe(\n                switchMap((siteNodeList: any) => {\n                    if ( siteNodeList.list.entries.length > 0 ) {\n                        const siteName = siteNodeList.list.entries[0].entry.name;\n                        return this.getGroupMembersBySiteName(siteName);\n                    } else {\n                        return of(node.permissions.settable);\n                    }\n                })\n            );\n    }\n\n    /**\n     * Updates the permission role for a node.\n     * @param node Target node\n     * @param updatedPermissionRole Permission role to update or add\n     * @returns Node with updated permission\n     */\n    updatePermissionRole(node: Node, updatedPermissionRole: PermissionElement): Observable<Node> {\n        const permissionBody = { permissions: { locallySet: []} };\n        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(updatedPermissionRole.authorityId);\n        permissionBody.permissions.locallySet = permissionBody.permissions.locallySet.concat(node.permissions.locallySet);\n        if (index !== -1) {\n            permissionBody.permissions.locallySet[index] = updatedPermissionRole;\n        } else {\n            permissionBody.permissions.locallySet.push(updatedPermissionRole);\n        }\n        return this.nodeService.updateNode(node.id, permissionBody);\n    }\n\n    /**\n     * Update permissions for a node.\n     * @param nodeId ID of the target node\n     * @param permissionList New permission settings\n     * @returns Node with updated permissions\n     */\n    updateNodePermissions(nodeId: string, permissionList: NodeEntry[]): Observable<Node> {\n       return this.nodeService.getNode(nodeId).pipe(\n           switchMap((node) => {\n                return this.getNodeRoles(node).pipe(\n                    switchMap((nodeRoles) => of({node, nodeRoles}) )\n                );\n            }),\n            switchMap(({node, nodeRoles}) => this.updateLocallySetPermissions(node, permissionList, nodeRoles))\n        );\n    }\n\n    /**\n     * Updates the locally set permissions for a node.\n     * @param node ID of the target node\n     * @param nodes Permission settings\n     * @param nodeRole Permission role\n     * @returns Node with updated permissions\n     */\n    updateLocallySetPermissions(node: Node, nodes: NodeEntry[], nodeRole: string[]): Observable<Node> {\n        const permissionBody = { permissions: { locallySet: []} };\n        const permissionList = this.transformNodeToPermissionElement(nodes, nodeRole[0]);\n        const duplicatedPermissions = this.getDuplicatedPermissions(node.permissions.locallySet, permissionList);\n        if (duplicatedPermissions.length > 0) {\n            const list = duplicatedPermissions.map((permission) => 'authority -> ' + permission.authorityId + ' / role -> ' + permission.name).join(', ');\n            const duplicatePermissionMessage: string = this.translation.instant('PERMISSION_MANAGER.ERROR.DUPLICATE-PERMISSION',  {list});\n            return throwError(duplicatePermissionMessage);\n        }\n        permissionBody.permissions.locallySet = node.permissions.locallySet ? node.permissions.locallySet.concat(permissionList) : permissionList;\n        return this.nodeService.updateNode(node.id, permissionBody);\n    }\n\n    private getDuplicatedPermissions(nodeLocallySet: PermissionElement[], permissionListAdded: PermissionElement[]): PermissionElement[] {\n        const duplicatePermissions: PermissionElement[] = [];\n        if (nodeLocallySet) {\n            permissionListAdded.forEach((permission: PermissionElement) => {\n                const duplicate = nodeLocallySet.find((localPermission) => this.isEqualPermission(localPermission, permission));\n                if (duplicate) {\n                    duplicatePermissions.push(duplicate);\n                }\n            });\n        }\n        return duplicatePermissions;\n    }\n\n    private isEqualPermission(oldPermission: PermissionElement, newPermission: PermissionElement): boolean {\n        return oldPermission.accessStatus === newPermission.accessStatus &&\n               oldPermission.authorityId === newPermission.authorityId &&\n               oldPermission.name === newPermission.name;\n    }\n\n    private transformNodeToPermissionElement(nodes: NodeEntry[], nodeRole: any): PermissionElement[] {\n        return nodes.map((node) => {\n            const newPermissionElement: PermissionElement = <PermissionElement> {\n                'authorityId': node.entry.properties['cm:authorityName'] ?\n                    node.entry.properties['cm:authorityName'] :\n                    node.entry.properties['cm:userName'],\n                'name': nodeRole,\n                'accessStatus': 'ALLOWED'\n            };\n            return newPermissionElement;\n        });\n    }\n\n    /**\n     * Removes a permission setting from a node.\n     * @param node ID of the target node\n     * @param permissionToRemove Permission setting to remove\n     * @returns Node with modified permissions\n     */\n    removePermission(node: Node, permissionToRemove: PermissionElement): Observable<Node> {\n        const permissionBody = { permissions: { locallySet: [] } };\n        const index = node.permissions.locallySet.map((permission) => permission.authorityId).indexOf(permissionToRemove.authorityId);\n        if (index !== -1) {\n            node.permissions.locallySet.splice(index, 1);\n            permissionBody.permissions.locallySet = node.permissions.locallySet;\n            return this.nodeService.updateNode(node.id, permissionBody);\n        }\n    }\n\n    private getGroupMembersBySiteName(siteName: string): Observable<string[]> {\n        const groupName = 'GROUP_site_' + siteName;\n        return this.getGroupMemberByGroupName(groupName)\n            .pipe(\n                map((groupMemberPaging: GroupMemberPaging) => {\n                    const displayResult: string[] = [];\n                    groupMemberPaging.list.entries.forEach((member: GroupMemberEntry) => {\n                        displayResult.push(this.formattedRoleName(member.entry.displayName, 'site_' + siteName));\n                    });\n                    return displayResult;\n                })\n            );\n    }\n\n    /**\n     * Gets all members related to a group name.\n     * @param groupName Name of group to look for members\n     * @param opts Extra options supported by JS-API\n     * @returns List of members\n     */\n    getGroupMemberByGroupName(groupName: string, opts?: any): Observable<GroupMemberPaging> {\n        return from(this.apiService.groupsApi.getGroupMembers(groupName, opts));\n    }\n\n    private formattedRoleName(displayName, siteName): string {\n        return displayName.replace(siteName + '_', '');\n    }\n\n    private buildRetrieveSiteQueryBody(nodePath: PathElement[]): QueryBody {\n        const pathNames = nodePath.map((node: PathElement) => 'name: \"' + node.name + '\"');\n        const buildedPathNames = pathNames.join(' OR ');\n        return {\n            'query': {\n                'query': buildedPathNames\n            },\n            'paging': {\n                'maxItems': 100,\n                'skipCount': 0\n            },\n            'include': ['aspectNames', 'properties'],\n            'filterQueries': [\n                {\n                    'query':\n                        \"TYPE:'st:site'\"\n                }\n            ]\n        };\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { Node, PermissionElement } from '@alfresco/js-api';\nimport { PermissionDisplayModel } from '../../models/permission.model';\nimport { NodePermissionService } from '../../services/node-permission.service';\n\n@Component({\n    selector: 'adf-permission-list',\n    templateUrl: './permission-list.component.html',\n    styleUrls: ['./permission-list.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class PermissionListComponent implements OnInit {\n\n    /** ID of the node whose permissions you want to show. */\n    @Input()\n    nodeId: string = '';\n\n    /** Emitted when the permission is updated. */\n    @Output()\n    update: EventEmitter<PermissionElement> = new EventEmitter();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    permissionList: PermissionDisplayModel[];\n    settableRoles: any[];\n    actualNode: Node;\n\n    constructor(private nodeService: NodesApiService,\n                private nodePermissionService: NodePermissionService) {\n\n    }\n\n    ngOnInit() {\n        this.fetchNodePermissions();\n    }\n\n    reload() {\n        this.fetchNodePermissions();\n    }\n\n    private fetchNodePermissions() {\n        this.nodeService.getNode(this.nodeId).subscribe((node: Node) => {\n            this.actualNode = node;\n            this.permissionList = this.getPermissionList(node);\n            this.nodePermissionService.getNodeRoles(node).subscribe((settableList: string[]) => {\n                this.settableRoles = settableList;\n            });\n        });\n    }\n\n    private getPermissionList(node: Node): PermissionDisplayModel[] {\n        const allPermissions: PermissionDisplayModel[] = [];\n        if (node.permissions.locallySet) {\n            node.permissions.locallySet.map((permissionElement: PermissionElement) => {\n                const permission = new PermissionDisplayModel(permissionElement);\n                allPermissions.push(permission);\n            });\n        }\n        if (node.permissions.inherited) {\n            node.permissions.inherited.map((permissionElement: PermissionElement) => {\n                const permissionInherited = new PermissionDisplayModel(permissionElement);\n                permissionInherited.isInherited = true;\n                allPermissions.push(permissionInherited);\n            });\n        }\n        return allPermissions;\n    }\n\n    saveNewRole(event: any, permissionRow: PermissionDisplayModel) {\n        const updatedPermissionRole: PermissionElement = this.buildUpdatedPermission(event.value, permissionRow);\n        this.nodePermissionService.updatePermissionRole(this.actualNode, updatedPermissionRole)\n            .subscribe(() => {\n                this.update.emit(updatedPermissionRole);\n            });\n    }\n\n    private buildUpdatedPermission(newRole: string, permissionRow: PermissionDisplayModel): PermissionElement {\n        const permissionRole: PermissionElement = {};\n        permissionRole.accessStatus = permissionRow.accessStatus;\n        permissionRole.name = newRole;\n        permissionRole.authorityId = permissionRow.authorityId;\n        return permissionRole;\n    }\n\n    removePermission(permissionRow: PermissionDisplayModel) {\n        this.nodePermissionService\n            .removePermission(this.actualNode, permissionRow)\n            .subscribe(\n                node => this.update.emit(node),\n                error => this.error.emit(error)\n            );\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\n\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'adf-no-permission-template',\n    template: '<ng-content></ng-content>'\n})\nexport class NoPermissionTemplateComponent {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* tslint:disable:no-input-rename  */\nimport { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { NodesApiService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\nimport { Node } from '@alfresco/js-api';\n\n@Directive({\n    selector: 'button[adf-inherit-permission], mat-button-toggle[adf-inherit-permission]',\n    host: {\n        'role': 'button',\n        '(click)': 'onInheritPermissionClicked()'\n    }\n})\nexport class InheritPermissionDirective {\n\n    /** ID of the node to add/remove inherited permissions. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the node is updated. */\n    @Output()\n    updated: EventEmitter<Node> = new EventEmitter<Node>();\n\n    /** Emitted when an error occurs. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(private nodeService: NodesApiService,\n                private contentService: ContentService) {\n    }\n\n    onInheritPermissionClicked() {\n        this.nodeService.getNode(this.nodeId).subscribe((node: Node) => {\n            if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {\n                const nodeBody = { permissions: { isInheritanceEnabled: !node.permissions.isInheritanceEnabled } };\n                this.nodeService.updateNode(this.nodeId, nodeBody, { include: ['permissions'] }).subscribe((nodeUpdated: Node) => {\n                    this.updated.emit(nodeUpdated);\n                }, (error) => this.error.emit(error));\n            } else {\n                this.error.emit('PERMISSION_MANAGER.ERROR.NOT-ALLOWED');\n            }\n        });\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material';\nimport { NodeEntry } from '@alfresco/js-api';\nimport { AddPermissionDialogData } from './add-permission-dialog-data.interface';\nimport { AddPermissionComponent } from '../add-permission/add-permission.component';\n\n@Component({\n    selector: 'adf-add-permission-dialog',\n    templateUrl: './add-permission-dialog.component.html',\n    styleUrls: ['./add-permission-dialog.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AddPermissionDialogComponent {\n\n    @ViewChild('addPermission')\n    addPermissionComponent: AddPermissionComponent;\n\n    currentSelection: NodeEntry[] = [];\n\n    constructor(@Inject(MAT_DIALOG_DATA) public data: AddPermissionDialogData) {\n    }\n\n    onSelect(items: NodeEntry[]) {\n        this.currentSelection = items;\n    }\n\n    onAddClicked() {\n        this.data.confirm.next(this.currentSelection);\n        this.data.confirm.complete();\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MatDialog } from '@angular/material';\nimport { Injectable } from '@angular/core';\nimport { Subject, Observable, throwError } from 'rxjs';\nimport { AddPermissionDialogComponent } from '../components/add-permission/add-permission-dialog.component';\nimport { AddPermissionDialogData } from '../components/add-permission/add-permission-dialog-data.interface';\nimport { NodeEntry, Node } from '@alfresco/js-api';\nimport { NodePermissionService } from './node-permission.service';\nimport { ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NodePermissionDialogService {\n\n    constructor(private dialog: MatDialog,\n                private nodePermissionService: NodePermissionService,\n                private contentService: ContentService) {\n    }\n\n    /**\n     * Opens a dialog to add permissions to a node.\n     * @param node ID of the target node\n     * @param title Dialog title\n     * @returns Node with updated permissions\n     */\n    openAddPermissionDialog(node: Node, title?: string): Observable<NodeEntry[]> {\n        if (this.contentService.hasAllowableOperations(node, AllowableOperationsEnum.UPDATEPERMISSIONS)) {\n            const confirm = new Subject<NodeEntry[]>();\n\n            confirm.subscribe({\n                complete: this.close.bind(this)\n            });\n\n            const data: AddPermissionDialogData = {\n                nodeId: node.id,\n                title: title,\n                confirm: confirm\n            };\n\n            this.openDialog(data, 'adf-add-permission-dialog', '630px');\n            return confirm;\n        } else {\n            const errors = new Error(JSON.stringify({ error: { statusCode: 403 } }));\n            errors.message = 'PERMISSION_MANAGER.ERROR.NOT-ALLOWED';\n            return throwError(errors);\n        }\n    }\n\n    private openDialog(data: any, currentPanelClass: string, chosenWidth: string) {\n        this.dialog.open(AddPermissionDialogComponent, { data, panelClass: currentPanelClass, width: chosenWidth });\n    }\n\n    /**\n     * Closes the currently-open dialog.\n     */\n    close() {\n        this.dialog.closeAll();\n    }\n\n    /**\n     * Opens a dialog to update permissions for a node.\n     * @param nodeId ID of the target node\n     * @param title Dialog title\n     * @returns Node with updated permissions\n     */\n    updateNodePermissionByDialog(nodeId?: string, title?: string): Observable<Node> {\n        return this.contentService.getNode(nodeId, { include: ['allowableOperations'] })\n            .pipe(\n                switchMap((node) => {\n                    return this.openAddPermissionDialog(node.entry, title)\n                        .pipe(\n                            switchMap((selection) => {\n                                return this.nodePermissionService.updateNodePermissions(nodeId, selection);\n                            })\n                        );\n                })\n            );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryBody } from '@alfresco/js-api';\nimport { SearchConfigurationInterface } from '@alfresco/adf-core';\n\nexport class SearchPermissionConfigurationService implements SearchConfigurationInterface {\n\n    constructor() {\n    }\n\n    public generateQueryBody(searchTerm: string, maxResults: number, skipCount: number): QueryBody {\n        const defaultQueryBody: QueryBody = {\n            query: {\n                query: searchTerm ? `authorityName:*${searchTerm}* OR userName:*${searchTerm}*` : searchTerm\n            },\n            include: ['properties', 'aspectNames'],\n            paging: {\n                maxItems: maxResults,\n                skipCount: skipCount\n            },\n            filterQueries: [\n                /*tslint:disable-next-line */\n                { query: \"TYPE:'cm:authority'\" }]\n        };\n\n        return defaultQueryBody;\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { SearchPermissionConfigurationService } from './search-config-permission.service';\nimport { SearchService, SearchConfigurationService } from '@alfresco/adf-core';\nimport { SearchComponent } from '../../../search/components/search.component';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\nimport { NodeEntry } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-add-permission-panel',\n    templateUrl: './add-permission-panel.component.html',\n    styleUrls: ['./add-permission-panel.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [\n        { provide: SearchConfigurationService, useClass: SearchPermissionConfigurationService },\n        SearchService\n    ]\n})\nexport class AddPermissionPanelComponent {\n\n    @ViewChild('search')\n    search: SearchComponent;\n\n    /** Emitted when a permission list item is selected. */\n    @Output()\n    select: EventEmitter<any> = new EventEmitter();\n\n    searchInput: FormControl = new FormControl();\n    searchedWord = '';\n    debounceSearch: number = 200;\n\n    selectedItems: NodeEntry[] = [];\n\n    EVERYONE: NodeEntry = new NodeEntry({ entry: { properties: {'cm:authorityName': 'GROUP_EVERYONE'}}});\n\n    constructor() {\n        this.searchInput.valueChanges\n        .pipe(\n            debounceTime(this.debounceSearch)\n        )\n        .subscribe((searchValue) => {\n            this.searchedWord = searchValue;\n            if (!searchValue) {\n                this.search.resetResults();\n            }\n        });\n    }\n\n    elementClicked(item: NodeEntry) {\n        if (this.isAlreadySelected(item)) {\n            this.selectedItems.splice(this.selectedItems.indexOf(item), 1);\n        } else {\n            this.selectedItems.push(item);\n        }\n        this.select.emit(this.selectedItems);\n    }\n\n    private isAlreadySelected(item: NodeEntry): boolean {\n        return this.selectedItems.indexOf(item) >= 0;\n    }\n\n    clearSearch() {\n        this.searchedWord = '';\n        this.selectedItems.splice(0, this.selectedItems.length);\n        this.search.resetResults();\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ViewEncapsulation, EventEmitter, Input, Output } from '@angular/core';\nimport { NodeEntry, Node } from '@alfresco/js-api';\nimport { NodePermissionService } from '../../services/node-permission.service';\nimport { NodesApiService, ContentService, AllowableOperationsEnum } from '@alfresco/adf-core';\n\n@Component({\n    selector: 'adf-add-permission',\n    templateUrl: './add-permission.component.html',\n    styleUrls: ['./add-permission.component.scss'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class AddPermissionComponent {\n\n    /** ID of the target node. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when the node is updated successfully. */\n    @Output()\n    success: EventEmitter<Node> = new EventEmitter();\n\n    /** Emitted when an error occurs during the update. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    selectedItems: NodeEntry[] = [];\n    currentNode: Node;\n    currentNodeRoles: string[];\n\n    constructor(private nodePermissionService: NodePermissionService,\n                private nodeApiService: NodesApiService,\n                private contentService: ContentService) {\n        this.nodeApiService.getNode(this.nodeId).subscribe((node) => this.currentNode = node);\n    }\n\n    onSelect(selection: NodeEntry[]) {\n        this.selectedItems = selection;\n    }\n\n    isAddEnabled(): boolean {\n        return this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS) &&\n                this.selectedItems.length !== 0;\n    }\n\n    applySelection() {\n        if (this.contentService.hasAllowableOperations(this.currentNode, AllowableOperationsEnum.UPDATEPERMISSIONS)) {\n            this.nodePermissionService.updateNodePermissions(this.nodeId, this.selectedItems)\n                .subscribe(\n                    (node) => {\n                        this.success.emit(node);\n                    },\n                    (error) => {\n                        this.error.emit(error);\n                    });\n        }\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\nimport { PermissionListComponent } from './components/permission-list/permission-list.component';\nimport { AddPermissionComponent } from './components/add-permission/add-permission.component';\nimport { AddPermissionDialogComponent } from './components/add-permission/add-permission-dialog.component';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { InheritPermissionDirective } from './components/inherited-button.directive';\nimport { NoPermissionTemplateComponent } from './components/permission-list/no-permission.component';\nimport { AddPermissionPanelComponent } from './components/add-permission/add-permission-panel.component';\nimport { SearchModule } from '../search/search.module';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        SearchModule\n    ],\n    declarations: [\n        PermissionListComponent,\n        NoPermissionTemplateComponent,\n        AddPermissionPanelComponent,\n        InheritPermissionDirective,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ],\n    entryComponents: [\n        AddPermissionPanelComponent,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ],\n    exports: [\n        PermissionListComponent,\n        NoPermissionTemplateComponent,\n        AddPermissionPanelComponent,\n        InheritPermissionDirective,\n        AddPermissionComponent,\n        AddPermissionDialogComponent\n    ]\n})\nexport class PermissionManagerModule {}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Component,\n    Inject,\n    OnInit,\n    ViewEncapsulation,\n    ViewChild,\n    OnDestroy\n} from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatDialog, MatSlideToggleChange } from '@angular/material';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Observable, throwError, Subject } from 'rxjs';\nimport {\n    skip,\n    distinctUntilChanged,\n    mergeMap,\n    catchError,\n    takeUntil\n} from 'rxjs/operators';\nimport {\n    SharedLinksApiService,\n    NodesApiService,\n    ContentService,\n    RenditionsService,\n    AppConfigService\n} from '@alfresco/adf-core';\nimport { SharedLinkEntry, Node } from '@alfresco/js-api';\nimport { ConfirmDialogComponent } from '../dialogs/confirm.dialog';\nimport moment from 'moment-es6';\nimport { ContentNodeShareSettings } from './content-node-share.settings';\n\n@Component({\n    selector: 'adf-share-dialog',\n    templateUrl: './content-node-share.dialog.html',\n    styleUrls: ['./content-node-share.dialog.scss'],\n    host: { class: 'adf-share-dialog' },\n    encapsulation: ViewEncapsulation.None\n})\nexport class ShareDialogComponent implements OnInit, OnDestroy {\n\n    minDate = moment().add(1, 'd');\n    sharedId: string;\n    fileName: string;\n    baseShareUrl: string;\n    isFileShared: boolean = false;\n    isDisabled: boolean = false;\n    form: FormGroup = new FormGroup({\n        sharedUrl: new FormControl(''),\n        time: new FormControl({ value: '', disabled: false })\n    });\n    type = 'datetime';\n\n    @ViewChild('matDatetimepickerToggle')\n    matDatetimepickerToggle;\n\n    @ViewChild('slideToggleExpirationDate')\n    slideToggleExpirationDate;\n\n    @ViewChild('dateTimePickerInput')\n    dateTimePickerInput;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private appConfigService: AppConfigService,\n        private sharedLinksApiService: SharedLinksApiService,\n        private dialogRef: MatDialogRef<ShareDialogComponent>,\n        private dialog: MatDialog,\n        private nodesApiService: NodesApiService,\n        private contentService: ContentService,\n        private renditionService: RenditionsService,\n        @Inject(MAT_DIALOG_DATA) public data: ContentNodeShareSettings\n    ) {}\n\n    ngOnInit() {\n        this.type = this.appConfigService.get<string>('sharedLinkDateTimePickerType', 'datetime');\n\n        if (!this.canUpdate) {\n            this.form.controls['time'].disable();\n        }\n\n        this.form.controls.time.valueChanges\n            .pipe(\n                skip(1),\n                distinctUntilChanged(),\n                mergeMap(\n                    (updates) => this.updateNode(updates),\n                    (formUpdates) => formUpdates\n                ),\n                catchError((error) => {\n                    return throwError(error);\n                }),\n                takeUntil(this.onDestroy$)\n            )\n            .subscribe(updates => this.updateEntryExpiryDate(updates));\n\n        if (this.data.node && this.data.node.entry) {\n            this.fileName = this.data.node.entry.name;\n            this.baseShareUrl = this.data.baseShareUrl;\n            const properties = this.data.node.entry.properties;\n\n            if (!properties || !properties['qshare:sharedId']) {\n                this.createSharedLinks(this.data.node.entry.id);\n            } else {\n                this.sharedId = properties['qshare:sharedId'];\n                this.isFileShared = true;\n\n                this.updateForm();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    removeShare() {\n        this.deleteSharedLink(this.sharedId);\n    }\n\n    onSlideShareChange(event: any) {\n        if (event.checked) {\n            this.createSharedLinks(this.data.node.entry.id);\n        } else {\n            this.openConfirmationDialog();\n        }\n    }\n\n    get canUpdate() {\n        const { entry } = this.data.node;\n\n        if (entry && entry.allowableOperations) {\n            return this.contentService.hasAllowableOperations(entry, 'update');\n        }\n\n        return true;\n    }\n\n    onToggleExpirationDate(slideToggle: MatSlideToggleChange) {\n        if (slideToggle.checked) {\n            this.matDatetimepickerToggle.datetimepicker.open();\n        } else {\n            this.matDatetimepickerToggle.datetimepicker.close();\n            this.form.controls.time.setValue(null);\n        }\n    }\n\n    onDatetimepickerClosed() {\n        this.dateTimePickerInput.nativeElement.blur();\n\n        if (!this.form.controls.time.value) {\n            this.slideToggleExpirationDate.checked = false;\n        }\n    }\n\n    private openConfirmationDialog() {\n        this.isFileShared = false;\n\n        this.dialog\n            .open(ConfirmDialogComponent, {\n                data: {\n                    title: 'SHARE.CONFIRMATION.DIALOG-TITLE',\n                    message: 'SHARE.CONFIRMATION.MESSAGE',\n                    yesLabel: 'SHARE.CONFIRMATION.REMOVE',\n                    noLabel: 'SHARE.CONFIRMATION.CANCEL'\n                },\n                minWidth: '250px',\n                closeOnNavigation: true\n            })\n            .beforeClose()\n            .subscribe((deleteSharedLink) => {\n                if (deleteSharedLink) {\n                    this.deleteSharedLink(this.sharedId);\n                } else {\n                    this.isFileShared = true;\n                }\n            });\n    }\n\n    private createSharedLinks(nodeId: string) {\n        this.isDisabled = true;\n\n        this.sharedLinksApiService.createSharedLinks(nodeId).subscribe(\n            (sharedLink: SharedLinkEntry) => {\n                if (sharedLink.entry) {\n                    this.sharedId = sharedLink.entry.id;\n                    if (this.data.node.entry.properties) {\n                        this.data.node.entry.properties['qshare:sharedId'] = this.sharedId;\n                    } else {\n                        this.data.node.entry.properties = {\n                            'qshare:sharedId': this.sharedId\n                        };\n                    }\n                    this.isDisabled = false;\n                    this.isFileShared = true;\n                    this.renditionService\n                        .generateRenditionForNode(this.data.node.entry.id)\n                        .subscribe(() => {});\n\n                    this.updateForm();\n                }\n            },\n            () => {\n                this.isDisabled = false;\n                this.isFileShared = false;\n            }\n        );\n    }\n\n    deleteSharedLink(sharedId: string) {\n        this.isDisabled = true;\n\n        this.sharedLinksApiService\n            .deleteSharedLink(sharedId)\n            .subscribe((response: any) => {\n                if (response instanceof Error) {\n                    this.isDisabled = false;\n                    this.isFileShared = true;\n                    this.handleError(response);\n                } else {\n                    if (this.data.node.entry.properties) {\n                        this.data.node.entry.properties['qshare:sharedId'] = null;\n                        this.data.node.entry.properties['qshare:expiryDate'] = null;\n                    }\n                    this.dialogRef.close(false);\n                }\n            }\n        );\n    }\n\n    private handleError(error: Error) {\n        let message = 'SHARE.UNSHARE_ERROR';\n        let statusCode = 0;\n\n        try {\n            statusCode = JSON.parse(error.message).error.statusCode;\n        } catch {}\n\n        if (statusCode === 403) {\n            message = 'SHARE.UNSHARE_PERMISSION_ERROR';\n        }\n\n        this.sharedLinksApiService.error.next({\n            statusCode,\n            message\n        });\n    }\n\n    private updateForm() {\n        const { entry } = this.data.node;\n        let expiryDate = null;\n\n        if (entry && entry.properties) {\n            expiryDate = entry.properties['qshare:expiryDate'];\n        }\n\n        this.form.setValue({\n            sharedUrl: `${this.baseShareUrl}${this.sharedId}`,\n            time: expiryDate ? moment(expiryDate).local() : null\n        });\n    }\n\n    private updateNode(date: moment.Moment): Observable<Node> {\n        return this.nodesApiService.updateNode(this.data.node.entry.id, {\n            properties: {\n                'qshare:expiryDate': date ?\n                    (this.type === 'date' ? date.endOf('day').utc().format() : date.utc().format()) :\n                    null\n            }\n        });\n    }\n\n    private updateEntryExpiryDate(date: moment.Moment) {\n        const { properties } = this.data.node.entry;\n\n        if (properties) {\n            properties['qshare:expiryDate'] = date\n                ? date.local()\n                : null;\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Directive, Input, HostListener, OnChanges, NgZone, OnDestroy } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { NodeEntry, Node } from '@alfresco/js-api';\n\nimport { ShareDialogComponent } from './content-node-share.dialog';\nimport { Observable, from, Subject } from 'rxjs';\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n    selector: '[adf-share]',\n    exportAs: 'adfShare'\n})\nexport class NodeSharedDirective implements OnChanges, OnDestroy {\n\n    isFile: boolean = false;\n    isShared: boolean = false;\n\n    /** Node to share. */\n        // tslint:disable-next-line:no-input-rename\n    @Input('adf-share')\n    node: NodeEntry;\n\n    /** Prefix to add to the generated link. */\n    @Input()\n    baseShareUrl: string;\n\n    private onDestroy$ = new Subject<boolean>();\n\n    constructor(\n        private dialog: MatDialog,\n        private zone: NgZone,\n        private alfrescoApiService: AlfrescoApiService) {\n    }\n\n    ngOnDestroy() {\n        this.onDestroy$.next(true);\n        this.onDestroy$.complete();\n    }\n\n    shareNode(nodeEntry: NodeEntry) {\n        if (nodeEntry && nodeEntry.entry && nodeEntry.entry.isFile) {\n            // shared and favorite\n            const nodeId = nodeEntry.entry['nodeId'] || nodeEntry.entry['guid'];\n\n            if (nodeId) {\n                this.getNodeInfo(nodeId).subscribe((entry) => {\n                  this.openShareLinkDialog({ entry });\n                });\n            } else {\n                this.openShareLinkDialog(nodeEntry);\n            }\n        }\n    }\n\n    private getNodeInfo(nodeId: string): Observable<Node> {\n        const options = {\n          include: ['allowableOperations']\n        };\n\n        return from(this.alfrescoApiService.nodesApi.getNodeInfo(nodeId, options));\n      }\n\n    private openShareLinkDialog(node: NodeEntry) {\n        this.dialog.open(ShareDialogComponent, {\n            width: '600px',\n            panelClass: 'adf-share-link-dialog',\n            data: {\n                node,\n                baseShareUrl: this.baseShareUrl\n            }\n        });\n    }\n\n    ngOnChanges() {\n        this.zone.onStable\n            .pipe(takeUntil(this.onDestroy$))\n            .subscribe(() => {\n                if (this.node && this.node.entry) {\n                    this.isFile = this.node.entry.isFile;\n                    this.isShared = this.node.entry.properties ? this.node.entry.properties['qshare:sharedId'] : false;\n                }\n            });\n    }\n\n    @HostListener('click')\n    onClick() {\n        if (this.node) {\n            this.shareNode(this.node);\n        }\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '@alfresco/adf-core';\nimport { MaterialModule } from '../material.module';\nimport { ShareDialogComponent } from './content-node-share.dialog';\nimport { NodeSharedDirective } from './content-node-share.directive';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        ShareDialogComponent,\n        NodeSharedDirective\n    ],\n    exports: [\n        ShareDialogComponent,\n        NodeSharedDirective\n    ],\n    entryComponents: [\n        ShareDialogComponent\n    ]\n})\nexport class ContentNodeShareModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ContentNodeShareModule\n        };\n    }\n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ContentNodeShareModule\n        };\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NodeEntry } from '@alfresco/js-api';\n\nexport class TreeBaseNode {\n\n    name: string;\n    nodeId: string;\n    level: number;\n    expandable = true;\n    node: NodeEntry;\n\n    constructor(nodeEntry: NodeEntry, level?: number, expandable?: boolean) {\n        this.name = nodeEntry.entry.name;\n        this.nodeId = nodeEntry.entry.id;\n        this.level = level ? level : 0;\n        this.expandable = expandable ? expandable : true;\n        this.node = nodeEntry ? new NodeEntry(nodeEntry) : undefined;\n\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NodesApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TreeBaseNode } from '../models/tree-view.model';\nimport { NodePaging, NodeEntry } from '@alfresco/js-api';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TreeViewService {\n\n    constructor(private nodeApi: NodesApiService) {\n    }\n\n    getTreeNodes(nodeId): Observable<TreeBaseNode[]> {\n        return this.nodeApi.getNodeChildren(nodeId)\n            .pipe(\n                map((nodePage: NodePaging) => {\n                    return nodePage.list.entries.filter((node) => node.entry.isFolder ? node : null);\n                }),\n                map((nodes: NodeEntry[]) => nodes.map((node) => new TreeBaseNode(node)))\n            );\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { CollectionViewer, SelectionChange } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { TreeBaseNode } from '../models/tree-view.model';\nimport { TreeViewService } from '../services/tree-view.service';\n\n@Injectable()\nexport class TreeViewDataSource {\n\n    treeNodes: TreeBaseNode[];\n    dataChange = new BehaviorSubject<TreeBaseNode[]>([]);\n    childrenSubscription = null;\n    changeSubscription = null;\n\n    get data(): TreeBaseNode[] {\n        return this.treeNodes;\n    }\n\n    set data(value: TreeBaseNode[]) {\n        this.treeControl.dataNodes = value;\n        this.dataChange.next(value);\n    }\n\n    constructor(private treeControl: FlatTreeControl<TreeBaseNode>,\n                private treeViewService: TreeViewService) {\n        this.dataChange.subscribe((treeNodes) => this.treeNodes = treeNodes);\n    }\n\n    connect(collectionViewer: CollectionViewer): Observable<TreeBaseNode[]> {\n        this.changeSubscription = this.treeControl.expansionModel.onChange.subscribe((change) => {\n            if ((change as SelectionChange<TreeBaseNode>).added &&\n                (change as SelectionChange<TreeBaseNode>).added.length > 0) {\n                this.expandTreeNodes(change as SelectionChange<TreeBaseNode>);\n            } else if ((change as SelectionChange<TreeBaseNode>).removed) {\n                this.reduceTreeNodes(change as SelectionChange<TreeBaseNode>);\n            }\n        });\n        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        if (this.childrenSubscription) {\n            this.childrenSubscription.unsubscribe();\n        }\n        if (this.changeSubscription) {\n            this.changeSubscription.unsubscribe();\n        }\n    }\n\n    private expandTreeNodes(change: SelectionChange<TreeBaseNode>) {\n        change.added.forEach((node) => this.expandNode(node));\n    }\n\n    private reduceTreeNodes(change: SelectionChange<TreeBaseNode>) {\n        change.removed.slice().reverse().forEach((node) => this.toggleNode(node));\n    }\n\n    private expandNode(node: TreeBaseNode) {\n        this.childrenSubscription = this.treeViewService.getTreeNodes(node.nodeId)\n            .subscribe((children) => {\n                const index = this.data.indexOf(node);\n                if (!children || index < 0) {\n                    node.expandable = false;\n                    return;\n                }\n                const nodes = children.map((actualNode) => {\n                    actualNode.level = node.level + 1;\n                    return actualNode;\n                });\n                this.data.splice(index + 1, 0, ...nodes);\n                this.dataChange.next(this.data);\n            });\n    }\n\n    toggleNode(node: TreeBaseNode) {\n        const index = this.data.indexOf(node);\n        let count = 0;\n        for (let i = index + 1; i < this.data.length\n            && this.data[i].level > node.level; i++ , count++) { }\n        this.data.splice(index + 1, count);\n        this.dataChange.next(this.data);\n    }\n\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { Component, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { TreeBaseNode } from '../models/tree-view.model';\nimport { TreeViewDataSource } from '../data/tree-view-datasource';\nimport { TreeViewService } from '../services/tree-view.service';\nimport { NodeEntry } from '@alfresco/js-api';\n\n@Component({\n    selector: 'adf-tree-view-list',\n    templateUrl: 'tree-view.component.html',\n    styleUrls: ['tree-view.component.scss']\n})\n\nexport class TreeViewComponent implements OnChanges {\n\n    /** Identifier of the node to display. */\n    @Input()\n    nodeId: string;\n\n    /** Emitted when a node in the tree view is clicked. */\n    @Output()\n    nodeClicked: EventEmitter<NodeEntry> = new EventEmitter();\n\n    /** Emitted when an invalid node id is given. */\n    @Output()\n    error: EventEmitter<any> = new EventEmitter();\n\n    treeControl: FlatTreeControl<TreeBaseNode>;\n    dataSource: TreeViewDataSource;\n\n    constructor(private treeViewService: TreeViewService) {\n        this.treeControl = new FlatTreeControl<TreeBaseNode>(this.getLevel, this.isExpandable);\n        this.dataSource = new TreeViewDataSource(this.treeControl, this.treeViewService);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['nodeId'] && changes['nodeId'].currentValue &&\n            changes['nodeId'].currentValue !== changes['nodeId'].previousValue) {\n            this.loadTreeNode();\n        } else {\n            this.dataSource.data = [];\n        }\n    }\n\n    onNodeClicked(node: NodeEntry) {\n        this.nodeClicked.emit(node);\n    }\n\n    getLevel = (node: TreeBaseNode) => node.level;\n\n    isExpandable = (node: TreeBaseNode) => node.expandable;\n\n    hasChild = (level: number, nodeData: TreeBaseNode) => nodeData.expandable;\n\n    private loadTreeNode() {\n        this.treeViewService.getTreeNodes(this.nodeId)\n            .subscribe(\n                (treeNode: TreeBaseNode[]) => {\n                    this.dataSource.data = treeNode;\n                },\n                (error) => this.error.emit(error)\n            );\n    }\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\nimport { TreeViewComponent } from './components/tree-view.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule.forChild()\n    ],\n    declarations: [\n        TreeViewComponent\n    ],\n    exports: [\n        TreeViewComponent\n    ]\n})\nexport class TreeViewModule {\n}\n","/*!\n * @license\n * Copyright 2019 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';\n\nimport { MaterialModule } from './material.module';\n\nimport { SocialModule } from './social/social.module';\nimport { TagModule } from './tag/tag.module';\nimport { WebScriptModule } from './webscript/webscript.module';\nimport { DocumentListModule } from './document-list/document-list.module';\nimport { UploadModule } from './upload/upload.module';\nimport { SearchModule } from './search/search.module';\nimport { SitesDropdownModule } from './site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from './breadcrumb/breadcrumb.module';\nimport { VersionManagerModule } from './version-manager/version-manager.module';\nimport { ContentNodeSelectorModule } from './content-node-selector/content-node-selector.module';\nimport { ContentNodeShareModule } from './content-node-share/content-node-share.module';\nimport { ContentDirectiveModule } from './directives/content-directive.module';\nimport { DialogModule } from './dialogs/dialog.module';\nimport { FolderDirectiveModule } from './folder-directive/folder-directive.module';\nimport { ContentMetadataModule } from './content-metadata/content-metadata.module';\nimport { PermissionManagerModule } from './permission-manager/permission-manager.module';\nimport { TreeViewModule } from './tree-view/tree-view.module';\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        SocialModule,\n        TagModule,\n        CommonModule,\n        WebScriptModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DialogModule,\n        SearchModule,\n        DocumentListModule,\n        UploadModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ],\n    exports: [\n        SocialModule,\n        TagModule,\n        WebScriptModule,\n        DocumentListModule,\n        UploadModule,\n        SearchModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ]\n})\nexport class ContentModuleLazy {}\n\n@NgModule({\n    imports: [\n        CoreModule.forChild(),\n        SocialModule,\n        TagModule,\n        CommonModule,\n        WebScriptModule,\n        FormsModule,\n        ReactiveFormsModule,\n        DialogModule,\n        SearchModule,\n        DocumentListModule,\n        UploadModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-content-services',\n                source: 'assets/adf-content-services'\n            }\n        }\n    ],\n    exports: [\n        SocialModule,\n        TagModule,\n        WebScriptModule,\n        DocumentListModule,\n        UploadModule,\n        SearchModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ContentNodeSelectorModule,\n        ContentNodeShareModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule,\n        ContentDirectiveModule,\n        PermissionManagerModule,\n        VersionManagerModule,\n        TreeViewModule\n    ]\n})\nexport class ContentModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: ContentModule,\n            providers: [\n                {\n                    provide: TRANSLATION_PROVIDER,\n                    multi: true,\n                    useValue: {\n                        name: 'adf-content-services',\n                        source: 'assets/adf-content-services'\n                    }\n                }\n            ]\n        };\n    }\n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ContentModuleLazy\n        };\n    }\n}\n"]}