/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { Node } from '@alfresco/js-api';
import { Subject, of } from 'rxjs';
import { NodesApiService, LogService, CardViewUpdateService, AlfrescoApiService, TranslationService } from '@alfresco/adf-core';
import { ContentMetadataService } from '../../services/content-metadata.service';
import { switchMap, takeUntil, catchError } from 'rxjs/operators';
export class ContentMetadataComponent {
    /**
     * @param {?} contentMetadataService
     * @param {?} cardViewUpdateService
     * @param {?} nodesApiService
     * @param {?} logService
     * @param {?} alfrescoApiService
     * @param {?} translationService
     */
    constructor(contentMetadataService, cardViewUpdateService, nodesApiService, logService, alfrescoApiService, translationService) {
        this.contentMetadataService = contentMetadataService;
        this.cardViewUpdateService = cardViewUpdateService;
        this.nodesApiService = nodesApiService;
        this.logService = logService;
        this.alfrescoApiService = alfrescoApiService;
        this.translationService = translationService;
        this.onDestroy$ = new Subject();
        /**
         * Toggles whether the edit button should be shown
         */
        this.editable = false;
        /**
         * Toggles whether to display empty values in the card view
         */
        this.displayEmpty = false;
        /**
         * Toggles between expanded (ie, full information) and collapsed
         * (ie, reduced information) in the display
         */
        this.expanded = false;
        /**
         * The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time
         */
        this.multi = false;
        /**
         * Toggles whether the metadata properties should be shown
         */
        this.displayDefaultProperties = true;
        /**
         * (Optional) shows the given aspect in the expanded  card
         */
        this.displayAspect = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.cardViewUpdateService.itemUpdated$
            .pipe(switchMap((/**
         * @param {?} changes
         * @return {?}
         */
        (changes) => this.saveNode(changes).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.handleUpdateError(err);
            return of(null);
        }))))), takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} updatedNode
         * @return {?}
         */
        (updatedNode) => {
            if (updatedNode) {
                Object.assign(this.node, updatedNode);
                this.alfrescoApiService.nodeUpdated.next(this.node);
            }
        }));
        this.loadProperties(this.node);
    }
    /**
     * @protected
     * @param {?} error
     * @return {?}
     */
    handleUpdateError(error) {
        this.logService.error(error);
        /** @type {?} */
        let statusCode = 0;
        try {
            statusCode = JSON.parse(error.message).error.statusCode;
        }
        catch (_a) {
        }
        /** @type {?} */
        let message = `METADATA.ERRORS.${statusCode}`;
        if (this.translationService.instant(message) === message) {
            message = 'METADATA.ERRORS.GENERIC';
        }
        this.contentMetadataService.error.next({
            statusCode,
            message
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.node && !changes.node.firstChange) {
            this.loadProperties(changes.node.currentValue);
        }
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    loadProperties(node) {
        if (node) {
            this.basicProperties$ = this.contentMetadataService.getBasicProperties(node);
            this.groupedProperties$ = this.contentMetadataService.getGroupedProperties(node, this.preset);
        }
    }
    /**
     * @private
     * @param {?} __0
     * @return {?}
     */
    saveNode({ changed: nodeBody }) {
        return this.nodesApiService.updateNode(this.node.id, nodeBody);
    }
    /**
     * @param {?} group
     * @return {?}
     */
    showGroup(group) {
        /** @type {?} */
        const properties = group.properties.filter((/**
         * @param {?} property
         * @return {?}
         */
        (property) => {
            return !!property.displayValue;
        }));
        return properties.length > 0;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @param {?} group
     * @return {?}
     */
    canExpandTheCard(group) {
        return group.title === this.displayAspect;
    }
    /**
     * @return {?}
     */
    canExpandProperties() {
        return !this.expanded || this.displayAspect === 'Properties';
    }
}
ContentMetadataComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-content-metadata',
                template: "<div class=\"adf-metadata-properties\">\n    <mat-accordion displayMode=\"flat\" [multi]=\"multi\">\n        <mat-expansion-panel\n            *ngIf=\"displayDefaultProperties\"\n            [expanded]=\"canExpandProperties()\"\n            [hideToggle]=\"canExpandProperties()\"\n            [attr.data-automation-id]=\"'adf-metadata-group-properties'\" >\n            <mat-expansion-panel-header>\n                <mat-panel-title>\n                    {{ 'CORE.METADATA.BASIC.HEADER' | translate }}\n                </mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <adf-card-view\n                [properties]=\"basicProperties$ | async\"\n                [editable]=\"editable\"\n                [displayEmpty]=\"displayEmpty\">\n            </adf-card-view>\n        </mat-expansion-panel>\n\n        <ng-container *ngIf=\"expanded\">\n            <ng-container *ngIf=\"groupedProperties$ | async; else loading; let groupedProperties\">\n                <div *ngFor=\"let group of groupedProperties; let first = first;\" class=\"adf-metadata-grouped-properties-container\">\n                    <mat-expansion-panel *ngIf=\"showGroup(group) || editable\"\n                    [attr.data-automation-id]=\"'adf-metadata-group-' + group.title\"\n                    [expanded]=\"canExpandTheCard(group) || !displayDefaultProperties && first\">\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>\n                                {{ group.title | translate }}\n                            </mat-panel-title>\n                        </mat-expansion-panel-header>\n\n                        <adf-card-view\n                            [properties]=\"group.properties\"\n                            [editable]=\"editable\"\n                            [displayEmpty]=\"displayEmpty\">\n                        </adf-card-view>\n                    </mat-expansion-panel>\n\n                </div>\n            </ng-container>\n            <ng-template #loading>\n                <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </ng-template>\n        </ng-container>\n    </mat-accordion>\n</div>\n",
                host: { 'class': 'adf-content-metadata' },
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
ContentMetadataComponent.ctorParameters = () => [
    { type: ContentMetadataService },
    { type: CardViewUpdateService },
    { type: NodesApiService },
    { type: LogService },
    { type: AlfrescoApiService },
    { type: TranslationService }
];
ContentMetadataComponent.propDecorators = {
    node: [{ type: Input }],
    editable: [{ type: Input }],
    displayEmpty: [{ type: Input }],
    expanded: [{ type: Input }],
    multi: [{ type: Input }],
    preset: [{ type: Input }],
    displayDefaultProperties: [{ type: Input }],
    displayAspect: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ContentMetadataComponent.prototype.onDestroy$;
    /**
     * (required) The node entity to fetch metadata about
     * @type {?}
     */
    ContentMetadataComponent.prototype.node;
    /**
     * Toggles whether the edit button should be shown
     * @type {?}
     */
    ContentMetadataComponent.prototype.editable;
    /**
     * Toggles whether to display empty values in the card view
     * @type {?}
     */
    ContentMetadataComponent.prototype.displayEmpty;
    /**
     * Toggles between expanded (ie, full information) and collapsed
     * (ie, reduced information) in the display
     * @type {?}
     */
    ContentMetadataComponent.prototype.expanded;
    /**
     * The multi parameter of the underlying material expansion panel, set to true to allow multi accordion to be expanded at the same time
     * @type {?}
     */
    ContentMetadataComponent.prototype.multi;
    /**
     * Name of the metadata preset, which defines aspects and their properties
     * @type {?}
     */
    ContentMetadataComponent.prototype.preset;
    /**
     * Toggles whether the metadata properties should be shown
     * @type {?}
     */
    ContentMetadataComponent.prototype.displayDefaultProperties;
    /**
     * (Optional) shows the given aspect in the expanded  card
     * @type {?}
     */
    ContentMetadataComponent.prototype.displayAspect;
    /** @type {?} */
    ContentMetadataComponent.prototype.basicProperties$;
    /** @type {?} */
    ContentMetadataComponent.prototype.groupedProperties$;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.contentMetadataService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.cardViewUpdateService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.nodesApiService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.logService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.alfrescoApiService;
    /**
     * @type {?}
     * @private
     */
    ContentMetadataComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,