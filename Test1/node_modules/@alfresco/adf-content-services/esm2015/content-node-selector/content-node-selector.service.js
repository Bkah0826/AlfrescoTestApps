/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SearchService } from '@alfresco/adf-core';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@alfresco/adf-core";
/**
 * Internal service used by ContentNodeSelector component.
 */
export class ContentNodeSelectorService {
    /**
     * @param {?} searchService
     */
    constructor(searchService) {
        this.searchService = searchService;
    }
    /**
     * Performs a search for content node selection
     *
     * @param {?} searchTerm    The term to search for
     * @param {?=} rootNodeId    The root is to start the search from
     * @param {?=} skipCount     From where to start the loading
     * @param {?=} maxItems      How many items to load
     * @param {?=} extraNodeIds
     * @return {?}
     */
    search(searchTerm, rootNodeId = null, skipCount = 0, maxItems = 25, extraNodeIds) {
        /** @type {?} */
        let extraParentFiltering = '';
        if (extraNodeIds && extraNodeIds.length) {
            extraNodeIds
                .filter((/**
             * @param {?} id
             * @return {?}
             */
            (id) => id !== rootNodeId))
                .forEach((/**
             * @param {?} extraId
             * @return {?}
             */
            (extraId) => {
                extraParentFiltering += ` OR ANCESTOR:'workspace://SpacesStore/${extraId}'`;
            }));
        }
        /** @type {?} */
        const parentFiltering = rootNodeId ? [{ query: `ANCESTOR:'workspace://SpacesStore/${rootNodeId}'${extraParentFiltering}` }] : [];
        /** @type {?} */
        const defaultSearchNode = {
            query: {
                query: `${searchTerm}* OR name:${searchTerm}*`
            },
            include: ['path', 'allowableOperations', 'properties'],
            paging: {
                maxItems: maxItems,
                skipCount: skipCount
            },
            filterQueries: [
                { query: "TYPE:'cm:folder'" },
                { query: 'NOT cm:creator:System' },
                ...parentFiltering
            ],
            scope: {
                locations: ['nodes']
            }
        };
        return this.searchService.searchByQueryBody(defaultSearchNode);
    }
}
ContentNodeSelectorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ContentNodeSelectorService.ctorParameters = () => [
    { type: SearchService }
];
/** @nocollapse */ ContentNodeSelectorService.ngInjectableDef = i0.defineInjectable({ factory: function ContentNodeSelectorService_Factory() { return new ContentNodeSelectorService(i0.inject(i1.SearchService)); }, token: ContentNodeSelectorService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ContentNodeSelectorService.prototype.searchService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYWxmcmVzY28vYWRmLWNvbnRlbnQtc2VydmljZXMvIiwic291cmNlcyI6WyJjb250ZW50LW5vZGUtc2VsZWN0b3IvY29udGVudC1ub2RlLXNlbGVjdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7OztBQVUzQyxNQUFNLE9BQU8sMEJBQTBCOzs7O0lBRW5DLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQ2hELENBQUM7Ozs7Ozs7Ozs7O0lBYU0sTUFBTSxDQUFDLFVBQWtCLEVBQUUsYUFBcUIsSUFBSSxFQUFFLFlBQW9CLENBQUMsRUFBRSxXQUFtQixFQUFFLEVBQUUsWUFBdUI7O1lBRTFILG9CQUFvQixHQUFHLEVBQUU7UUFFN0IsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLE1BQU0sRUFBRTtZQUNyQyxZQUFZO2lCQUNQLE1BQU07Ozs7WUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLFVBQVUsRUFBQztpQkFDakMsT0FBTzs7OztZQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ2pCLG9CQUFvQixJQUFJLHlDQUF5QyxPQUFPLEdBQUcsQ0FBQztZQUNoRixDQUFDLEVBQUMsQ0FBQztTQUNWOztjQUVLLGVBQWUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUscUNBQXFDLFVBQVUsSUFBSSxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTs7Y0FFMUgsaUJBQWlCLEdBQVE7WUFDM0IsS0FBSyxFQUFFO2dCQUNILEtBQUssRUFBRSxHQUFHLFVBQVUsYUFBYSxVQUFVLEdBQUc7YUFDakQ7WUFDRCxPQUFPLEVBQUUsQ0FBQyxNQUFNLEVBQUUscUJBQXFCLEVBQUUsWUFBWSxDQUFDO1lBQ3RELE1BQU0sRUFBRTtnQkFDSixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsU0FBUyxFQUFFLFNBQVM7YUFDdkI7WUFDRCxhQUFhLEVBQUU7Z0JBQ1gsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQzdCLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFO2dCQUNsQyxHQUFHLGVBQWU7YUFDckI7WUFDRCxLQUFLLEVBQUU7Z0JBQ0gsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO2FBQ3ZCO1NBQ0o7UUFFRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7WUFyREosVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7O1lBVlEsYUFBYTs7Ozs7Ozs7SUFhTixtREFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBBbGZyZXNjbyBTb2Z0d2FyZSwgTHRkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBTZWFyY2hTZXJ2aWNlIH0gZnJvbSAnQGFsZnJlc2NvL2FkZi1jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5vZGVQYWdpbmcgfSBmcm9tICdAYWxmcmVzY28vanMtYXBpJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBJbnRlcm5hbCBzZXJ2aWNlIHVzZWQgYnkgQ29udGVudE5vZGVTZWxlY3RvciBjb21wb25lbnQuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ29udGVudE5vZGVTZWxlY3RvclNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzZWFyY2hTZXJ2aWNlOiBTZWFyY2hTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBzZWFyY2ggZm9yIGNvbnRlbnQgbm9kZSBzZWxlY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzZWFyY2hUZXJtICAgIFRoZSB0ZXJtIHRvIHNlYXJjaCBmb3JcbiAgICAgKiBAcGFyYW0gcm9vdE5vZGVJZCAgICBUaGUgcm9vdCBpcyB0byBzdGFydCB0aGUgc2VhcmNoIGZyb21cbiAgICAgKiBAcGFyYW0gc2tpcENvdW50ICAgICBGcm9tIHdoZXJlIHRvIHN0YXJ0IHRoZSBsb2FkaW5nXG4gICAgICogQHBhcmFtIG1heEl0ZW1zICAgICAgSG93IG1hbnkgaXRlbXMgdG8gbG9hZFxuICAgICAqIEBwYXJhbSBbZXh0cmFOb2RlSWRzXSAgTGlzdCBvZiBleHRyYSBub2RlIGlkcyB0byBzZWFyY2ggZnJvbS4gVGhpcyBsYXN0IHBhcmFtZXRlciBpcyBuZWNlc3Nhcnkgd2hlblxuICAgICAqIHRoZSByb290Tm9kZUlkIGlzIG9uZSBvZiB0aGUgc3VwcG9ydGVkIGFsaWFzZXMgKGUuZy4gJy1teS0nLCAnLXJvb3QtJywgJy1teXNpdGVzLScsIGV0Yy4pXG4gICAgICogYW5kIHNlYXJjaCBpcyBub3Qgc3VwcG9ydGVkIGZvciB0aGF0IGFsaWFzLCBidXQgY2FuIGJlIHBlcmZvcm1lZCBvbiBpdHMgY29ycmVzcG9uZGluZyBub2Rlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2VhcmNoKHNlYXJjaFRlcm06IHN0cmluZywgcm9vdE5vZGVJZDogc3RyaW5nID0gbnVsbCwgc2tpcENvdW50OiBudW1iZXIgPSAwLCBtYXhJdGVtczogbnVtYmVyID0gMjUsIGV4dHJhTm9kZUlkcz86IHN0cmluZ1tdKTogT2JzZXJ2YWJsZTxOb2RlUGFnaW5nPiB7XG5cbiAgICAgICAgbGV0IGV4dHJhUGFyZW50RmlsdGVyaW5nID0gJyc7XG5cbiAgICAgICAgaWYgKGV4dHJhTm9kZUlkcyAmJiBleHRyYU5vZGVJZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBleHRyYU5vZGVJZHNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChpZCkgPT4gaWQgIT09IHJvb3ROb2RlSWQpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKGV4dHJhSWQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFQYXJlbnRGaWx0ZXJpbmcgKz0gYCBPUiBBTkNFU1RPUjond29ya3NwYWNlOi8vU3BhY2VzU3RvcmUvJHtleHRyYUlkfSdgO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyZW50RmlsdGVyaW5nID0gcm9vdE5vZGVJZCA/IFt7IHF1ZXJ5OiBgQU5DRVNUT1I6J3dvcmtzcGFjZTovL1NwYWNlc1N0b3JlLyR7cm9vdE5vZGVJZH0nJHtleHRyYVBhcmVudEZpbHRlcmluZ31gIH1dIDogW107XG5cbiAgICAgICAgY29uc3QgZGVmYXVsdFNlYXJjaE5vZGU6IGFueSA9IHtcbiAgICAgICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICAgICAgcXVlcnk6IGAke3NlYXJjaFRlcm19KiBPUiBuYW1lOiR7c2VhcmNoVGVybX0qYFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY2x1ZGU6IFsncGF0aCcsICdhbGxvd2FibGVPcGVyYXRpb25zJywgJ3Byb3BlcnRpZXMnXSxcbiAgICAgICAgICAgIHBhZ2luZzoge1xuICAgICAgICAgICAgICAgIG1heEl0ZW1zOiBtYXhJdGVtcyxcbiAgICAgICAgICAgICAgICBza2lwQ291bnQ6IHNraXBDb3VudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbHRlclF1ZXJpZXM6IFtcbiAgICAgICAgICAgICAgICB7IHF1ZXJ5OiBcIlRZUEU6J2NtOmZvbGRlcidcIiB9LFxuICAgICAgICAgICAgICAgIHsgcXVlcnk6ICdOT1QgY206Y3JlYXRvcjpTeXN0ZW0nIH0sXG4gICAgICAgICAgICAgICAgLi4ucGFyZW50RmlsdGVyaW5nXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IFsnbm9kZXMnXVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNlYXJjaFNlcnZpY2Uuc2VhcmNoQnlRdWVyeUJvZHkoZGVmYXVsdFNlYXJjaE5vZGUpO1xuICAgIH1cbn1cbiJdfQ==