/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { HighlightDirective, UserPreferencesService, UserPreferenceValues, InfinitePaginationComponent } from '@alfresco/adf-core';
import { FormControl } from '@angular/forms';
import { Pagination, SitePaging } from '@alfresco/js-api';
import { DocumentListComponent } from '../document-list/components/document-list.component';
import { ContentNodeSelectorService } from './content-node-selector.service';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { CustomResourcesService } from '../document-list/services/custom-resources.service';
import { Subject } from 'rxjs';
/** @type {?} */
const defaultValidation = (/**
 * @return {?}
 */
() => true);
const Éµ0 = defaultValidation;
export class ContentNodeSelectorPanelComponent {
    /**
     * @param {?} contentNodeSelectorService
     * @param {?} customResourcesService
     * @param {?} userPreferencesService
     */
    constructor(contentNodeSelectorService, customResourcesService, userPreferencesService) {
        this.contentNodeSelectorService = contentNodeSelectorService;
        this.customResourcesService = customResourcesService;
        this.userPreferencesService = userPreferencesService;
        this.DEFAULT_PAGINATION = new Pagination({
            maxItems: 25,
            skipCount: 0,
            totalItems: 0,
            hasMoreItems: false
        });
        /**
         * Node ID of the folder currently listed.
         */
        this.currentFolderId = null;
        /**
         * Hide the "My Files" option added to the site list by default.
         * See the [Sites Dropdown component](sites-dropdown.component.md)
         * for more information.
         */
        this.dropdownHideMyFiles = false;
        /**
         * Custom site for site dropdown. This is the same as the `siteList`.
         * property of the Sites Dropdown component (see its doc page
         * for more information).
         */
        this.dropdownSiteList = null;
        this._rowFilter = defaultValidation;
        this._excludeSiteContent = [];
        /**
         * Custom image resolver function. See the
         * [Image Resolver Model](image-resolver.model.md) page
         * for more information.
         */
        this.imageResolver = null;
        /**
         * Number of items shown per page in the list.
         */
        this.pageSize = this.DEFAULT_PAGINATION.maxItems;
        /**
         * Function used to decide if the selected node has permission to be selected.
         * Default value is a function that always returns true.
         */
        this.isSelectionValid = defaultValidation;
        /**
         * Emitted when the user has chosen an item.
         */
        this.select = new EventEmitter();
        this.nodePaging = null;
        this.searchTerm = '';
        this.showingSearchResults = false;
        this.loadingSearchResults = false;
        this.inDialog = false;
        this._chosenNode = null;
        this.folderIdToShow = null;
        this.breadcrumbFolderTitle = null;
        this.pagination = this.DEFAULT_PAGINATION;
        this.infiniteScroll = false;
        this.debounceSearch = 200;
        this.searchInput = new FormControl();
        this.onDestroy$ = new Subject();
    }
    /**
     * Custom row filter function. See the
     * [Row Filter Model](row-filter.model.md) page
     * for more information.
     * @param {?} rowFilter
     * @return {?}
     */
    set rowFilter(rowFilter) {
        this.createRowFilter(rowFilter);
    }
    /**
     * @return {?}
     */
    get rowFilter() {
        return this._rowFilter;
    }
    /**
     * Custom list of site content componentIds.
     * Used to filter out the corresponding items from the displayed nodes
     * @param {?} excludeSiteContent
     * @return {?}
     */
    set excludeSiteContent(excludeSiteContent) {
        this._excludeSiteContent = excludeSiteContent;
        this.createRowFilter(this._rowFilter);
    }
    /**
     * @return {?}
     */
    get excludeSiteContent() {
        return this._excludeSiteContent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set chosenNode(value) {
        this._chosenNode = value;
        /** @type {?} */
        let valuesArray = null;
        if (value) {
            valuesArray = [value];
        }
        this.select.next(valuesArray);
    }
    /**
     * @return {?}
     */
    get chosenNode() {
        return this._chosenNode;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.searchInput.valueChanges
            .pipe(debounceTime(this.debounceSearch), takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} searchValue
         * @return {?}
         */
        searchValue => this.search(searchValue)));
        this.userPreferencesService
            .select(UserPreferenceValues.PaginationSize)
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} pagSize
         * @return {?}
         */
        pagSize => this.pageSize = pagSize));
        this.target = this.documentList;
        this.folderIdToShow = this.currentFolderId;
        this.breadcrumbTransform = this.breadcrumbTransform ? this.breadcrumbTransform : null;
        this.isSelectionValid = this.isSelectionValid ? this.isSelectionValid : defaultValidation;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @private
     * @param {?=} filter
     * @return {?}
     */
    createRowFilter(filter) {
        if (!filter) {
            filter = (/**
             * @return {?}
             */
            () => true);
        }
        this._rowFilter = (/**
         * @param {?} value
         * @param {?} index
         * @param {?} array
         * @return {?}
         */
        (value, index, array) => {
            return filter(value, index, array) &&
                !this.isExcludedSiteContent(value);
        });
    }
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    isExcludedSiteContent(row) {
        /** @type {?} */
        const entry = row.node.entry;
        if (this._excludeSiteContent && this._excludeSiteContent.length &&
            entry &&
            entry.properties &&
            entry.properties['st:componentId']) {
            /** @type {?} */
            const excludedItem = this._excludeSiteContent.find((/**
             * @param {?} id
             * @return {?}
             */
            (id) => entry.properties['st:componentId'] === id));
            return !!excludedItem;
        }
        return false;
    }
    /**
     * Updates the site attribute and starts a new search
     *
     * @param {?} chosenSite SiteEntry to search within
     * @return {?}
     */
    siteChanged(chosenSite) {
        this.siteId = chosenSite.entry.guid;
        this.setTitleIfCustomSite(chosenSite);
        this.updateResults();
    }
    /**
     * Updates the searchTerm attribute and starts a new search
     *
     * @param {?} searchTerm string value to search against
     * @return {?}
     */
    search(searchTerm) {
        this.searchTerm = searchTerm;
        this.updateResults();
    }
    /**
     * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb
     * @return {?}
     */
    get breadcrumbFolderNode() {
        /** @type {?} */
        let folderNode;
        if (this.showingSearchResults && this.chosenNode) {
            folderNode = this.chosenNode;
        }
        else {
            folderNode = this.documentList.folderNode;
        }
        return folderNode;
    }
    /**
     * Clear the search input and reset to last folder node in which search was performed
     * @return {?}
     */
    clear() {
        this.clearSearch();
        this.folderIdToShow = this.siteId || this.currentFolderId;
    }
    /**
     * Clear the search input and search related data
     * @return {?}
     */
    clearSearch() {
        this.searchTerm = '';
        this.nodePaging = null;
        this.pagination.maxItems = this.pageSize;
        this.chosenNode = null;
        this.showingSearchResults = false;
    }
    /**
     * Update the result list depending on the criteria
     * @private
     * @return {?}
     */
    updateResults() {
        this.target = this.searchTerm.length > 0 ? null : this.documentList;
        if (this.searchTerm.length === 0) {
            this.clear();
        }
        else {
            this.startNewSearch();
        }
    }
    /**
     * Load the first page of a new search result
     * @private
     * @return {?}
     */
    startNewSearch() {
        this.nodePaging = null;
        this.pagination.maxItems = this.pageSize;
        if (this.target) {
            this.infinitePaginationComponent.reset();
        }
        this.chosenNode = null;
        this.folderIdToShow = null;
        this.querySearch();
    }
    /**
     * Perform the call to searchService with the proper parameters
     * @private
     * @return {?}
     */
    querySearch() {
        this.loadingSearchResults = true;
        if (this.customResourcesService.hasCorrespondingNodeIds(this.siteId)) {
            this.customResourcesService.getCorrespondingNodeIds(this.siteId)
                .subscribe((/**
             * @param {?} nodeIds
             * @return {?}
             */
            (nodeIds) => {
                this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.pagination.skipCount, this.pagination.maxItems, nodeIds)
                    .subscribe(this.showSearchResults.bind(this));
            }), (/**
             * @return {?}
             */
            () => {
                this.showSearchResults({ list: { entries: [] } });
            }));
        }
        else {
            this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.pagination.skipCount, this.pagination.maxItems)
                .subscribe(this.showSearchResults.bind(this));
        }
    }
    /**
     * Show the results of the search
     *
     * @private
     * @param {?} nodePaging
     * @return {?}
     */
    showSearchResults(nodePaging) {
        this.showingSearchResults = true;
        this.loadingSearchResults = false;
        this.nodePaging = nodePaging;
    }
    /**
     * Sets showingSearchResults state to be able to differentiate between search results or folder results
     * @return {?}
     */
    onFolderChange() {
        this.showingSearchResults = false;
        this.infiniteScroll = false;
        this.clearSearch();
    }
    /**
     * Attempts to set the currently loaded node
     * @return {?}
     */
    onFolderLoaded() {
        if (!this.showingSearchResults) {
            this.attemptNodeSelection(this.documentList.folderNode);
        }
    }
    /**
     * Returns whether breadcrumb has to be shown or not
     * @return {?}
     */
    showBreadcrumbs() {
        return !this.showingSearchResults || this.chosenNode;
    }
    /**
     * Loads the next batch of search results
     *
     * @param {?} pagination
     * @return {?}
     */
    getNextPageOfSearch(pagination) {
        this.infiniteScroll = true;
        this.pagination = pagination;
        if (this.searchTerm.length > 0) {
            this.querySearch();
        }
    }
    /**
     * Selects node as chosen if it has the right permission, clears the selection otherwise
     *
     * @private
     * @param {?} entry
     * @return {?}
     */
    attemptNodeSelection(entry) {
        if (entry && this.isSelectionValid(entry)) {
            this.chosenNode = entry;
        }
        else {
            this.resetChosenNode();
        }
    }
    /**
     * Clears the chosen node
     * @return {?}
     */
    resetChosenNode() {
        this.chosenNode = null;
    }
    /**
     * Invoked when user selects a node
     *
     * @param {?} event CustomEvent for node-select
     * @return {?}
     */
    onNodeSelect(event) {
        this.attemptNodeSelection(event.detail.node.entry);
    }
    /**
     * @param {?} site
     * @return {?}
     */
    setTitleIfCustomSite(site) {
        if (this.customResourcesService.isCustomSource(site.entry.guid)) {
            this.breadcrumbFolderTitle = site.entry.title;
        }
        else {
            this.breadcrumbFolderTitle = null;
        }
    }
}
ContentNodeSelectorPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-content-node-selector-panel',
                template: "<div class=\"adf-content-node-selector-content\" (node-select)=\"onNodeSelect($event)\">\n    <mat-form-field floatPlaceholder=\"never\" class=\"adf-content-node-selector-content-input\">\n        <input matInput\n            id=\"searchInput\"\n            [formControl]=\"searchInput\"\n            type=\"text\"\n            placeholder=\"{{'NODE_SELECTOR.SEARCH' | translate}}\"\n            [value]=\"searchTerm\"\n            data-automation-id=\"content-node-selector-search-input\">\n\n        <mat-icon *ngIf=\"searchTerm.length > 0\"\n            matSuffix (click)=\"clear()\"\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-clear\">clear\n        </mat-icon>\n\n        <mat-icon *ngIf=\"searchTerm.length === 0\"\n            matSuffix\n            class=\"adf-content-node-selector-content-input-icon\"\n            data-automation-id=\"content-node-selector-search-icon\">search\n        </mat-icon>\n\n    </mat-form-field>\n\n    <adf-sites-dropdown\n        class=\"full-width\"\n        (change)=\"siteChanged($event)\"\n        [placeholder]=\"'NODE_SELECTOR.SELECT_LOCATION'\"\n        [hideMyFiles]=\"dropdownHideMyFiles\"\n        [siteList]=\"dropdownSiteList\"\n        data-automation-id=\"content-node-selector-sites-combo\">\n    </adf-sites-dropdown>\n\n    <adf-toolbar>\n        <adf-toolbar-title>\n            <ng-container *ngIf=\"!showBreadcrumbs()\">\n                <span class=\"adf-search-results-label\">{{ 'NODE_SELECTOR.SEARCH_RESULTS' | translate }}</span>\n            </ng-container>\n            <adf-dropdown-breadcrumb *ngIf=\"showBreadcrumbs()\"\n                class=\"adf-content-node-selector-content-breadcrumb\"\n                (navigate)=\"clearSearch()\"\n                [target]=\"documentList\"\n                [transform]=\"breadcrumbTransform\"\n                [folderNode]=\"breadcrumbFolderNode\"\n                [root]=\"breadcrumbFolderTitle\"\n                data-automation-id=\"content-node-selector-content-breadcrumb\">\n            </adf-dropdown-breadcrumb>\n        </adf-toolbar-title>\n    </adf-toolbar>\n\n    <div\n        class=\"adf-content-node-selector-content-list\"\n        [class.adf-content-node-selector-content-list-searchLayout]=\"showingSearchResults\"\n        data-automation-id=\"content-node-selector-content-list\">\n        <adf-document-list\n            #documentList\n            [adf-highlight]=\"searchTerm\"\n            adf-highlight-selector=\".adf-name-location-cell-name\"\n            [showHeader]=\"false\"\n            [node]=\"nodePaging\"\n            [maxItems]=\"pageSize\"\n            [rowFilter]=\"_rowFilter\"\n            [imageResolver]=\"imageResolver\"\n            [currentFolderId]=\"folderIdToShow\"\n            selectionMode=\"single\"\n            [contextMenuActions]=\"false\"\n            [contentActions]=\"false\"\n            [allowDropFiles]=\"false\"\n            [sorting]=\"'server'\"\n            [where]=\"where\"\n            (folderChange)=\"onFolderChange()\"\n            (ready)=\"onFolderLoaded()\"\n            data-automation-id=\"content-node-selector-document-list\">\n\n            <adf-custom-empty-content-template>\n                <div>{{ 'NODE_SELECTOR.NO_RESULTS' | translate }}</div>\n            </adf-custom-empty-content-template>\n\n            <data-columns>\n                <data-column key=\"$thumbnail\" type=\"image\"></data-column>\n                <data-column key=\"name\" type=\"text\" class=\"adf-full-width adf-ellipsis-cell\">\n                    <ng-template let-context>\n                        <adf-name-location-cell [row]=\"context.row\"></adf-name-location-cell>\n                    </ng-template>\n                </data-column>\n                <data-column key=\"modifiedAt\" type=\"date\" format=\"timeAgo\" class=\"adf-content-selector-modified-cell\"></data-column>\n                <data-column key=\"createdByUser.displayName\" type=\"text\" class=\"adf-content-selector-modifier-cell\"></data-column>\n                <data-column key=\"visibility\" type=\"text\" class=\"adf-content-selector-visibility-cell\"></data-column>\n            </data-columns>\n\n        </adf-document-list>\n\n        <adf-infinite-pagination\n            [target]=\"target\"\n            [loading]=\"loadingSearchResults\"\n            (loadMore)=\"getNextPageOfSearch($event)\"\n            data-automation-id=\"content-node-selector-search-pagination\">\n            {{ 'ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE' | translate }}\n        </adf-infinite-pagination>\n    </div>\n</div>\n",
                encapsulation: ViewEncapsulation.None,
                host: { 'class': 'adf-content-node-selector-panel' },
                styles: [""]
            }] }
];
/** @nocollapse */
ContentNodeSelectorPanelComponent.ctorParameters = () => [
    { type: ContentNodeSelectorService },
    { type: CustomResourcesService },
    { type: UserPreferencesService }
];
ContentNodeSelectorPanelComponent.propDecorators = {
    currentFolderId: [{ type: Input }],
    dropdownHideMyFiles: [{ type: Input }],
    dropdownSiteList: [{ type: Input }],
    where: [{ type: Input }],
    rowFilter: [{ type: Input }],
    excludeSiteContent: [{ type: Input }],
    imageResolver: [{ type: Input }],
    pageSize: [{ type: Input }],
    isSelectionValid: [{ type: Input }],
    breadcrumbTransform: [{ type: Input }],
    select: [{ type: Output }],
    documentList: [{ type: ViewChild, args: ['documentList',] }],
    highlighter: [{ type: ViewChild, args: [HighlightDirective,] }],
    infinitePaginationComponent: [{ type: ViewChild, args: [InfinitePaginationComponent,] }]
};
if (false) {
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.DEFAULT_PAGINATION;
    /**
     * Node ID of the folder currently listed.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.currentFolderId;
    /**
     * Hide the "My Files" option added to the site list by default.
     * See the [Sites Dropdown component](sites-dropdown.component.md)
     * for more information.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.dropdownHideMyFiles;
    /**
     * Custom site for site dropdown. This is the same as the `siteList`.
     * property of the Sites Dropdown component (see its doc page
     * for more information).
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.dropdownSiteList;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype._rowFilter;
    /**
     * Custom *where* filter function. See the
     * Document List component
     * for more information.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.where;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype._excludeSiteContent;
    /**
     * Custom image resolver function. See the
     * [Image Resolver Model](image-resolver.model.md) page
     * for more information.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.imageResolver;
    /**
     * Number of items shown per page in the list.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.pageSize;
    /**
     * Function used to decide if the selected node has permission to be selected.
     * Default value is a function that always returns true.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.isSelectionValid;
    /**
     * Transformation to be performed on the chosen/folder node before building the
     * breadcrumb UI. Can be useful when custom formatting is needed for the breadcrumb.
     * You can change the path elements from the node that are used to build the
     * breadcrumb using this function.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.breadcrumbTransform;
    /**
     * Emitted when the user has chosen an item.
     * @type {?}
     */
    ContentNodeSelectorPanelComponent.prototype.select;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.documentList;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.highlighter;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.nodePaging;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.siteId;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.searchTerm;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.showingSearchResults;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.loadingSearchResults;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.inDialog;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype._chosenNode;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.folderIdToShow;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.breadcrumbFolderTitle;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.pagination;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.infinitePaginationComponent;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.infiniteScroll;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.debounceSearch;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.searchInput;
    /** @type {?} */
    ContentNodeSelectorPanelComponent.prototype.target;
    /**
     * @type {?}
     * @private
     */
    ContentNodeSelectorPanelComponent.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    ContentNodeSelectorPanelComponent.prototype.contentNodeSelectorService;
    /**
     * @type {?}
     * @private
     */
    ContentNodeSelectorPanelComponent.prototype.customResourcesService;
    /**
     * @type {?}
     * @private
     */
    ContentNodeSelectorPanelComponent.prototype.userPreferencesService;
}
export { Éµ0 };
//# sourceMappingURL=data:application/json;base64,