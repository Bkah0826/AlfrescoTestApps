/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SearchService } from '@alfresco/adf-core';
import { Component, ContentChild, ElementRef, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
export class SearchComponent {
    /**
     * @param {?} searchService
     * @param {?} _elementRef
     */
    constructor(searchService, _elementRef) {
        this.searchService = searchService;
        this._elementRef = _elementRef;
        /**
         * Function that maps an option's value to its display value in the trigger.
         */
        this.displayWith = null;
        /**
         * Maximum number of results to show in the search.
         */
        this.maxResults = 20;
        /**
         * Number of results to skip from the results pagination.
         */
        this.skipResults = 0;
        /**
         * Search term to use when executing the search. Updating this value will
         * run a new search and update the results.
         */
        this.searchTerm = '';
        /**
         * Emitted when search results have fully loaded.
         */
        this.resultLoaded = new EventEmitter();
        /**
         * Emitted when an error occurs.
         */
        this.error = new EventEmitter();
        this.showPanel = false;
        this._isOpen = false;
        this.keyPressedStream = new Subject();
        this._classList = {};
        this.onDestroy$ = new Subject();
        this.keyPressedStream
            .pipe(debounceTime(200), takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} searchedWord
         * @return {?}
         */
        searchedWord => {
            this.loadSearchResults(searchedWord);
        }));
        searchService.dataLoaded
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} nodePaging
         * @return {?}
         */
        nodePaging => this.onSearchDataLoaded(nodePaging)), (/**
         * @param {?} error
         * @return {?}
         */
        error => this.onSearchDataError(error)));
    }
    /**
     * CSS class for display.
     * @param {?} classList
     * @return {?}
     */
    set classList(classList) {
        if (classList && classList.length) {
            classList.split(' ').forEach((/**
             * @param {?} className
             * @return {?}
             */
            (className) => this._classList[className.trim()] = true));
            this._elementRef.nativeElement.className = '';
        }
    }
    /**
     * @return {?}
     */
    get isOpen() {
        return this._isOpen && this.showPanel;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isOpen(value) {
        this._isOpen = value;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.setVisibility();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.searchTerm && changes.searchTerm.currentValue) {
            this.loadSearchResults(changes.searchTerm.currentValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @return {?}
     */
    resetResults() {
        this.cleanResults();
        this.setVisibility();
    }
    /**
     * @return {?}
     */
    reload() {
        this.loadSearchResults(this.searchTerm);
    }
    /**
     * @private
     * @return {?}
     */
    cleanResults() {
        if (this.results) {
            this.results = {};
        }
    }
    /**
     * @private
     * @param {?=} searchTerm
     * @return {?}
     */
    loadSearchResults(searchTerm) {
        this.resetResults();
        if (searchTerm) {
            this.searchService.search(searchTerm, this.maxResults, this.skipResults).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => this.onSearchDataLoaded(result)), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => this.onSearchDataError(err)));
        }
        else {
            this.cleanResults();
        }
    }
    /**
     * @param {?} nodePaging
     * @return {?}
     */
    onSearchDataLoaded(nodePaging) {
        if (nodePaging) {
            this.results = nodePaging;
            this.resultLoaded.emit(this.results);
            this.isOpen = true;
            this.setVisibility();
        }
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onSearchDataError(error) {
        if (error && error.status !== 400) {
            this.results = null;
            this.error.emit(error);
        }
    }
    /**
     * @return {?}
     */
    hidePanel() {
        if (this.isOpen) {
            this._classList['adf-search-show'] = false;
            this._classList['adf-search-hide'] = true;
            this.isOpen = false;
        }
    }
    /**
     * @return {?}
     */
    setVisibility() {
        this.showPanel = !!this.results && !!this.results.list;
        this._classList['adf-search-show'] = this.showPanel;
        this._classList['adf-search-hide'] = !this.showPanel;
    }
}
SearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search',
                template: "<div role=\"listbox\" id=\"adf-search-results-content\" [ngClass]=\"_classList\" #panel>\n    <ng-template\n        [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{ $implicit: results }\">\n    </ng-template>\n</div>\n\n\n",
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                exportAs: 'searchAutocomplete',
                host: {
                    'class': 'adf-search'
                },
                styles: [""]
            }] }
];
/** @nocollapse */
SearchComponent.ctorParameters = () => [
    { type: SearchService },
    { type: ElementRef }
];
SearchComponent.propDecorators = {
    panel: [{ type: ViewChild, args: ['panel',] }],
    template: [{ type: ContentChild, args: [TemplateRef,] }],
    displayWith: [{ type: Input }],
    maxResults: [{ type: Input }],
    skipResults: [{ type: Input }],
    searchTerm: [{ type: Input }],
    classList: [{ type: Input, args: ['class',] }],
    resultLoaded: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SearchComponent.prototype.panel;
    /** @type {?} */
    SearchComponent.prototype.template;
    /**
     * Function that maps an option's value to its display value in the trigger.
     * @type {?}
     */
    SearchComponent.prototype.displayWith;
    /**
     * Maximum number of results to show in the search.
     * @type {?}
     */
    SearchComponent.prototype.maxResults;
    /**
     * Number of results to skip from the results pagination.
     * @type {?}
     */
    SearchComponent.prototype.skipResults;
    /**
     * Search term to use when executing the search. Updating this value will
     * run a new search and update the results.
     * @type {?}
     */
    SearchComponent.prototype.searchTerm;
    /**
     * Emitted when search results have fully loaded.
     * @type {?}
     */
    SearchComponent.prototype.resultLoaded;
    /**
     * Emitted when an error occurs.
     * @type {?}
     */
    SearchComponent.prototype.error;
    /** @type {?} */
    SearchComponent.prototype.showPanel;
    /** @type {?} */
    SearchComponent.prototype.results;
    /** @type {?} */
    SearchComponent.prototype._isOpen;
    /** @type {?} */
    SearchComponent.prototype.keyPressedStream;
    /** @type {?} */
    SearchComponent.prototype._classList;
    /**
     * @type {?}
     * @private
     */
    SearchComponent.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    SearchComponent.prototype.searchService;
    /**
     * @type {?}
     * @private
     */
    SearchComponent.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,