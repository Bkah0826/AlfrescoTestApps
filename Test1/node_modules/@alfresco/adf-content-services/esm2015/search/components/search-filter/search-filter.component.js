/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, ViewEncapsulation } from '@angular/core';
import { SearchService, TranslationService } from '@alfresco/adf-core';
import { SearchQueryBuilderService } from '../../search-query-builder.service';
import { SearchFilterList } from './models/search-filter-list.model';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class SearchFilterComponent {
    /**
     * @param {?} queryBuilder
     * @param {?} searchService
     * @param {?} translationService
     */
    constructor(queryBuilder, searchService, translationService) {
        this.queryBuilder = queryBuilder;
        this.searchService = searchService;
        this.translationService = translationService;
        this.DEFAULT_PAGE_SIZE = 5;
        /**
         * All facet field items to be displayed in the component. These are updated according to the response.
         *  When a new search is performed, the already existing items are updated with the new bucket count values and
         *  the newly received items are added to the responseFacets.
         */
        this.responseFacets = null;
        this.facetQueriesPageSize = this.DEFAULT_PAGE_SIZE;
        this.facetQueriesLabel = 'Facet Queries';
        this.facetExpanded = {
            'default': false
        };
        this.selectedBuckets = [];
        this.onDestroy$ = new Subject();
        if (queryBuilder.config && queryBuilder.config.facetQueries) {
            this.facetQueriesLabel = queryBuilder.config.facetQueries.label || 'Facet Queries';
            this.facetQueriesPageSize = queryBuilder.config.facetQueries.pageSize || this.DEFAULT_PAGE_SIZE;
            this.facetExpanded['query'] = queryBuilder.config.facetQueries.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetFields) {
            this.facetExpanded['field'] = queryBuilder.config.facetFields.expanded;
        }
        if (queryBuilder.config && queryBuilder.config.facetIntervals) {
            this.facetExpanded['interval'] = queryBuilder.config.facetIntervals.expanded;
        }
        this.displayResetButton = this.queryBuilder.config && !!this.queryBuilder.config.resetButton;
        this.queryBuilder.updated
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @return {?}
         */
        () => this.queryBuilder.execute()));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.queryBuilder) {
            this.queryBuilder.executed
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((/**
             * @param {?} resultSetPaging
             * @return {?}
             */
            resultSetPaging => {
                this.onDataLoaded(resultSetPaging);
                this.searchService.dataLoaded.next(resultSetPaging);
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @private
     * @return {?}
     */
    updateSelectedBuckets() {
        if (this.responseFacets) {
            this.selectedBuckets = [];
            for (const field of this.responseFacets) {
                if (field.buckets) {
                    this.selectedBuckets.push(...this.queryBuilder.getUserFacetBuckets(field.field)
                        .filter((/**
                     * @param {?} bucket
                     * @return {?}
                     */
                    (bucket) => bucket.checked))
                        .map((/**
                     * @param {?} bucket
                     * @return {?}
                     */
                    (bucket) => {
                        return { field, bucket };
                    })));
                }
            }
        }
        else {
            this.selectedBuckets = [];
        }
    }
    /**
     * @param {?} event
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    onToggleBucket(event, field, bucket) {
        if (event && bucket) {
            if (event.checked) {
                this.selectFacetBucket(field, bucket);
            }
            else {
                this.unselectFacetBucket(field, bucket);
            }
        }
    }
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    selectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = true;
            this.queryBuilder.addUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    /**
     * @param {?} field
     * @param {?} bucket
     * @return {?}
     */
    unselectFacetBucket(field, bucket) {
        if (bucket) {
            bucket.checked = false;
            this.queryBuilder.removeUserFacetBucket(field, bucket);
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    canResetSelectedBuckets(field) {
        if (field && field.buckets) {
            return field.buckets.items.some((/**
             * @param {?} bucket
             * @return {?}
             */
            (bucket) => bucket.checked));
        }
        return false;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    resetSelectedBuckets(field) {
        if (field && field.buckets) {
            for (const bucket of field.buckets.items) {
                bucket.checked = false;
                this.queryBuilder.removeUserFacetBucket(field, bucket);
            }
            this.updateSelectedBuckets();
            this.queryBuilder.update();
        }
    }
    /**
     * @return {?}
     */
    resetAllSelectedBuckets() {
        this.responseFacets.forEach((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            if (field && field.buckets) {
                for (const bucket of field.buckets.items) {
                    bucket.checked = false;
                    this.queryBuilder.removeUserFacetBucket(field, bucket);
                }
                this.updateSelectedBuckets();
            }
        }));
        this.queryBuilder.update();
    }
    /**
     * @return {?}
     */
    resetAll() {
        this.resetAllSelectedBuckets();
        this.responseFacets = null;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    shouldExpand(field) {
        return this.facetExpanded[field.type] || this.facetExpanded['default'];
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onDataLoaded(data) {
        /** @type {?} */
        const context = data.list.context;
        if (context) {
            this.parseFacets(context);
        }
        else {
            this.responseFacets = null;
        }
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    parseFacets(context) {
        this.parseFacetFields(context);
        this.parseFacetIntervals(context);
        this.parseFacetQueries(context);
    }
    /**
     * @private
     * @param {?} context
     * @param {?} configFacetFields
     * @param {?} itemType
     * @return {?}
     */
    parseFacetItems(context, configFacetFields, itemType) {
        configFacetFields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            /** @type {?} */
            const responseField = this.findFacet(context, itemType, field.label);
            /** @type {?} */
            const responseBuckets = this.getResponseBuckets(responseField, field)
                .filter(this.getFilterByMinCount(field.mincount));
            /** @type {?} */
            const alreadyExistingField = this.findResponseFacet(itemType, field.label);
            if (alreadyExistingField) {
                /** @type {?} */
                const alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];
                this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);
            }
            else if (responseField) {
                /** @type {?} */
                const bucketList = new SearchFilterList(responseBuckets, field.pageSize);
                bucketList.filter = this.getBucketFilterFunction(bucketList);
                if (!this.responseFacets) {
                    this.responseFacets = [];
                }
                this.responseFacets.push((/** @type {?} */ (Object.assign({}, field, { type: responseField.type || itemType, label: field.label, pageSize: field.pageSize | this.DEFAULT_PAGE_SIZE, currentPageSize: field.pageSize | this.DEFAULT_PAGE_SIZE, buckets: bucketList }))));
            }
        }));
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    parseFacetFields(context) {
        /** @type {?} */
        const configFacetFields = this.queryBuilder.config.facetFields && this.queryBuilder.config.facetFields.fields || [];
        this.parseFacetItems(context, configFacetFields, 'field');
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    parseFacetIntervals(context) {
        /** @type {?} */
        const configFacetIntervals = this.queryBuilder.config.facetIntervals && this.queryBuilder.config.facetIntervals.intervals || [];
        this.parseFacetItems(context, configFacetIntervals, 'interval');
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    parseFacetQueries(context) {
        /** @type {?} */
        const configFacetQueries = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.queries || [];
        /** @type {?} */
        const configGroups = configFacetQueries.reduce((/**
         * @param {?} acc
         * @param {?} query
         * @return {?}
         */
        (acc, query) => {
            /** @type {?} */
            const group = this.queryBuilder.getQueryGroup(query);
            if (acc[group]) {
                acc[group].push(query);
            }
            else {
                acc[group] = [query];
            }
            return acc;
        }), []);
        /** @type {?} */
        const mincount = this.queryBuilder.config.facetQueries && this.queryBuilder.config.facetQueries.mincount;
        /** @type {?} */
        const mincountFilter = this.getFilterByMinCount(mincount);
        Object.keys(configGroups).forEach((/**
         * @param {?} group
         * @return {?}
         */
        (group) => {
            /** @type {?} */
            const responseField = this.findFacet(context, 'query', group);
            /** @type {?} */
            const responseBuckets = this.getResponseQueryBuckets(responseField, configGroups[group])
                .filter(mincountFilter);
            /** @type {?} */
            const alreadyExistingField = this.findResponseFacet('query', group);
            if (alreadyExistingField) {
                /** @type {?} */
                const alreadyExistingBuckets = alreadyExistingField.buckets && alreadyExistingField.buckets.items || [];
                this.updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets);
            }
            else if (responseField) {
                /** @type {?} */
                const bucketList = new SearchFilterList(responseBuckets, this.facetQueriesPageSize);
                bucketList.filter = this.getBucketFilterFunction(bucketList);
                if (!this.responseFacets) {
                    this.responseFacets = [];
                }
                this.responseFacets.push((/** @type {?} */ ({
                    field: group,
                    type: responseField.type || 'query',
                    label: group,
                    pageSize: this.DEFAULT_PAGE_SIZE,
                    currentPageSize: this.DEFAULT_PAGE_SIZE,
                    buckets: bucketList
                })));
            }
        }));
    }
    /**
     * @private
     * @param {?} responseField
     * @param {?} configField
     * @return {?}
     */
    getResponseBuckets(responseField, configField) {
        return ((responseField && responseField.buckets) || []).map((/**
         * @param {?} respBucket
         * @return {?}
         */
        (respBucket) => {
            respBucket['count'] = this.getCountValue(respBucket);
            respBucket.filterQuery = respBucket.filterQuery || this.getCorrespondingFilterQuery(configField, respBucket.label);
            return (/** @type {?} */ (Object.assign({}, respBucket, { checked: false, display: respBucket.display, label: respBucket.label })));
        }));
    }
    /**
     * @private
     * @param {?} responseField
     * @param {?} configGroup
     * @return {?}
     */
    getResponseQueryBuckets(responseField, configGroup) {
        return (configGroup || []).map((/**
         * @param {?} query
         * @return {?}
         */
        (query) => {
            /** @type {?} */
            const respBucket = ((responseField && responseField.buckets) || [])
                .find((/**
             * @param {?} bucket
             * @return {?}
             */
            (bucket) => bucket.label === query.label));
            respBucket['count'] = this.getCountValue(respBucket);
            return (/** @type {?} */ (Object.assign({}, respBucket, { checked: false, display: respBucket.display, label: respBucket.label })));
        }));
    }
    /**
     * @private
     * @param {?} bucket
     * @return {?}
     */
    getCountValue(bucket) {
        return (!!bucket && !!bucket.metrics && bucket.metrics[0] && bucket.metrics[0].value && bucket.metrics[0].value.count)
            || 0;
    }
    /**
     * @param {?} bucket
     * @return {?}
     */
    getBucketCountDisplay(bucket) {
        return bucket.count === null ? '' : `(${bucket.count})`;
    }
    /**
     * @private
     * @param {?} mincountInput
     * @return {?}
     */
    getFilterByMinCount(mincountInput) {
        return (/**
         * @param {?} bucket
         * @return {?}
         */
        (bucket) => {
            /** @type {?} */
            let mincount = mincountInput;
            if (mincount === undefined) {
                mincount = 1;
            }
            return bucket.count >= mincount;
        });
    }
    /**
     * @private
     * @param {?} configFacetItem
     * @param {?} bucketLabel
     * @return {?}
     */
    getCorrespondingFilterQuery(configFacetItem, bucketLabel) {
        /** @type {?} */
        let filterQuery = null;
        if (configFacetItem.field && bucketLabel) {
            if (configFacetItem.sets) {
                /** @type {?} */
                const configSet = configFacetItem.sets.find((/**
                 * @param {?} set
                 * @return {?}
                 */
                (set) => bucketLabel === set.label));
                if (configSet) {
                    filterQuery = this.buildIntervalQuery(configFacetItem.field, configSet);
                }
            }
            else {
                filterQuery = `${configFacetItem.field}:"${bucketLabel}"`;
            }
        }
        return filterQuery;
    }
    /**
     * @private
     * @param {?} fieldName
     * @param {?} interval
     * @return {?}
     */
    buildIntervalQuery(fieldName, interval) {
        /** @type {?} */
        const start = interval.start;
        /** @type {?} */
        const end = interval.end;
        /** @type {?} */
        const startLimit = (interval.startInclusive === undefined || interval.startInclusive === true) ? '[' : '<';
        /** @type {?} */
        const endLimit = (interval.endInclusive === undefined || interval.endInclusive === true) ? ']' : '>';
        return `${fieldName}:${startLimit}"${start}" TO "${end}"${endLimit}`;
    }
    /**
     * @private
     * @param {?} context
     * @param {?} itemType
     * @param {?} fieldLabel
     * @return {?}
     */
    findFacet(context, itemType, fieldLabel) {
        return (context.facets || []).find((/**
         * @param {?} response
         * @return {?}
         */
        (response) => response.type === itemType && response.label === fieldLabel)) || {};
    }
    /**
     * @private
     * @param {?} itemType
     * @param {?} fieldLabel
     * @return {?}
     */
    findResponseFacet(itemType, fieldLabel) {
        return (this.responseFacets || []).find((/**
         * @param {?} response
         * @return {?}
         */
        (response) => response.type === itemType && response.label === fieldLabel));
    }
    /**
     * @private
     * @param {?} responseField
     * @param {?} responseBuckets
     * @param {?} alreadyExistingField
     * @param {?} alreadyExistingBuckets
     * @return {?}
     */
    updateExistingBuckets(responseField, responseBuckets, alreadyExistingField, alreadyExistingBuckets) {
        /** @type {?} */
        const bucketsToDelete = [];
        alreadyExistingBuckets
            .map((/**
         * @param {?} bucket
         * @return {?}
         */
        (bucket) => {
            /** @type {?} */
            const responseBucket = ((responseField && responseField.buckets) || []).find((/**
             * @param {?} respBucket
             * @return {?}
             */
            (respBucket) => respBucket.label === bucket.label));
            if (!responseBucket) {
                bucketsToDelete.push(bucket);
            }
            bucket.count = this.getCountValue(responseBucket);
            return bucket;
        }));
        /** @type {?} */
        const hasSelection = this.selectedBuckets
            .find((/**
         * @param {?} selBuckets
         * @return {?}
         */
        (selBuckets) => alreadyExistingField.label === selBuckets.field.label && alreadyExistingField.type === selBuckets.field.type));
        if (!hasSelection && bucketsToDelete.length) {
            bucketsToDelete.forEach((/**
             * @param {?} bucket
             * @return {?}
             */
            (bucket) => {
                alreadyExistingField.buckets.deleteItem(bucket);
            }));
        }
        responseBuckets.forEach((/**
         * @param {?} respBucket
         * @return {?}
         */
        (respBucket) => {
            /** @type {?} */
            const existingBucket = alreadyExistingBuckets.find((/**
             * @param {?} oldBucket
             * @return {?}
             */
            (oldBucket) => oldBucket.label === respBucket.label));
            if (!existingBucket) {
                alreadyExistingField.buckets.addItem(respBucket);
            }
        }));
    }
    /**
     * @private
     * @param {?} bucketList
     * @return {?}
     */
    getBucketFilterFunction(bucketList) {
        return (/**
         * @param {?} bucket
         * @return {?}
         */
        (bucket) => {
            if (bucket && bucketList.filterText) {
                /** @type {?} */
                const pattern = (bucketList.filterText || '').toLowerCase();
                /** @type {?} */
                const label = (this.translationService.instant(bucket.display) || this.translationService.instant(bucket.label)).toLowerCase();
                return this.queryBuilder.config.filterWithContains ? label.indexOf(pattern) !== -1 : label.startsWith(pattern);
            }
            return true;
        });
    }
}
SearchFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-search-filter',
                template: "<mat-accordion multi=\"true\" displayMode=\"flat\">\n\n    <button *ngIf=\"displayResetButton && responseFacets\"\n            mat-button\n            color=\"primary\"\n            matTooltip=\"{{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.TOOLTIP' | translate }}\"\n            matTooltipPosition=\"right\"\n            (click)=\"resetAll()\">\n        {{ 'SEARCH.FILTER.BUTTONS.RESET-ALL.LABEL' | translate }}\n    </button>\n    <mat-expansion-panel\n        *ngFor=\"let category of queryBuilder.categories\"\n        [attr.data-automation-id]=\"'expansion-panel-'+category.name\"\n        [(expanded)]=\"category.expanded\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                {{ category.name | translate }}\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <adf-search-widget-container\n            [id]=\"category.id\"\n            [selector]=\"category.component.selector\"\n            [settings]=\"category.component.settings\">\n        </adf-search-widget-container>\n    </mat-expansion-panel>\n\n    <ng-container *ngIf=\"responseFacets\">\n        <mat-expansion-panel [attr.data-automation-id]=\"'expansion-panel-'+field.label\" *ngFor=\"let field of responseFacets\"\n                             [expanded]=\"shouldExpand(field)\">\n            <mat-expansion-panel-header>\n                <mat-panel-title>{{ field.label | translate }}</mat-panel-title>\n            </mat-expansion-panel-header>\n\n            <div class=\"adf-facet-result-filter\">\n                <mat-form-field>\n                    <input\n                        matInput\n                        placeholder=\"{{ 'SEARCH.FILTER.ACTIONS.FILTER-CATEGORY' | translate }}\"\n                        [attr.data-automation-id]=\"'facet-result-filter-'+field.label\"\n                        [(ngModel)]=\"field.buckets.filterText\">\n                    <button *ngIf=\"field.buckets.filterText\"\n                        mat-button matSuffix mat-icon-button\n                        (click)=\"field.buckets.filterText = ''\">\n                        <mat-icon>close</mat-icon>\n                    </button>\n                </mat-form-field>\n            </div>\n\n            <div class=\"adf-checklist\">\n                <mat-checkbox\n                    *ngFor=\"let bucket of field.buckets\"\n                    [checked]=\"bucket.checked\"\n                    [attr.data-automation-id]=\"'checkbox-'+field.label+'-'+(bucket.display || bucket.label)\"\n                    (change)=\"onToggleBucket($event, field, bucket)\">\n                    <div \n                        matTooltip=\"{{ bucket.display || bucket.label | translate }} {{ getBucketCountDisplay(bucket) }}\"\n                        matTooltipPosition=\"right\"\n                        class=\"adf-facet-label\">\n                        {{ bucket.display || bucket.label | translate }} {{ getBucketCountDisplay(bucket) }}\n                    </div>\n                </mat-checkbox>\n            </div>\n\n            <div class=\"adf-facet-buttons\" *ngIf=\"field.buckets.fitsPage\">\n                <button *ngIf=\"canResetSelectedBuckets(field)\"\n                    mat-button\n                    color=\"primary\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    {{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\n                </button>\n            </div>\n\n            <div class=\"adf-facet-buttons\" *ngIf=\"!field.buckets.fitsPage\">\n                <button mat-icon-button\n                    *ngIf=\"canResetSelectedBuckets(field)\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.CLEAR-ALL' | translate }}\"\n                    (click)=\"resetSelectedBuckets(field)\">\n                    <mat-icon>clear</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowLessItems\"\n                    (click)=\"field.buckets.showLessItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-LESS' | translate }}\">\n                    <mat-icon>keyboard_arrow_up</mat-icon>\n                </button>\n                <button mat-icon-button\n                    *ngIf=\"field.buckets.canShowMoreItems\"\n                    (click)=\"field.buckets.showMoreItems()\"\n                    title=\"{{ 'SEARCH.FILTER.ACTIONS.SHOW-MORE' | translate }}\">\n                    <mat-icon>keyboard_arrow_down</mat-icon>\n                </button>\n            </div>\n        </mat-expansion-panel>\n    </ng-container>\n</mat-accordion>\n",
                encapsulation: ViewEncapsulation.None,
                host: { class: 'adf-search-filter' },
                styles: [""]
            }] }
];
/** @nocollapse */
SearchFilterComponent.ctorParameters = () => [
    { type: SearchQueryBuilderService },
    { type: SearchService },
    { type: TranslationService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.DEFAULT_PAGE_SIZE;
    /**
     * All facet field items to be displayed in the component. These are updated according to the response.
     *  When a new search is performed, the already existing items are updated with the new bucket count values and
     *  the newly received items are added to the responseFacets.
     * @type {?}
     */
    SearchFilterComponent.prototype.responseFacets;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.facetQueriesPageSize;
    /** @type {?} */
    SearchFilterComponent.prototype.facetQueriesLabel;
    /** @type {?} */
    SearchFilterComponent.prototype.facetExpanded;
    /** @type {?} */
    SearchFilterComponent.prototype.displayResetButton;
    /** @type {?} */
    SearchFilterComponent.prototype.selectedBuckets;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.onDestroy$;
    /** @type {?} */
    SearchFilterComponent.prototype.queryBuilder;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.searchService;
    /**
     * @type {?}
     * @private
     */
    SearchFilterComponent.prototype.translationService;
}
//# sourceMappingURL=data:application/json;base64,