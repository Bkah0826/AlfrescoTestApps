/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { MatSelect } from '@angular/material';
import { Node } from '@alfresco/js-api';
import { DocumentListComponent } from '../document-list';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class BreadcrumbComponent {
    constructor() {
        /**
         * Active node, builds UI based on folderNode.path.elements collection.
         */
        this.folderNode = null;
        /**
         * (optional) Name of the root element of the breadcrumb. You can use
         * this property to rename "Company Home" to "Personal Files" for
         * example. You can use an i18n resource key for the property value.
         */
        this.root = null;
        /**
         * (optional) The id of the root element. You can use this property
         * to set a custom element the breadcrumb should start with.
         */
        this.rootId = null;
        this.route = [];
        this.onDestroy$ = new Subject();
        /**
         * Emitted when the user clicks on a breadcrumb.
         */
        this.navigate = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get hasRoot() {
        return !!this.root;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.transform = this.transform ? this.transform : null;
        if (this.target) {
            this.target.$folderNode
                .pipe(takeUntil(this.onDestroy$))
                .subscribe((/**
             * @param {?} folderNode
             * @return {?}
             */
            (folderNode) => {
                this.folderNode = folderNode;
                this.recalculateNodes();
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.recalculateNodes();
    }
    /**
     * @protected
     * @return {?}
     */
    recalculateNodes() {
        /** @type {?} */
        const node = this.transform ? this.transform(this.folderNode) : this.folderNode;
        this.route = this.parseRoute(node);
        if (this.maxItems && this.route.length > this.maxItems) {
            this.lastNodes = this.route.slice(this.route.length - this.maxItems);
            this.previousNodes = this.route.slice(0, this.route.length - this.maxItems);
            this.previousNodes.reverse();
        }
        else {
            this.lastNodes = this.route;
            this.previousNodes = null;
        }
    }
    /**
     * @return {?}
     */
    open() {
        if (this.dropdown) {
            this.dropdown.open();
        }
    }
    /**
     * @return {?}
     */
    hasPreviousNodes() {
        return this.previousNodes ? true : false;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    parseRoute(node) {
        if (node && node.path) {
            /** @type {?} */
            const route = (/** @type {?} */ ((node.path.elements || []).slice()));
            route.push((/** @type {?} */ ({
                id: node.id,
                name: node.name,
                node: node
            })));
            /** @type {?} */
            const rootPos = this.getElementPosition(route, this.rootId);
            if (rootPos > 0) {
                route.splice(0, rootPos);
            }
            if (rootPos === -1 && this.rootId) {
                route[0].id = this.rootId;
            }
            if (this.root) {
                route[0].name = this.root;
            }
            return route;
        }
        return [];
    }
    /**
     * @private
     * @param {?} route
     * @param {?} nodeId
     * @return {?}
     */
    getElementPosition(route, nodeId) {
        /** @type {?} */
        let position = -1;
        if (route && route.length > 0 && nodeId) {
            position = route.findIndex((/**
             * @param {?} el
             * @return {?}
             */
            (el) => el.id === nodeId));
        }
        return position;
    }
    /**
     * @param {?} route
     * @param {?=} event
     * @return {?}
     */
    onRoutePathClick(route, event) {
        if (event) {
            event.preventDefault();
        }
        if (route) {
            this.navigate.emit(route);
            if (this.target) {
                this.target.navigateTo(route.id);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
}
BreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-breadcrumb',
                template: "<nav *ngIf=\"folderNode\" data-automation-id=\"breadcrumb\" class=\"adf-breadcrumb-container\" role=\"list\">\n    <button\n        *ngIf=\"hasPreviousNodes()\"\n        tabindex=\"0\"\n        class=\"adf-breadcrumb-dropdown-trigger\"\n        (click)=\"open()\">\n        <div class=\"adf-breadcrumb-dropdown-trigger-icon\">\n            <mat-icon [class.adf-isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n            <mat-icon [class.adf-isRoot]=\"!hasPreviousNodes()\" class=\"adf-breadcrumb-dropdown-trigger-arrow\">arrow_drop_down</mat-icon>\n        </div>\n    </button>\n\n    <mat-select\n        #dropdown\n        *ngIf=\"hasPreviousNodes()\"\n        class=\"adf-breadcrumb-dropdown-path\"\n        tabindex=\"0\">\n\n        <mat-option\n            *ngFor=\"let node of previousNodes;\"\n            (click)=\"onRoutePathClick(node, $event)\"\n            class=\"adf-breadcrumb-path-option\"\n            tabindex=\"0\">\n            {{ node.name | translate }}\n        </mat-option>\n    </mat-select>\n\n    <div *ngFor=\"let item of lastNodes; let last = last\"\n        [class.adf-active]=\"last\"\n        [ngSwitch]=\"last\"\n        title=\"{{ item.name | translate }}\"\n        class=\"adf-breadcrumb-item\"\n        role=\"listitem\">\n\n        <a *ngSwitchDefault href=\"#\" [attr.data-automation-id]=\"'breadcrumb_' + item.name\"\n            class=\"adf-breadcrumb-item-anchor\"\n            (click)=\"onRoutePathClick(item, $event)\">\n            {{ item.name | translate }}\n        </a>\n\n        <div *ngSwitchCase=\"true\" class=\"adf-breadcrumb-item-current\">\n            {{ item.name | translate }}\n        </div>\n\n        <mat-icon class=\"adf-breadcrumb-item-chevron\" *ngIf=\"!last\">\n            chevron_right\n        </mat-icon>\n    </div>\n</nav>\n\n<nav *ngIf=\"!folderNode && hasRoot\" data-automation-id=\"breadcrumb\" role=\"navigation\">\n    <div class=\"adf-breadcrumb-item adf-active\" role=\"listitem\">\n        <div class=\"adf-breadcrumb-item-current\">\n            {{ root | translate }}\n        </div>\n    </div>\n</nav>\n",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'adf-breadcrumb'
                },
                styles: [""]
            }] }
];
BreadcrumbComponent.propDecorators = {
    folderNode: [{ type: Input }],
    root: [{ type: Input }],
    rootId: [{ type: Input }],
    target: [{ type: Input }],
    transform: [{ type: Input }],
    dropdown: [{ type: ViewChild, args: ['dropdown',] }],
    maxItems: [{ type: Input }],
    navigate: [{ type: Output }]
};
if (false) {
    /**
     * Active node, builds UI based on folderNode.path.elements collection.
     * @type {?}
     */
    BreadcrumbComponent.prototype.folderNode;
    /**
     * (optional) Name of the root element of the breadcrumb. You can use
     * this property to rename "Company Home" to "Personal Files" for
     * example. You can use an i18n resource key for the property value.
     * @type {?}
     */
    BreadcrumbComponent.prototype.root;
    /**
     * (optional) The id of the root element. You can use this property
     * to set a custom element the breadcrumb should start with.
     * @type {?}
     */
    BreadcrumbComponent.prototype.rootId;
    /**
     * (optional) Document List component to operate with. The list will
     * update when the breadcrumb is clicked.
     * @type {?}
     */
    BreadcrumbComponent.prototype.target;
    /**
     * Transformation to be performed on the chosen/folder node before building
     * the breadcrumb UI. Can be useful when custom formatting is needed for the
     * breadcrumb. You can change the path elements from the node that are used to
     * build the breadcrumb using this function.
     * @type {?}
     */
    BreadcrumbComponent.prototype.transform;
    /** @type {?} */
    BreadcrumbComponent.prototype.dropdown;
    /**
     * Maximum number of nodes to display before wrapping them with a dropdown element.
     * @type {?}
     */
    BreadcrumbComponent.prototype.maxItems;
    /** @type {?} */
    BreadcrumbComponent.prototype.previousNodes;
    /** @type {?} */
    BreadcrumbComponent.prototype.lastNodes;
    /** @type {?} */
    BreadcrumbComponent.prototype.route;
    /**
     * @type {?}
     * @private
     */
    BreadcrumbComponent.prototype.onDestroy$;
    /**
     * Emitted when the user clicks on a breadcrumb.
     * @type {?}
     */
    BreadcrumbComponent.prototype.navigate;
}
//# sourceMappingURL=data:application/json;base64,