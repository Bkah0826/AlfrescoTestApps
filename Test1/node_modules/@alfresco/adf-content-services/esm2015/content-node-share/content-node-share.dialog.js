/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Component, Inject, ViewEncapsulation, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material';
import { FormGroup, FormControl } from '@angular/forms';
import { throwError, Subject } from 'rxjs';
import { skip, distinctUntilChanged, mergeMap, catchError, takeUntil } from 'rxjs/operators';
import { SharedLinksApiService, NodesApiService, ContentService, RenditionsService, AppConfigService } from '@alfresco/adf-core';
import { ConfirmDialogComponent } from '../dialogs/confirm.dialog';
import moment from 'moment-es6';
export class ShareDialogComponent {
    /**
     * @param {?} appConfigService
     * @param {?} sharedLinksApiService
     * @param {?} dialogRef
     * @param {?} dialog
     * @param {?} nodesApiService
     * @param {?} contentService
     * @param {?} renditionService
     * @param {?} data
     */
    constructor(appConfigService, sharedLinksApiService, dialogRef, dialog, nodesApiService, contentService, renditionService, data) {
        this.appConfigService = appConfigService;
        this.sharedLinksApiService = sharedLinksApiService;
        this.dialogRef = dialogRef;
        this.dialog = dialog;
        this.nodesApiService = nodesApiService;
        this.contentService = contentService;
        this.renditionService = renditionService;
        this.data = data;
        this.minDate = moment().add(1, 'd');
        this.isFileShared = false;
        this.isDisabled = false;
        this.form = new FormGroup({
            sharedUrl: new FormControl(''),
            time: new FormControl({ value: '', disabled: false })
        });
        this.type = 'datetime';
        this.onDestroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.type = this.appConfigService.get('sharedLinkDateTimePickerType', 'datetime');
        if (!this.canUpdate) {
            this.form.controls['time'].disable();
        }
        this.form.controls.time.valueChanges
            .pipe(skip(1), distinctUntilChanged(), mergeMap((/**
         * @param {?} updates
         * @return {?}
         */
        (updates) => this.updateNode(updates)), (/**
         * @param {?} formUpdates
         * @return {?}
         */
        (formUpdates) => formUpdates)), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return throwError(error);
        })), takeUntil(this.onDestroy$))
            .subscribe((/**
         * @param {?} updates
         * @return {?}
         */
        updates => this.updateEntryExpiryDate(updates)));
        if (this.data.node && this.data.node.entry) {
            this.fileName = this.data.node.entry.name;
            this.baseShareUrl = this.data.baseShareUrl;
            /** @type {?} */
            const properties = this.data.node.entry.properties;
            if (!properties || !properties['qshare:sharedId']) {
                this.createSharedLinks(this.data.node.entry.id);
            }
            else {
                this.sharedId = properties['qshare:sharedId'];
                this.isFileShared = true;
                this.updateForm();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @return {?}
     */
    removeShare() {
        this.deleteSharedLink(this.sharedId);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSlideShareChange(event) {
        if (event.checked) {
            this.createSharedLinks(this.data.node.entry.id);
        }
        else {
            this.openConfirmationDialog();
        }
    }
    /**
     * @return {?}
     */
    get canUpdate() {
        const { entry } = this.data.node;
        if (entry && entry.allowableOperations) {
            return this.contentService.hasAllowableOperations(entry, 'update');
        }
        return true;
    }
    /**
     * @param {?} slideToggle
     * @return {?}
     */
    onToggleExpirationDate(slideToggle) {
        if (slideToggle.checked) {
            this.matDatetimepickerToggle.datetimepicker.open();
        }
        else {
            this.matDatetimepickerToggle.datetimepicker.close();
            this.form.controls.time.setValue(null);
        }
    }
    /**
     * @return {?}
     */
    onDatetimepickerClosed() {
        this.dateTimePickerInput.nativeElement.blur();
        if (!this.form.controls.time.value) {
            this.slideToggleExpirationDate.checked = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    openConfirmationDialog() {
        this.isFileShared = false;
        this.dialog
            .open(ConfirmDialogComponent, {
            data: {
                title: 'SHARE.CONFIRMATION.DIALOG-TITLE',
                message: 'SHARE.CONFIRMATION.MESSAGE',
                yesLabel: 'SHARE.CONFIRMATION.REMOVE',
                noLabel: 'SHARE.CONFIRMATION.CANCEL'
            },
            minWidth: '250px',
            closeOnNavigation: true
        })
            .beforeClose()
            .subscribe((/**
         * @param {?} deleteSharedLink
         * @return {?}
         */
        (deleteSharedLink) => {
            if (deleteSharedLink) {
                this.deleteSharedLink(this.sharedId);
            }
            else {
                this.isFileShared = true;
            }
        }));
    }
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    createSharedLinks(nodeId) {
        this.isDisabled = true;
        this.sharedLinksApiService.createSharedLinks(nodeId).subscribe((/**
         * @param {?} sharedLink
         * @return {?}
         */
        (sharedLink) => {
            if (sharedLink.entry) {
                this.sharedId = sharedLink.entry.id;
                if (this.data.node.entry.properties) {
                    this.data.node.entry.properties['qshare:sharedId'] = this.sharedId;
                }
                else {
                    this.data.node.entry.properties = {
                        'qshare:sharedId': this.sharedId
                    };
                }
                this.isDisabled = false;
                this.isFileShared = true;
                this.renditionService
                    .generateRenditionForNode(this.data.node.entry.id)
                    .subscribe((/**
                 * @return {?}
                 */
                () => { }));
                this.updateForm();
            }
        }), (/**
         * @return {?}
         */
        () => {
            this.isDisabled = false;
            this.isFileShared = false;
        }));
    }
    /**
     * @param {?} sharedId
     * @return {?}
     */
    deleteSharedLink(sharedId) {
        this.isDisabled = true;
        this.sharedLinksApiService
            .deleteSharedLink(sharedId)
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response instanceof Error) {
                this.isDisabled = false;
                this.isFileShared = true;
                this.handleError(response);
            }
            else {
                if (this.data.node.entry.properties) {
                    this.data.node.entry.properties['qshare:sharedId'] = null;
                    this.data.node.entry.properties['qshare:expiryDate'] = null;
                }
                this.dialogRef.close(false);
            }
        }));
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        /** @type {?} */
        let message = 'SHARE.UNSHARE_ERROR';
        /** @type {?} */
        let statusCode = 0;
        try {
            statusCode = JSON.parse(error.message).error.statusCode;
        }
        catch (_a) { }
        if (statusCode === 403) {
            message = 'SHARE.UNSHARE_PERMISSION_ERROR';
        }
        this.sharedLinksApiService.error.next({
            statusCode,
            message
        });
    }
    /**
     * @private
     * @return {?}
     */
    updateForm() {
        const { entry } = this.data.node;
        /** @type {?} */
        let expiryDate = null;
        if (entry && entry.properties) {
            expiryDate = entry.properties['qshare:expiryDate'];
        }
        this.form.setValue({
            sharedUrl: `${this.baseShareUrl}${this.sharedId}`,
            time: expiryDate ? moment(expiryDate).local() : null
        });
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    updateNode(date) {
        return this.nodesApiService.updateNode(this.data.node.entry.id, {
            properties: {
                'qshare:expiryDate': date ?
                    (this.type === 'date' ? date.endOf('day').utc().format() : date.utc().format()) :
                    null
            }
        });
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    updateEntryExpiryDate(date) {
        const { properties } = this.data.node.entry;
        if (properties) {
            properties['qshare:expiryDate'] = date
                ? date.local()
                : null;
        }
    }
}
ShareDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'adf-share-dialog',
                template: "<div class=\"adf-share-link__dialog-content\">\n    <h1 data-automation-id=\"adf-share-dialog-title\" class=\"adf-share-link__title\">\n        {{ 'SHARE.DIALOG-TITLE' | translate }} {{ fileName }}\n    </h1>\n\n    <mat-dialog-content>\n        <p class=\"adf-share-link__info\">{{ 'SHARE.DESCRIPTION' | translate }}</p>\n\n        <div class=\"adf-share-link--row\">\n            <h1 class=\"adf-share-link__label\">{{ 'SHARE.TITLE' | translate }}</h1>\n\n            <mat-slide-toggle color=\"primary\" data-automation-id=\"adf-share-toggle\" [checked]=\"isFileShared\"\n                [disabled]=\"!canUpdate || isDisabled\" (change)=\"onSlideShareChange($event)\">\n            </mat-slide-toggle>\n        </div>\n\n        <form [formGroup]=\"form\">\n            <mat-form-field class=\"adf-full-width\">\n                <input #sharedLinkInput data-automation-id=\"adf-share-link\" class=\"adf-share-link__input\" matInput\n                    cdkFocusInitial placeholder=\"{{ 'SHARE.PUBLIC-LINK' | translate }}\" formControlName=\"sharedUrl\"\n                    readonly=\"readonly\">\n                <mat-icon class=\"adf-input-action\" matSuffix\n                    [clipboard-notification]=\"'SHARE.CLIPBOARD-MESSAGE' | translate\" [adf-clipboard]\n                    [target]=\"sharedLinkInput\">\n                    link\n                </mat-icon>\n            </mat-form-field>\n\n            <div class=\"adf-share-link--row\">\n            <h1 class=\"adf-share-link__label\">{{ 'SHARE.EXPIRES' | translate }}</h1>\n            <mat-slide-toggle [disabled]=\"!canUpdate\" #slideToggleExpirationDate color=\"primary\"\n                data-automation-id=\"adf-expire-toggle\" [checked]=\"form.controls['time'].value\"\n                (change)=\"onToggleExpirationDate($event)\">\n            </mat-slide-toggle>\n            </div>\n\n            <mat-form-field class=\"adf-full-width\">\n                <mat-datetimepicker-toggle #matDatetimepickerToggle=\"matDatetimepickerToggle\" [for]=\"datetimePicker\" matSuffix></mat-datetimepicker-toggle>\n                <mat-datetimepicker #datetimePicker (closed)=\"onDatetimepickerClosed()\" [type]=\"type\" openOnFocus=\"true\" timeInterval=\"1\"></mat-datetimepicker>\n                <input class=\"adf-share-link__input\"\n                    #dateTimePickerInput\n                    matInput\n                    [min]=\"minDate\"\n                    formControlName=\"time\"\n                    [matDatetimepicker]=\"datetimePicker\" />\n            </mat-form-field>\n        </form>\n    </mat-dialog-content>\n\n    <div mat-dialog-actions>\n        <button data-automation-id=\"adf-share-dialog-close\" mat-button color=\"primary\" mat-dialog-close>\n            {{ 'SHARE.CLOSE' | translate }}\n        </button>\n    </div>\n</div>\n",
                host: { class: 'adf-share-dialog' },
                encapsulation: ViewEncapsulation.None,
                styles: [".adf-share-link-dialog .adf-share-link__dialog-content{display:flex;flex-direction:column}.adf-share-link-dialog .adf-share-link__label{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;font-size:16px;opacity:.87;flex:1 1 auto}.adf-share-link-dialog .adf-share-link__title{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;font-size:16px;opacity:.87}.adf-share-link-dialog .adf-share-link__info{letter-spacing:-.4px;line-height:2;font-weight:400;font-style:normal;font-stretch:normal;opacity:.87;opacity:.54;font-size:13px}.adf-share-link-dialog .adf-share-link--row{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center}.adf-share-link-dialog .adf-share-link__input{opacity:.54}.adf-share-link-dialog .adf-input-action{cursor:pointer}.adf-share-link-dialog .adf-full-width{width:100%}.adf-share-link-dialog .mat-form-field-infix{border-top:unset}.adf-share-link-dialog .mat-dialog-actions{justify-content:flex-end}.adf-share-link-dialog .mat-dialog-actions>button{text-transform:uppercase}.adf-share-link-dialog .mat-form-field-flex{align-items:center}"]
            }] }
];
/** @nocollapse */
ShareDialogComponent.ctorParameters = () => [
    { type: AppConfigService },
    { type: SharedLinksApiService },
    { type: MatDialogRef },
    { type: MatDialog },
    { type: NodesApiService },
    { type: ContentService },
    { type: RenditionsService },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
ShareDialogComponent.propDecorators = {
    matDatetimepickerToggle: [{ type: ViewChild, args: ['matDatetimepickerToggle',] }],
    slideToggleExpirationDate: [{ type: ViewChild, args: ['slideToggleExpirationDate',] }],
    dateTimePickerInput: [{ type: ViewChild, args: ['dateTimePickerInput',] }]
};
if (false) {
    /** @type {?} */
    ShareDialogComponent.prototype.minDate;
    /** @type {?} */
    ShareDialogComponent.prototype.sharedId;
    /** @type {?} */
    ShareDialogComponent.prototype.fileName;
    /** @type {?} */
    ShareDialogComponent.prototype.baseShareUrl;
    /** @type {?} */
    ShareDialogComponent.prototype.isFileShared;
    /** @type {?} */
    ShareDialogComponent.prototype.isDisabled;
    /** @type {?} */
    ShareDialogComponent.prototype.form;
    /** @type {?} */
    ShareDialogComponent.prototype.type;
    /** @type {?} */
    ShareDialogComponent.prototype.matDatetimepickerToggle;
    /** @type {?} */
    ShareDialogComponent.prototype.slideToggleExpirationDate;
    /** @type {?} */
    ShareDialogComponent.prototype.dateTimePickerInput;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.appConfigService;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.sharedLinksApiService;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.nodesApiService;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.contentService;
    /**
     * @type {?}
     * @private
     */
    ShareDialogComponent.prototype.renditionService;
    /** @type {?} */
    ShareDialogComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,