/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*!
 * @license
 * Copyright 2019 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Directive, Input, HostListener, NgZone } from '@angular/core';
import { MatDialog } from '@angular/material';
import { NodeEntry } from '@alfresco/js-api';
import { ShareDialogComponent } from './content-node-share.dialog';
import { from, Subject } from 'rxjs';
import { AlfrescoApiService } from '@alfresco/adf-core';
import { takeUntil } from 'rxjs/operators';
export class NodeSharedDirective {
    /**
     * @param {?} dialog
     * @param {?} zone
     * @param {?} alfrescoApiService
     */
    constructor(dialog, zone, alfrescoApiService) {
        this.dialog = dialog;
        this.zone = zone;
        this.alfrescoApiService = alfrescoApiService;
        this.isFile = false;
        this.isShared = false;
        this.onDestroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onDestroy$.next(true);
        this.onDestroy$.complete();
    }
    /**
     * @param {?} nodeEntry
     * @return {?}
     */
    shareNode(nodeEntry) {
        if (nodeEntry && nodeEntry.entry && nodeEntry.entry.isFile) {
            // shared and favorite
            /** @type {?} */
            const nodeId = nodeEntry.entry['nodeId'] || nodeEntry.entry['guid'];
            if (nodeId) {
                this.getNodeInfo(nodeId).subscribe((/**
                 * @param {?} entry
                 * @return {?}
                 */
                (entry) => {
                    this.openShareLinkDialog({ entry });
                }));
            }
            else {
                this.openShareLinkDialog(nodeEntry);
            }
        }
    }
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    getNodeInfo(nodeId) {
        /** @type {?} */
        const options = {
            include: ['allowableOperations']
        };
        return from(this.alfrescoApiService.nodesApi.getNodeInfo(nodeId, options));
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    openShareLinkDialog(node) {
        this.dialog.open(ShareDialogComponent, {
            width: '600px',
            panelClass: 'adf-share-link-dialog',
            data: {
                node,
                baseShareUrl: this.baseShareUrl
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.zone.onStable
            .pipe(takeUntil(this.onDestroy$))
            .subscribe((/**
         * @return {?}
         */
        () => {
            if (this.node && this.node.entry) {
                this.isFile = this.node.entry.isFile;
                this.isShared = this.node.entry.properties ? this.node.entry.properties['qshare:sharedId'] : false;
            }
        }));
    }
    /**
     * @return {?}
     */
    onClick() {
        if (this.node) {
            this.shareNode(this.node);
        }
    }
}
NodeSharedDirective.decorators = [
    { type: Directive, args: [{
                selector: '[adf-share]',
                exportAs: 'adfShare'
            },] }
];
/** @nocollapse */
NodeSharedDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: NgZone },
    { type: AlfrescoApiService }
];
NodeSharedDirective.propDecorators = {
    node: [{ type: Input, args: ['adf-share',] }],
    baseShareUrl: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
if (false) {
    /** @type {?} */
    NodeSharedDirective.prototype.isFile;
    /** @type {?} */
    NodeSharedDirective.prototype.isShared;
    /**
     * Node to share.
     * @type {?}
     */
    NodeSharedDirective.prototype.node;
    /**
     * Prefix to add to the generated link.
     * @type {?}
     */
    NodeSharedDirective.prototype.baseShareUrl;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.onDestroy$;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    NodeSharedDirective.prototype.alfrescoApiService;
}
//# sourceMappingURL=data:application/json;base64,